
loopcount.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002880  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08002a10  08002a10  00012a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aec  08002aec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002aec  08002aec  00012aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002af4  08002af4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002af4  08002af4  00012af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002af8  08002af8  00012af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000080  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a599  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c9c  00000000  00000000  0002a639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000046e0  00000000  00000000  0002c2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000700  00000000  00000000  000309b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000006b0  00000000  00000000  000310b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f334  00000000  00000000  00031768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000097d9  00000000  00000000  00050a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b8e35  00000000  00000000  0005a275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001130aa  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001948  00000000  00000000  00113100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080029f8 	.word	0x080029f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080029f8 	.word	0x080029f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	2400      	movs	r4, #0
 800056e:	9403      	str	r4, [sp, #12]
 8000570:	9404      	str	r4, [sp, #16]
 8000572:	9405      	str	r4, [sp, #20]
 8000574:	9406      	str	r4, [sp, #24]
 8000576:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000578:	9400      	str	r4, [sp, #0]
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <MX_GPIO_Init+0x78>)
 800057c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800057e:	f042 0204 	orr.w	r2, r2, #4
 8000582:	631a      	str	r2, [r3, #48]	; 0x30
 8000584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000586:	f002 0204 	and.w	r2, r2, #4
 800058a:	9200      	str	r2, [sp, #0]
 800058c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	9401      	str	r4, [sp, #4]
 8000590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000592:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000596:	631a      	str	r2, [r3, #48]	; 0x30
 8000598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800059a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	9402      	str	r4, [sp, #8]
 80005a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a6:	f042 0201 	orr.w	r2, r2, #1
 80005aa:	631a      	str	r2, [r3, #48]	; 0x30
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	9302      	str	r3, [sp, #8]
 80005b4:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005b6:	4d0b      	ldr	r5, [pc, #44]	; (80005e4 <MX_GPIO_Init+0x7c>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005be:	4628      	mov	r0, r5
 80005c0:	f000 fbb2 	bl	8000d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005ca:	2311      	movs	r3, #17
 80005cc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005d2:	a903      	add	r1, sp, #12
 80005d4:	4628      	mov	r0, r5
 80005d6:	f000 fabd 	bl	8000b54 <HAL_GPIO_Init>

}
 80005da:	b009      	add	sp, #36	; 0x24
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020800 	.word	0x40020800

080005e8 <_write>:
  if (fd == 1 || fd == 2) {
 80005e8:	3801      	subs	r0, #1
 80005ea:	2801      	cmp	r0, #1
 80005ec:	d80a      	bhi.n	8000604 <_write+0x1c>
int _write(int fd, char* ptr, int len) {
 80005ee:	b510      	push	{r4, lr}
 80005f0:	4614      	mov	r4, r2
    hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f6:	b292      	uxth	r2, r2
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <_write+0x28>)
 80005fa:	f001 f818 	bl	800162e <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
 80005fe:	b920      	cbnz	r0, 800060a <_write+0x22>
      return len;
 8000600:	4620      	mov	r0, r4
}
 8000602:	bd10      	pop	{r4, pc}
  return -1;
 8000604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000608:	4770      	bx	lr
      return -1;
 800060a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800060e:	e7f8      	b.n	8000602 <_write+0x1a>
 8000610:	20000098 	.word	0x20000098

08000614 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000616:	e7fe      	b.n	8000616 <Error_Handler+0x2>

08000618 <MX_USART1_UART_Init>:
{
 8000618:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800061a:	480a      	ldr	r0, [pc, #40]	; (8000644 <MX_USART1_UART_Init+0x2c>)
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_USART1_UART_Init+0x30>)
 800061e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8000620:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8000624:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	2300      	movs	r3, #0
 8000628:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800062a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800062c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800062e:	220c      	movs	r2, #12
 8000630:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000634:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000636:	f000 ffcb 	bl	80015d0 <HAL_UART_Init>
 800063a:	b900      	cbnz	r0, 800063e <MX_USART1_UART_Init+0x26>
}
 800063c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800063e:	f7ff ffe9 	bl	8000614 <Error_Handler>
 8000642:	bf00      	nop
 8000644:	20000098 	.word	0x20000098
 8000648:	40011000 	.word	0x40011000

0800064c <SystemClock_Config>:
{
 800064c:	b500      	push	{lr}
 800064e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000650:	2230      	movs	r2, #48	; 0x30
 8000652:	2100      	movs	r1, #0
 8000654:	a808      	add	r0, sp, #32
 8000656:	f001 f9fb 	bl	8001a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065a:	2300      	movs	r3, #0
 800065c:	9303      	str	r3, [sp, #12]
 800065e:	9304      	str	r3, [sp, #16]
 8000660:	9305      	str	r3, [sp, #20]
 8000662:	9306      	str	r3, [sp, #24]
 8000664:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	4a20      	ldr	r2, [pc, #128]	; (80006ec <SystemClock_Config+0xa0>)
 800066a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800066c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000670:	6411      	str	r1, [r2, #64]	; 0x40
 8000672:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000674:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000678:	9201      	str	r2, [sp, #4]
 800067a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	9302      	str	r3, [sp, #8]
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <SystemClock_Config+0xa4>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068e:	9302      	str	r3, [sp, #8]
 8000690:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000692:	2301      	movs	r3, #1
 8000694:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2202      	movs	r2, #2
 800069e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006aa:	21a8      	movs	r1, #168	; 0xa8
 80006ac:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	a808      	add	r0, sp, #32
 80006b4:	f000 fb48 	bl	8000d48 <HAL_RCC_OscConfig>
 80006b8:	b998      	cbnz	r0, 80006e2 <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2302      	movs	r3, #2
 80006c0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ca:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d2:	2105      	movs	r1, #5
 80006d4:	a803      	add	r0, sp, #12
 80006d6:	f000 fd99 	bl	800120c <HAL_RCC_ClockConfig>
 80006da:	b920      	cbnz	r0, 80006e6 <SystemClock_Config+0x9a>
}
 80006dc:	b015      	add	sp, #84	; 0x54
 80006de:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006e2:	f7ff ff97 	bl	8000614 <Error_Handler>
    Error_Handler();
 80006e6:	f7ff ff95 	bl	8000614 <Error_Handler>
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <main>:
{
 80006f4:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 80006f6:	f000 f939 	bl	800096c <HAL_Init>
  SystemClock_Config();
 80006fa:	f7ff ffa7 	bl	800064c <SystemClock_Config>
  MX_GPIO_Init();
 80006fe:	f7ff ff33 	bl	8000568 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000702:	f7ff ff89 	bl	8000618 <MX_USART1_UART_Init>
  printf("Loopcount start!\n");
 8000706:	480f      	ldr	r0, [pc, #60]	; (8000744 <main+0x50>)
 8000708:	f001 fa30 	bl	8001b6c <puts>
  uint32_t last_print = 0, now = 0, cnt = 0;
 800070c:	2500      	movs	r5, #0
 800070e:	462e      	mov	r6, r5
 8000710:	e00f      	b.n	8000732 <main+0x3e>
		printf("Tick %lu - count = %lu\n", now / 1000, cnt);
 8000712:	490d      	ldr	r1, [pc, #52]	; (8000748 <main+0x54>)
 8000714:	fba1 3100 	umull	r3, r1, r1, r0
 8000718:	462a      	mov	r2, r5
 800071a:	0989      	lsrs	r1, r1, #6
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <main+0x58>)
 800071e:	f001 f99f 	bl	8001a60 <iprintf>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000726:	480a      	ldr	r0, [pc, #40]	; (8000750 <main+0x5c>)
 8000728:	f000 fb04 	bl	8000d34 <HAL_GPIO_TogglePin>
		last_print = now;
 800072c:	4626      	mov	r6, r4
		cnt = 0;
 800072e:	2500      	movs	r5, #0
	cnt++;
 8000730:	3501      	adds	r5, #1
	now = HAL_GetTick();
 8000732:	f000 f941 	bl	80009b8 <HAL_GetTick>
 8000736:	4604      	mov	r4, r0
	if (now - last_print > 1000) {
 8000738:	1b83      	subs	r3, r0, r6
 800073a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800073e:	d9f7      	bls.n	8000730 <main+0x3c>
 8000740:	e7e7      	b.n	8000712 <main+0x1e>
 8000742:	bf00      	nop
 8000744:	08002a10 	.word	0x08002a10
 8000748:	10624dd3 	.word	0x10624dd3
 800074c:	08002a24 	.word	0x08002a24
 8000750:	40020800 	.word	0x40020800

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2100      	movs	r1, #0
 8000758:	9100      	str	r1, [sp, #0]
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_MspInit+0x34>)
 800075c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800075e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000762:	645a      	str	r2, [r3, #68]	; 0x44
 8000764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000766:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800076a:	9200      	str	r2, [sp, #0]
 800076c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	9101      	str	r1, [sp, #4]
 8000770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000772:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000776:	641a      	str	r2, [r3, #64]	; 0x40
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	b002      	add	sp, #8
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800

0800078c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800078c:	b510      	push	{r4, lr}
 800078e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	2300      	movs	r3, #0
 8000792:	9303      	str	r3, [sp, #12]
 8000794:	9304      	str	r3, [sp, #16]
 8000796:	9305      	str	r3, [sp, #20]
 8000798:	9306      	str	r3, [sp, #24]
 800079a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800079c:	6802      	ldr	r2, [r0, #0]
 800079e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007a2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d001      	beq.n	80007ae <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007aa:	b008      	add	sp, #32
 80007ac:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ae:	2400      	movs	r4, #0
 80007b0:	9401      	str	r4, [sp, #4]
 80007b2:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80007b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007b8:	f042 0210 	orr.w	r2, r2, #16
 80007bc:	645a      	str	r2, [r3, #68]	; 0x44
 80007be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007c0:	f002 0210 	and.w	r2, r2, #16
 80007c4:	9201      	str	r2, [sp, #4]
 80007c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	9402      	str	r4, [sp, #8]
 80007ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007cc:	f042 0201 	orr.w	r2, r2, #1
 80007d0:	631a      	str	r2, [r3, #48]	; 0x30
 80007d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d4:	f003 0301 	and.w	r3, r3, #1
 80007d8:	9302      	str	r3, [sp, #8]
 80007da:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007ec:	2307      	movs	r3, #7
 80007ee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	a903      	add	r1, sp, #12
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <HAL_UART_MspInit+0x80>)
 80007f4:	f000 f9ae 	bl	8000b54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007f8:	4622      	mov	r2, r4
 80007fa:	4621      	mov	r1, r4
 80007fc:	2025      	movs	r0, #37	; 0x25
 80007fe:	f000 f8f3 	bl	80009e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000802:	2025      	movs	r0, #37	; 0x25
 8000804:	f000 f924 	bl	8000a50 <HAL_NVIC_EnableIRQ>
}
 8000808:	e7cf      	b.n	80007aa <HAL_UART_MspInit+0x1e>
 800080a:	bf00      	nop
 800080c:	40020000 	.word	0x40020000

08000810 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler>

08000812 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler>

08000814 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <MemManage_Handler>

08000816 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <BusFault_Handler>

08000818 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <UsageFault_Handler>

0800081a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081a:	4770      	bx	lr

0800081c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081c:	4770      	bx	lr

0800081e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081e:	4770      	bx	lr

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000822:	f000 f8bd 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000826:	bd08      	pop	{r3, pc}

08000828 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000828:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800082a:	4802      	ldr	r0, [pc, #8]	; (8000834 <USART1_IRQHandler+0xc>)
 800082c:	f000 ffe2 	bl	80017f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000830:	bd08      	pop	{r3, pc}
 8000832:	bf00      	nop
 8000834:	20000098 	.word	0x20000098

08000838 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	460c      	mov	r4, r1
 800083c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083e:	2500      	movs	r5, #0
 8000840:	42b5      	cmp	r5, r6
 8000842:	da07      	bge.n	8000854 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8000844:	f3af 8000 	nop.w
 8000848:	4621      	mov	r1, r4
 800084a:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084e:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8000850:	460c      	mov	r4, r1
 8000852:	e7f5      	b.n	8000840 <_read+0x8>
	}

return len;
}
 8000854:	4630      	mov	r0, r6
 8000856:	bd70      	pop	{r4, r5, r6, pc}

08000858 <_close>:
}

int _close(int file)
{
	return -1;
}
 8000858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800085c:	4770      	bx	lr

0800085e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800085e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000862:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000864:	2000      	movs	r0, #0
 8000866:	4770      	bx	lr

08000868 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000868:	2001      	movs	r0, #1
 800086a:	4770      	bx	lr

0800086c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800086c:	2000      	movs	r0, #0
 800086e:	4770      	bx	lr

08000870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000870:	b510      	push	{r4, lr}
 8000872:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <_sbrk+0x38>)
 8000876:	490d      	ldr	r1, [pc, #52]	; (80008ac <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <_sbrk+0x40>)
 800087a:	6800      	ldr	r0, [r0, #0]
 800087c:	b140      	cbz	r0, 8000890 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	480c      	ldr	r0, [pc, #48]	; (80008b0 <_sbrk+0x40>)
 8000880:	6800      	ldr	r0, [r0, #0]
 8000882:	4403      	add	r3, r0
 8000884:	1a52      	subs	r2, r2, r1
 8000886:	4293      	cmp	r3, r2
 8000888:	d806      	bhi.n	8000898 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800088a:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <_sbrk+0x40>)
 800088c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800088e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <_sbrk+0x40>)
 8000892:	4c08      	ldr	r4, [pc, #32]	; (80008b4 <_sbrk+0x44>)
 8000894:	6004      	str	r4, [r0, #0]
 8000896:	e7f2      	b.n	800087e <_sbrk+0xe>
    errno = ENOMEM;
 8000898:	f001 f8b0 	bl	80019fc <__errno>
 800089c:	230c      	movs	r3, #12
 800089e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008a4:	e7f3      	b.n	800088e <_sbrk+0x1e>
 80008a6:	bf00      	nop
 80008a8:	20020000 	.word	0x20020000
 80008ac:	00000400 	.word	0x00000400
 80008b0:	2000008c 	.word	0x2000008c
 80008b4:	200000f0 	.word	0x200000f0

080008b8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b8:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <SystemInit+0x10>)
 80008ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80008be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000904 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008d2:	490e      	ldr	r1, [pc, #56]	; (800090c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008e8:	4c0b      	ldr	r4, [pc, #44]	; (8000918 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008f6:	f7ff ffdf 	bl	80008b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fa:	f001 f885 	bl	8001a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fe:	f7ff fef9 	bl	80006f4 <main>
  bx  lr    
 8000902:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000904:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000910:	08002afc 	.word	0x08002afc
  ldr r2, =_sbss
 8000914:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000918:	200000f0 	.word	0x200000f0

0800091c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC_IRQHandler>
	...

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b510      	push	{r4, lr}
 8000922:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_InitTick+0x40>)
 8000926:	7818      	ldrb	r0, [r3, #0]
 8000928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000930:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <HAL_InitTick+0x44>)
 8000932:	6810      	ldr	r0, [r2, #0]
 8000934:	fbb0 f0f3 	udiv	r0, r0, r3
 8000938:	f000 f898 	bl	8000a6c <HAL_SYSTICK_Config>
 800093c:	b968      	cbnz	r0, 800095a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093e:	2c0f      	cmp	r4, #15
 8000940:	d901      	bls.n	8000946 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000942:	2001      	movs	r0, #1
 8000944:	e00a      	b.n	800095c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000946:	2200      	movs	r2, #0
 8000948:	4621      	mov	r1, r4
 800094a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800094e:	f000 f84b 	bl	80009e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_InitTick+0x48>)
 8000954:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000956:	2000      	movs	r0, #0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800095a:	2001      	movs	r0, #1
}
 800095c:	bd10      	pop	{r4, pc}
 800095e:	bf00      	nop
 8000960:	20000004 	.word	0x20000004
 8000964:	20000000 	.word	0x20000000
 8000968:	20000008 	.word	0x20000008

0800096c <HAL_Init>:
{
 800096c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_Init+0x30>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000976:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800097e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000986:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f81b 	bl	80009c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	200f      	movs	r0, #15
 8000990:	f7ff ffc6 	bl	8000920 <HAL_InitTick>
  HAL_MspInit();
 8000994:	f7ff fede 	bl	8000754 <HAL_MspInit>
}
 8000998:	2000      	movs	r0, #0
 800099a:	bd08      	pop	{r3, pc}
 800099c:	40023c00 	.word	0x40023c00

080009a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009a0:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <HAL_IncTick+0x10>)
 80009a2:	6811      	ldr	r1, [r2, #0]
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_IncTick+0x14>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	440b      	add	r3, r1
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	200000dc 	.word	0x200000dc
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009b8:	4b01      	ldr	r3, [pc, #4]	; (80009c0 <HAL_GetTick+0x8>)
 80009ba:	6818      	ldr	r0, [r3, #0]
}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	200000dc 	.word	0x200000dc

080009c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009cc:	041b      	lsls	r3, r3, #16
 80009ce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	0200      	lsls	r0, r0, #8
 80009d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80009e0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <HAL_NVIC_SetPriority+0x60>)
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f2:	f1c3 0407 	rsb	r4, r3, #7
 80009f6:	2c04      	cmp	r4, #4
 80009f8:	bf28      	it	cs
 80009fa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fc:	1d1d      	adds	r5, r3, #4
 80009fe:	2d06      	cmp	r5, #6
 8000a00:	d918      	bls.n	8000a34 <HAL_NVIC_SetPriority+0x4c>
 8000a02:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000a08:	fa05 f404 	lsl.w	r4, r5, r4
 8000a0c:	ea21 0104 	bic.w	r1, r1, r4
 8000a10:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a12:	fa05 f303 	lsl.w	r3, r5, r3
 8000a16:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	db0b      	blt.n	8000a38 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	0109      	lsls	r1, r1, #4
 8000a22:	b2c9      	uxtb	r1, r1
 8000a24:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a28:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000a2c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a30:	bc30      	pop	{r4, r5}
 8000a32:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a34:	2300      	movs	r3, #0
 8000a36:	e7e5      	b.n	8000a04 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a38:	f000 000f 	and.w	r0, r0, #15
 8000a3c:	0109      	lsls	r1, r1, #4
 8000a3e:	b2c9      	uxtb	r1, r1
 8000a40:	4b02      	ldr	r3, [pc, #8]	; (8000a4c <HAL_NVIC_SetPriority+0x64>)
 8000a42:	5419      	strb	r1, [r3, r0]
 8000a44:	e7f4      	b.n	8000a30 <HAL_NVIC_SetPriority+0x48>
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00
 8000a4c:	e000ed14 	.word	0xe000ed14

08000a50 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a50:	2800      	cmp	r0, #0
 8000a52:	db07      	blt.n	8000a64 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a54:	f000 021f 	and.w	r2, r0, #31
 8000a58:	0940      	lsrs	r0, r0, #5
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	4093      	lsls	r3, r2
 8000a5e:	4a02      	ldr	r2, [pc, #8]	; (8000a68 <HAL_NVIC_EnableIRQ+0x18>)
 8000a60:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a6c:	3801      	subs	r0, #1
 8000a6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a72:	d20a      	bcs.n	8000a8a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_SYSTICK_Config+0x24>)
 8000a76:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <HAL_SYSTICK_Config+0x28>)
 8000a7a:	21f0      	movs	r1, #240	; 0xf0
 8000a7c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a80:	2000      	movs	r0, #0
 8000a82:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a84:	2207      	movs	r2, #7
 8000a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a88:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a8a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e010 	.word	0xe000e010
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a9c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8000a9e:	f7ff ff8b 	bl	80009b8 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aa2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d006      	beq.n	8000aba <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8000ab6:	2001      	movs	r0, #1
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
  }
  return HAL_OK;
}
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
 8000aba:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000abc:	6822      	ldr	r2, [r4, #0]
 8000abe:	6813      	ldr	r3, [r2, #0]
 8000ac0:	f023 0316 	bic.w	r3, r3, #22
 8000ac4:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ac6:	6822      	ldr	r2, [r4, #0]
 8000ac8:	6953      	ldr	r3, [r2, #20]
 8000aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ace:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ad0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ad2:	b1e3      	cbz	r3, 8000b0e <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ad4:	6822      	ldr	r2, [r4, #0]
 8000ad6:	6813      	ldr	r3, [r2, #0]
 8000ad8:	f023 0308 	bic.w	r3, r3, #8
 8000adc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000ade:	6822      	ldr	r2, [r4, #0]
 8000ae0:	6813      	ldr	r3, [r2, #0]
 8000ae2:	f023 0301 	bic.w	r3, r3, #1
 8000ae6:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ae8:	6823      	ldr	r3, [r4, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f013 0f01 	tst.w	r3, #1
 8000af0:	d011      	beq.n	8000b16 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000af2:	f7ff ff61 	bl	80009b8 <HAL_GetTick>
 8000af6:	1b43      	subs	r3, r0, r5
 8000af8:	2b05      	cmp	r3, #5
 8000afa:	d9f5      	bls.n	8000ae8 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000afc:	2320      	movs	r3, #32
 8000afe:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8000b00:	2300      	movs	r3, #0
 8000b02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b06:	2003      	movs	r0, #3
 8000b08:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8000b0c:	e7d4      	b.n	8000ab8 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1df      	bne.n	8000ad4 <HAL_DMA_Abort+0x3c>
 8000b14:	e7e3      	b.n	8000ade <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b16:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b18:	233f      	movs	r3, #63	; 0x3f
 8000b1a:	4093      	lsls	r3, r2
 8000b1c:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8000b24:	2301      	movs	r3, #1
 8000b26:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000b2a:	e7c5      	b.n	8000ab8 <HAL_DMA_Abort+0x20>

08000b2c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b2c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d003      	beq.n	8000b3e <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b3e:	2305      	movs	r3, #5
 8000b40:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b44:	6802      	ldr	r2, [r0, #0]
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	f023 0301 	bic.w	r3, r3, #1
 8000b4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000b4e:	2000      	movs	r0, #0
}
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	2b0f      	cmp	r3, #15
 8000b58:	f200 80dd 	bhi.w	8000d16 <HAL_GPIO_Init+0x1c2>
{
 8000b5c:	b4f0      	push	{r4, r5, r6, r7}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	e05d      	b.n	8000c1e <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b62:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b64:	005f      	lsls	r7, r3, #1
 8000b66:	2403      	movs	r4, #3
 8000b68:	40bc      	lsls	r4, r7
 8000b6a:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b6e:	68cc      	ldr	r4, [r1, #12]
 8000b70:	40bc      	lsls	r4, r7
 8000b72:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000b74:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b76:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b78:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b7c:	684c      	ldr	r4, [r1, #4]
 8000b7e:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000b82:	409a      	lsls	r2, r3
 8000b84:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000b86:	6042      	str	r2, [r0, #4]
 8000b88:	e057      	b.n	8000c3a <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b8a:	08dc      	lsrs	r4, r3, #3
 8000b8c:	3408      	adds	r4, #8
 8000b8e:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b92:	f003 0207 	and.w	r2, r3, #7
 8000b96:	0096      	lsls	r6, r2, #2
 8000b98:	220f      	movs	r2, #15
 8000b9a:	40b2      	lsls	r2, r6
 8000b9c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ba0:	690a      	ldr	r2, [r1, #16]
 8000ba2:	40b2      	lsls	r2, r6
 8000ba4:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000ba6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000baa:	e05a      	b.n	8000c62 <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bac:	2207      	movs	r2, #7
 8000bae:	e000      	b.n	8000bb2 <HAL_GPIO_Init+0x5e>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	40b2      	lsls	r2, r6
 8000bb4:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bb6:	3402      	adds	r4, #2
 8000bb8:	4e57      	ldr	r6, [pc, #348]	; (8000d18 <HAL_GPIO_Init+0x1c4>)
 8000bba:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bbe:	4a57      	ldr	r2, [pc, #348]	; (8000d1c <HAL_GPIO_Init+0x1c8>)
 8000bc0:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bc2:	43ea      	mvns	r2, r5
 8000bc4:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc8:	684f      	ldr	r7, [r1, #4]
 8000bca:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000bce:	d001      	beq.n	8000bd4 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8000bd0:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000bd4:	4c51      	ldr	r4, [pc, #324]	; (8000d1c <HAL_GPIO_Init+0x1c8>)
 8000bd6:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000bd8:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000bda:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bde:	684f      	ldr	r7, [r1, #4]
 8000be0:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000be4:	d001      	beq.n	8000bea <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8000be6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000bea:	4c4c      	ldr	r4, [pc, #304]	; (8000d1c <HAL_GPIO_Init+0x1c8>)
 8000bec:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bee:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bf0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf4:	684f      	ldr	r7, [r1, #4]
 8000bf6:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000bfa:	d001      	beq.n	8000c00 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8000bfc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000c00:	4c46      	ldr	r4, [pc, #280]	; (8000d1c <HAL_GPIO_Init+0x1c8>)
 8000c02:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000c04:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c06:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c08:	684e      	ldr	r6, [r1, #4]
 8000c0a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000c0e:	d001      	beq.n	8000c14 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8000c10:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000c14:	4c41      	ldr	r4, [pc, #260]	; (8000d1c <HAL_GPIO_Init+0x1c8>)
 8000c16:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c18:	3301      	adds	r3, #1
 8000c1a:	2b0f      	cmp	r3, #15
 8000c1c:	d878      	bhi.n	8000d10 <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 8000c1e:	2201      	movs	r2, #1
 8000c20:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c22:	680c      	ldr	r4, [r1, #0]
 8000c24:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000c28:	ea32 0404 	bics.w	r4, r2, r4
 8000c2c:	d1f4      	bne.n	8000c18 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2e:	684c      	ldr	r4, [r1, #4]
 8000c30:	f004 0403 	and.w	r4, r4, #3
 8000c34:	3c01      	subs	r4, #1
 8000c36:	2c01      	cmp	r4, #1
 8000c38:	d993      	bls.n	8000b62 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3a:	684a      	ldr	r2, [r1, #4]
 8000c3c:	f002 0203 	and.w	r2, r2, #3
 8000c40:	2a03      	cmp	r2, #3
 8000c42:	d009      	beq.n	8000c58 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 8000c44:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c46:	005e      	lsls	r6, r3, #1
 8000c48:	2203      	movs	r2, #3
 8000c4a:	40b2      	lsls	r2, r6
 8000c4c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c50:	688a      	ldr	r2, [r1, #8]
 8000c52:	40b2      	lsls	r2, r6
 8000c54:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000c56:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c58:	684a      	ldr	r2, [r1, #4]
 8000c5a:	f002 0203 	and.w	r2, r2, #3
 8000c5e:	2a02      	cmp	r2, #2
 8000c60:	d093      	beq.n	8000b8a <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8000c62:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c64:	005e      	lsls	r6, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	40b2      	lsls	r2, r6
 8000c6a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c6e:	684a      	ldr	r2, [r1, #4]
 8000c70:	f002 0203 	and.w	r2, r2, #3
 8000c74:	40b2      	lsls	r2, r6
 8000c76:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000c78:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c7a:	684a      	ldr	r2, [r1, #4]
 8000c7c:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000c80:	d0ca      	beq.n	8000c18 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	2200      	movs	r2, #0
 8000c84:	9201      	str	r2, [sp, #4]
 8000c86:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <HAL_GPIO_Init+0x1cc>)
 8000c88:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000c8a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000c8e:	6454      	str	r4, [r2, #68]	; 0x44
 8000c90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000c92:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000c96:	9201      	str	r2, [sp, #4]
 8000c98:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c9a:	089c      	lsrs	r4, r3, #2
 8000c9c:	1ca6      	adds	r6, r4, #2
 8000c9e:	4a1e      	ldr	r2, [pc, #120]	; (8000d18 <HAL_GPIO_Init+0x1c4>)
 8000ca0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ca4:	f003 0203 	and.w	r2, r3, #3
 8000ca8:	0096      	lsls	r6, r2, #2
 8000caa:	220f      	movs	r2, #15
 8000cac:	40b2      	lsls	r2, r6
 8000cae:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	; (8000d24 <HAL_GPIO_Init+0x1d0>)
 8000cb4:	4290      	cmp	r0, r2
 8000cb6:	f43f af7b 	beq.w	8000bb0 <HAL_GPIO_Init+0x5c>
 8000cba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	d01a      	beq.n	8000cf8 <HAL_GPIO_Init+0x1a4>
 8000cc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	d018      	beq.n	8000cfc <HAL_GPIO_Init+0x1a8>
 8000cca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	d016      	beq.n	8000d00 <HAL_GPIO_Init+0x1ac>
 8000cd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	d014      	beq.n	8000d04 <HAL_GPIO_Init+0x1b0>
 8000cda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	d012      	beq.n	8000d08 <HAL_GPIO_Init+0x1b4>
 8000ce2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d010      	beq.n	8000d0c <HAL_GPIO_Init+0x1b8>
 8000cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f43f af5c 	beq.w	8000bac <HAL_GPIO_Init+0x58>
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	e75c      	b.n	8000bb2 <HAL_GPIO_Init+0x5e>
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	e75a      	b.n	8000bb2 <HAL_GPIO_Init+0x5e>
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	e758      	b.n	8000bb2 <HAL_GPIO_Init+0x5e>
 8000d00:	2203      	movs	r2, #3
 8000d02:	e756      	b.n	8000bb2 <HAL_GPIO_Init+0x5e>
 8000d04:	2204      	movs	r2, #4
 8000d06:	e754      	b.n	8000bb2 <HAL_GPIO_Init+0x5e>
 8000d08:	2205      	movs	r2, #5
 8000d0a:	e752      	b.n	8000bb2 <HAL_GPIO_Init+0x5e>
 8000d0c:	2206      	movs	r2, #6
 8000d0e:	e750      	b.n	8000bb2 <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8000d10:	b002      	add	sp, #8
 8000d12:	bcf0      	pop	{r4, r5, r6, r7}
 8000d14:	4770      	bx	lr
 8000d16:	4770      	bx	lr
 8000d18:	40013800 	.word	0x40013800
 8000d1c:	40013c00 	.word	0x40013c00
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000

08000d28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d28:	b10a      	cbz	r2, 8000d2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d2a:	6181      	str	r1, [r0, #24]
 8000d2c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d2e:	0409      	lsls	r1, r1, #16
 8000d30:	6181      	str	r1, [r0, #24]
  }
}
 8000d32:	4770      	bx	lr

08000d34 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d34:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d36:	ea01 0203 	and.w	r2, r1, r3
 8000d3a:	ea21 0103 	bic.w	r1, r1, r3
 8000d3e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d42:	6181      	str	r1, [r0, #24]
}
 8000d44:	4770      	bx	lr
	...

08000d48 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	f000 81df 	beq.w	800110c <HAL_RCC_OscConfig+0x3c4>
{
 8000d4e:	b570      	push	{r4, r5, r6, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d54:	6803      	ldr	r3, [r0, #0]
 8000d56:	f013 0f01 	tst.w	r3, #1
 8000d5a:	d03b      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d5c:	4ba6      	ldr	r3, [pc, #664]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f003 030c 	and.w	r3, r3, #12
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d02c      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d68:	4ba3      	ldr	r3, [pc, #652]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d021      	beq.n	8000db8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d74:	6863      	ldr	r3, [r4, #4]
 8000d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d7a:	d04f      	beq.n	8000e1c <HAL_RCC_OscConfig+0xd4>
 8000d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d80:	d052      	beq.n	8000e28 <HAL_RCC_OscConfig+0xe0>
 8000d82:	4b9d      	ldr	r3, [pc, #628]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d92:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d94:	6863      	ldr	r3, [r4, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d050      	beq.n	8000e3c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fe0d 	bl	80009b8 <HAL_GetTick>
 8000d9e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da0:	4b95      	ldr	r3, [pc, #596]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000da8:	d114      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000daa:	f7ff fe05 	bl	80009b8 <HAL_GetTick>
 8000dae:	1b40      	subs	r0, r0, r5
 8000db0:	2864      	cmp	r0, #100	; 0x64
 8000db2:	d9f5      	bls.n	8000da0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000db4:	2003      	movs	r0, #3
 8000db6:	e1b0      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000db8:	4b8f      	ldr	r3, [pc, #572]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000dc0:	d0d8      	beq.n	8000d74 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc2:	4b8d      	ldr	r3, [pc, #564]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dca:	d003      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x8c>
 8000dcc:	6863      	ldr	r3, [r4, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 819e 	beq.w	8001110 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dd4:	6823      	ldr	r3, [r4, #0]
 8000dd6:	f013 0f02 	tst.w	r3, #2
 8000dda:	d054      	beq.n	8000e86 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ddc:	4b86      	ldr	r3, [pc, #536]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f013 0f0c 	tst.w	r3, #12
 8000de4:	d03e      	beq.n	8000e64 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000de6:	4b84      	ldr	r3, [pc, #528]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d033      	beq.n	8000e5a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000df2:	68e3      	ldr	r3, [r4, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d067      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df8:	4b80      	ldr	r3, [pc, #512]	; (8000ffc <HAL_RCC_OscConfig+0x2b4>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dfe:	f7ff fddb 	bl	80009b8 <HAL_GetTick>
 8000e02:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e04:	4b7c      	ldr	r3, [pc, #496]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f013 0f02 	tst.w	r3, #2
 8000e0c:	d153      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e0e:	f7ff fdd3 	bl	80009b8 <HAL_GetTick>
 8000e12:	1b40      	subs	r0, r0, r5
 8000e14:	2802      	cmp	r0, #2
 8000e16:	d9f5      	bls.n	8000e04 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000e18:	2003      	movs	r0, #3
 8000e1a:	e17e      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1c:	4a76      	ldr	r2, [pc, #472]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000e1e:	6813      	ldr	r3, [r2, #0]
 8000e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e7b5      	b.n	8000d94 <HAL_RCC_OscConfig+0x4c>
 8000e28:	4b73      	ldr	r3, [pc, #460]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	e7ab      	b.n	8000d94 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fdbc 	bl	80009b8 <HAL_GetTick>
 8000e40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e42:	4b6d      	ldr	r3, [pc, #436]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e4a:	d0c3      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e4c:	f7ff fdb4 	bl	80009b8 <HAL_GetTick>
 8000e50:	1b40      	subs	r0, r0, r5
 8000e52:	2864      	cmp	r0, #100	; 0x64
 8000e54:	d9f5      	bls.n	8000e42 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000e56:	2003      	movs	r0, #3
 8000e58:	e15f      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e5a:	4b67      	ldr	r3, [pc, #412]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e62:	d1c6      	bne.n	8000df2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e64:	4b64      	ldr	r3, [pc, #400]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f013 0f02 	tst.w	r3, #2
 8000e6c:	d003      	beq.n	8000e76 <HAL_RCC_OscConfig+0x12e>
 8000e6e:	68e3      	ldr	r3, [r4, #12]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	f040 814f 	bne.w	8001114 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e76:	4a60      	ldr	r2, [pc, #384]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000e78:	6813      	ldr	r3, [r2, #0]
 8000e7a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e7e:	6921      	ldr	r1, [r4, #16]
 8000e80:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e84:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	f013 0f08 	tst.w	r3, #8
 8000e8c:	d040      	beq.n	8000f10 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e8e:	6963      	ldr	r3, [r4, #20]
 8000e90:	b363      	cbz	r3, 8000eec <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e92:	4b5b      	ldr	r3, [pc, #364]	; (8001000 <HAL_RCC_OscConfig+0x2b8>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e98:	f7ff fd8e 	bl	80009b8 <HAL_GetTick>
 8000e9c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9e:	4b56      	ldr	r3, [pc, #344]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ea2:	f013 0f02 	tst.w	r3, #2
 8000ea6:	d133      	bne.n	8000f10 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fd86 	bl	80009b8 <HAL_GetTick>
 8000eac:	1b40      	subs	r0, r0, r5
 8000eae:	2802      	cmp	r0, #2
 8000eb0:	d9f5      	bls.n	8000e9e <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	e131      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb6:	4a50      	ldr	r2, [pc, #320]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000eb8:	6813      	ldr	r3, [r2, #0]
 8000eba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ebe:	6921      	ldr	r1, [r4, #16]
 8000ec0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e7de      	b.n	8000e86 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000ec8:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <HAL_RCC_OscConfig+0x2b4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ece:	f7ff fd73 	bl	80009b8 <HAL_GetTick>
 8000ed2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed4:	4b48      	ldr	r3, [pc, #288]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f013 0f02 	tst.w	r3, #2
 8000edc:	d0d3      	beq.n	8000e86 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ede:	f7ff fd6b 	bl	80009b8 <HAL_GetTick>
 8000ee2:	1b40      	subs	r0, r0, r5
 8000ee4:	2802      	cmp	r0, #2
 8000ee6:	d9f5      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8000ee8:	2003      	movs	r0, #3
 8000eea:	e116      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eec:	4b44      	ldr	r3, [pc, #272]	; (8001000 <HAL_RCC_OscConfig+0x2b8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef2:	f7ff fd61 	bl	80009b8 <HAL_GetTick>
 8000ef6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000efc:	f013 0f02 	tst.w	r3, #2
 8000f00:	d006      	beq.n	8000f10 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f02:	f7ff fd59 	bl	80009b8 <HAL_GetTick>
 8000f06:	1b40      	subs	r0, r0, r5
 8000f08:	2802      	cmp	r0, #2
 8000f0a:	d9f5      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	e104      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	f013 0f04 	tst.w	r3, #4
 8000f16:	d078      	beq.n	800100a <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f18:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000f20:	d10d      	bne.n	8000f3e <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	4b34      	ldr	r3, [pc, #208]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f3a:	2501      	movs	r5, #1
 8000f3c:	e000      	b.n	8000f40 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8000f3e:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f40:	4b30      	ldr	r3, [pc, #192]	; (8001004 <HAL_RCC_OscConfig+0x2bc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f48:	d021      	beq.n	8000f8e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4a:	68a3      	ldr	r3, [r4, #8]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d032      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x26e>
 8000f50:	2b05      	cmp	r3, #5
 8000f52:	d036      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x27a>
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f58:	f022 0201 	bic.w	r2, r2, #1
 8000f5c:	671a      	str	r2, [r3, #112]	; 0x70
 8000f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f60:	f022 0204 	bic.w	r2, r2, #4
 8000f64:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f66:	68a3      	ldr	r3, [r4, #8]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d034      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fd24 	bl	80009b8 <HAL_GetTick>
 8000f70:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f76:	f013 0f02 	tst.w	r3, #2
 8000f7a:	d145      	bne.n	8001008 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fd1c 	bl	80009b8 <HAL_GetTick>
 8000f80:	1b80      	subs	r0, r0, r6
 8000f82:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f86:	4298      	cmp	r0, r3
 8000f88:	d9f3      	bls.n	8000f72 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	e0c5      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f8e:	4a1d      	ldr	r2, [pc, #116]	; (8001004 <HAL_RCC_OscConfig+0x2bc>)
 8000f90:	6813      	ldr	r3, [r2, #0]
 8000f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f96:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f98:	f7ff fd0e 	bl	80009b8 <HAL_GetTick>
 8000f9c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_RCC_OscConfig+0x2bc>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000fa6:	d1d0      	bne.n	8000f4a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa8:	f7ff fd06 	bl	80009b8 <HAL_GetTick>
 8000fac:	1b80      	subs	r0, r0, r6
 8000fae:	2802      	cmp	r0, #2
 8000fb0:	d9f5      	bls.n	8000f9e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8000fb2:	2003      	movs	r0, #3
 8000fb4:	e0b1      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000fb8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8000fc0:	e7d1      	b.n	8000f66 <HAL_RCC_OscConfig+0x21e>
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000fc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fc6:	f042 0204 	orr.w	r2, r2, #4
 8000fca:	671a      	str	r2, [r3, #112]	; 0x70
 8000fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	671a      	str	r2, [r3, #112]	; 0x70
 8000fd4:	e7c7      	b.n	8000f66 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd6:	f7ff fcef 	bl	80009b8 <HAL_GetTick>
 8000fda:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe0:	f013 0f02 	tst.w	r3, #2
 8000fe4:	d010      	beq.n	8001008 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fce7 	bl	80009b8 <HAL_GetTick>
 8000fea:	1b80      	subs	r0, r0, r6
 8000fec:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ff0:	4298      	cmp	r0, r3
 8000ff2:	d9f3      	bls.n	8000fdc <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	e090      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	42470000 	.word	0x42470000
 8001000:	42470e80 	.word	0x42470e80
 8001004:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001008:	b9ed      	cbnz	r5, 8001046 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800100a:	69a3      	ldr	r3, [r4, #24]
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8083 	beq.w	8001118 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001012:	4a49      	ldr	r2, [pc, #292]	; (8001138 <HAL_RCC_OscConfig+0x3f0>)
 8001014:	6892      	ldr	r2, [r2, #8]
 8001016:	f002 020c 	and.w	r2, r2, #12
 800101a:	2a08      	cmp	r2, #8
 800101c:	d051      	beq.n	80010c2 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800101e:	2b02      	cmp	r3, #2
 8001020:	d017      	beq.n	8001052 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001022:	4b46      	ldr	r3, [pc, #280]	; (800113c <HAL_RCC_OscConfig+0x3f4>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff fcc6 	bl	80009b8 <HAL_GetTick>
 800102c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800102e:	4b42      	ldr	r3, [pc, #264]	; (8001138 <HAL_RCC_OscConfig+0x3f0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001036:	d042      	beq.n	80010be <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001038:	f7ff fcbe 	bl	80009b8 <HAL_GetTick>
 800103c:	1b00      	subs	r0, r0, r4
 800103e:	2802      	cmp	r0, #2
 8001040:	d9f5      	bls.n	800102e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001042:	2003      	movs	r0, #3
 8001044:	e069      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001046:	4a3c      	ldr	r2, [pc, #240]	; (8001138 <HAL_RCC_OscConfig+0x3f0>)
 8001048:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800104a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800104e:	6413      	str	r3, [r2, #64]	; 0x40
 8001050:	e7db      	b.n	800100a <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8001052:	4b3a      	ldr	r3, [pc, #232]	; (800113c <HAL_RCC_OscConfig+0x3f4>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001058:	f7ff fcae 	bl	80009b8 <HAL_GetTick>
 800105c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800105e:	4b36      	ldr	r3, [pc, #216]	; (8001138 <HAL_RCC_OscConfig+0x3f0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001066:	d006      	beq.n	8001076 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001068:	f7ff fca6 	bl	80009b8 <HAL_GetTick>
 800106c:	1b40      	subs	r0, r0, r5
 800106e:	2802      	cmp	r0, #2
 8001070:	d9f5      	bls.n	800105e <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8001072:	2003      	movs	r0, #3
 8001074:	e051      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001076:	69e3      	ldr	r3, [r4, #28]
 8001078:	6a22      	ldr	r2, [r4, #32]
 800107a:	4313      	orrs	r3, r2
 800107c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800107e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001082:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001084:	0852      	lsrs	r2, r2, #1
 8001086:	3a01      	subs	r2, #1
 8001088:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800108c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800108e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001092:	4a29      	ldr	r2, [pc, #164]	; (8001138 <HAL_RCC_OscConfig+0x3f0>)
 8001094:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001096:	4b29      	ldr	r3, [pc, #164]	; (800113c <HAL_RCC_OscConfig+0x3f4>)
 8001098:	2201      	movs	r2, #1
 800109a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800109c:	f7ff fc8c 	bl	80009b8 <HAL_GetTick>
 80010a0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <HAL_RCC_OscConfig+0x3f0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010aa:	d106      	bne.n	80010ba <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ac:	f7ff fc84 	bl	80009b8 <HAL_GetTick>
 80010b0:	1b00      	subs	r0, r0, r4
 80010b2:	2802      	cmp	r0, #2
 80010b4:	d9f5      	bls.n	80010a2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80010b6:	2003      	movs	r0, #3
 80010b8:	e02f      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80010ba:	2000      	movs	r0, #0
 80010bc:	e02d      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
 80010be:	2000      	movs	r0, #0
 80010c0:	e02b      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d02b      	beq.n	800111e <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_RCC_OscConfig+0x3f0>)
 80010c8:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ca:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80010ce:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010d0:	4291      	cmp	r1, r2
 80010d2:	d126      	bne.n	8001122 <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010d8:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010da:	428a      	cmp	r2, r1
 80010dc:	d123      	bne.n	8001126 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010de:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010e0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80010e4:	401a      	ands	r2, r3
 80010e6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80010ea:	d11e      	bne.n	800112a <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010ec:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80010f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010f2:	0852      	lsrs	r2, r2, #1
 80010f4:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010f6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80010fa:	d118      	bne.n	800112e <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80010fc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001100:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001102:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001106:	d114      	bne.n	8001132 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8001108:	2000      	movs	r0, #0
 800110a:	e006      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 800110c:	2001      	movs	r0, #1
}
 800110e:	4770      	bx	lr
        return HAL_ERROR;
 8001110:	2001      	movs	r0, #1
 8001112:	e002      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
 8001116:	e000      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8001118:	2000      	movs	r0, #0
}
 800111a:	b002      	add	sp, #8
 800111c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800111e:	2001      	movs	r0, #1
 8001120:	e7fb      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8001122:	2001      	movs	r0, #1
 8001124:	e7f9      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
 8001126:	2001      	movs	r0, #1
 8001128:	e7f7      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
 800112a:	2001      	movs	r0, #1
 800112c:	e7f5      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
 800112e:	2001      	movs	r0, #1
 8001130:	e7f3      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
 8001132:	2001      	movs	r0, #1
 8001134:	e7f1      	b.n	800111a <HAL_RCC_OscConfig+0x3d2>
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	42470060 	.word	0x42470060

08001140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001142:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b04      	cmp	r3, #4
 800114c:	d053      	beq.n	80011f6 <HAL_RCC_GetSysClockFreq+0xb6>
 800114e:	2b08      	cmp	r3, #8
 8001150:	d153      	bne.n	80011fa <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001160:	d028      	beq.n	80011b4 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800116a:	0158      	lsls	r0, r3, #5
 800116c:	2100      	movs	r1, #0
 800116e:	1ac0      	subs	r0, r0, r3
 8001170:	f161 0100 	sbc.w	r1, r1, #0
 8001174:	018e      	lsls	r6, r1, #6
 8001176:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 800117a:	0187      	lsls	r7, r0, #6
 800117c:	1a3c      	subs	r4, r7, r0
 800117e:	eb66 0501 	sbc.w	r5, r6, r1
 8001182:	00e9      	lsls	r1, r5, #3
 8001184:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8001188:	00e0      	lsls	r0, r4, #3
 800118a:	18c0      	adds	r0, r0, r3
 800118c:	f141 0100 	adc.w	r1, r1, #0
 8001190:	024b      	lsls	r3, r1, #9
 8001192:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001196:	0244      	lsls	r4, r0, #9
 8001198:	4620      	mov	r0, r4
 800119a:	4619      	mov	r1, r3
 800119c:	2300      	movs	r3, #0
 800119e:	f7ff f867 	bl	8000270 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_RCC_GetSysClockFreq+0xc0>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80011aa:	3301      	adds	r3, #1
 80011ac:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80011ae:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80011b2:	e023      	b.n	80011fc <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_RCC_GetSysClockFreq+0xc0>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80011bc:	015c      	lsls	r4, r3, #5
 80011be:	2500      	movs	r5, #0
 80011c0:	1ae4      	subs	r4, r4, r3
 80011c2:	f165 0500 	sbc.w	r5, r5, #0
 80011c6:	01ae      	lsls	r6, r5, #6
 80011c8:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80011cc:	01a7      	lsls	r7, r4, #6
 80011ce:	1b38      	subs	r0, r7, r4
 80011d0:	eb66 0105 	sbc.w	r1, r6, r5
 80011d4:	00cc      	lsls	r4, r1, #3
 80011d6:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80011da:	00c5      	lsls	r5, r0, #3
 80011dc:	18e8      	adds	r0, r5, r3
 80011de:	f144 0100 	adc.w	r1, r4, #0
 80011e2:	028b      	lsls	r3, r1, #10
 80011e4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80011e8:	0284      	lsls	r4, r0, #10
 80011ea:	4620      	mov	r0, r4
 80011ec:	4619      	mov	r1, r3
 80011ee:	2300      	movs	r3, #0
 80011f0:	f7ff f83e 	bl	8000270 <__aeabi_uldivmod>
 80011f4:	e7d5      	b.n	80011a2 <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <HAL_RCC_GetSysClockFreq+0xc4>)
 80011f8:	e000      	b.n	80011fc <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011fa:	4803      	ldr	r0, [pc, #12]	; (8001208 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	007a1200 	.word	0x007a1200
 8001208:	00f42400 	.word	0x00f42400

0800120c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800120c:	2800      	cmp	r0, #0
 800120e:	f000 809b 	beq.w	8001348 <HAL_RCC_ClockConfig+0x13c>
{
 8001212:	b570      	push	{r4, r5, r6, lr}
 8001214:	460d      	mov	r5, r1
 8001216:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001218:	4b4f      	ldr	r3, [pc, #316]	; (8001358 <HAL_RCC_ClockConfig+0x14c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	428b      	cmp	r3, r1
 8001222:	d208      	bcs.n	8001236 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001224:	b2cb      	uxtb	r3, r1
 8001226:	4a4c      	ldr	r2, [pc, #304]	; (8001358 <HAL_RCC_ClockConfig+0x14c>)
 8001228:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800122a:	6813      	ldr	r3, [r2, #0]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	428b      	cmp	r3, r1
 8001232:	f040 808b 	bne.w	800134c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	f013 0f02 	tst.w	r3, #2
 800123c:	d017      	beq.n	800126e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800123e:	f013 0f04 	tst.w	r3, #4
 8001242:	d004      	beq.n	800124e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001244:	4a45      	ldr	r2, [pc, #276]	; (800135c <HAL_RCC_ClockConfig+0x150>)
 8001246:	6893      	ldr	r3, [r2, #8]
 8001248:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800124c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	f013 0f08 	tst.w	r3, #8
 8001254:	d004      	beq.n	8001260 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001256:	4a41      	ldr	r2, [pc, #260]	; (800135c <HAL_RCC_ClockConfig+0x150>)
 8001258:	6893      	ldr	r3, [r2, #8]
 800125a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800125e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001260:	4a3e      	ldr	r2, [pc, #248]	; (800135c <HAL_RCC_ClockConfig+0x150>)
 8001262:	6893      	ldr	r3, [r2, #8]
 8001264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001268:	68a1      	ldr	r1, [r4, #8]
 800126a:	430b      	orrs	r3, r1
 800126c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	f013 0f01 	tst.w	r3, #1
 8001274:	d032      	beq.n	80012dc <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001276:	6863      	ldr	r3, [r4, #4]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d021      	beq.n	80012c0 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800127c:	1e9a      	subs	r2, r3, #2
 800127e:	2a01      	cmp	r2, #1
 8001280:	d925      	bls.n	80012ce <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001282:	4a36      	ldr	r2, [pc, #216]	; (800135c <HAL_RCC_ClockConfig+0x150>)
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	f012 0f02 	tst.w	r2, #2
 800128a:	d061      	beq.n	8001350 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800128c:	4933      	ldr	r1, [pc, #204]	; (800135c <HAL_RCC_ClockConfig+0x150>)
 800128e:	688a      	ldr	r2, [r1, #8]
 8001290:	f022 0203 	bic.w	r2, r2, #3
 8001294:	4313      	orrs	r3, r2
 8001296:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001298:	f7ff fb8e 	bl	80009b8 <HAL_GetTick>
 800129c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129e:	4b2f      	ldr	r3, [pc, #188]	; (800135c <HAL_RCC_ClockConfig+0x150>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	6862      	ldr	r2, [r4, #4]
 80012a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012ac:	d016      	beq.n	80012dc <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ae:	f7ff fb83 	bl	80009b8 <HAL_GetTick>
 80012b2:	1b80      	subs	r0, r0, r6
 80012b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80012b8:	4298      	cmp	r0, r3
 80012ba:	d9f0      	bls.n	800129e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80012bc:	2003      	movs	r0, #3
 80012be:	e042      	b.n	8001346 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <HAL_RCC_ClockConfig+0x150>)
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80012c8:	d1e0      	bne.n	800128c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80012ca:	2001      	movs	r0, #1
 80012cc:	e03b      	b.n	8001346 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ce:	4a23      	ldr	r2, [pc, #140]	; (800135c <HAL_RCC_ClockConfig+0x150>)
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80012d6:	d1d9      	bne.n	800128c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80012d8:	2001      	movs	r0, #1
 80012da:	e034      	b.n	8001346 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012dc:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <HAL_RCC_ClockConfig+0x14c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	42ab      	cmp	r3, r5
 80012e6:	d907      	bls.n	80012f8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e8:	b2ea      	uxtb	r2, r5
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_RCC_ClockConfig+0x14c>)
 80012ec:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	42ab      	cmp	r3, r5
 80012f6:	d12d      	bne.n	8001354 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	f013 0f04 	tst.w	r3, #4
 80012fe:	d006      	beq.n	800130e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001300:	4a16      	ldr	r2, [pc, #88]	; (800135c <HAL_RCC_ClockConfig+0x150>)
 8001302:	6893      	ldr	r3, [r2, #8]
 8001304:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001308:	68e1      	ldr	r1, [r4, #12]
 800130a:	430b      	orrs	r3, r1
 800130c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	f013 0f08 	tst.w	r3, #8
 8001314:	d007      	beq.n	8001326 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001316:	4a11      	ldr	r2, [pc, #68]	; (800135c <HAL_RCC_ClockConfig+0x150>)
 8001318:	6893      	ldr	r3, [r2, #8]
 800131a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800131e:	6921      	ldr	r1, [r4, #16]
 8001320:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001324:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001326:	f7ff ff0b 	bl	8001140 <HAL_RCC_GetSysClockFreq>
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_RCC_ClockConfig+0x150>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001332:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <HAL_RCC_ClockConfig+0x154>)
 8001334:	5cd3      	ldrb	r3, [r2, r3]
 8001336:	40d8      	lsrs	r0, r3
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_RCC_ClockConfig+0x158>)
 800133a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_RCC_ClockConfig+0x15c>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	f7ff faee 	bl	8000920 <HAL_InitTick>
  return HAL_OK;
 8001344:	2000      	movs	r0, #0
}
 8001346:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001348:	2001      	movs	r0, #1
}
 800134a:	4770      	bx	lr
      return HAL_ERROR;
 800134c:	2001      	movs	r0, #1
 800134e:	e7fa      	b.n	8001346 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001350:	2001      	movs	r0, #1
 8001352:	e7f8      	b.n	8001346 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001354:	2001      	movs	r0, #1
 8001356:	e7f6      	b.n	8001346 <HAL_RCC_ClockConfig+0x13a>
 8001358:	40023c00 	.word	0x40023c00
 800135c:	40023800 	.word	0x40023800
 8001360:	08002a3c 	.word	0x08002a3c
 8001364:	20000000 	.word	0x20000000
 8001368:	20000008 	.word	0x20000008

0800136c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800136c:	4b01      	ldr	r3, [pc, #4]	; (8001374 <HAL_RCC_GetHCLKFreq+0x8>)
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000000 	.word	0x20000000

08001378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001378:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800137a:	f7ff fff7 	bl	800136c <HAL_RCC_GetHCLKFreq>
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001386:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001388:	5cd3      	ldrb	r3, [r2, r3]
}
 800138a:	40d8      	lsrs	r0, r3
 800138c:	bd08      	pop	{r3, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	08002a4c 	.word	0x08002a4c

08001398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001398:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800139a:	f7ff ffe7 	bl	800136c <HAL_RCC_GetHCLKFreq>
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80013a6:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80013a8:	5cd3      	ldrb	r3, [r2, r3]
}
 80013aa:	40d8      	lsrs	r0, r3
 80013ac:	bd08      	pop	{r3, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	08002a4c 	.word	0x08002a4c

080013b8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013b8:	6802      	ldr	r2, [r0, #0]
 80013ba:	68d3      	ldr	r3, [r2, #12]
 80013bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80013c0:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013c2:	6802      	ldr	r2, [r0, #0]
 80013c4:	6953      	ldr	r3, [r2, #20]
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80013cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d005      	beq.n	80013de <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80013d2:	2320      	movs	r3, #32
 80013d4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80013d8:	2300      	movs	r3, #0
 80013da:	6303      	str	r3, [r0, #48]	; 0x30
}
 80013dc:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80013de:	6802      	ldr	r2, [r0, #0]
 80013e0:	68d3      	ldr	r3, [r2, #12]
 80013e2:	f023 0310 	bic.w	r3, r3, #16
 80013e6:	60d3      	str	r3, [r2, #12]
 80013e8:	e7f3      	b.n	80013d2 <UART_EndRxTransfer+0x1a>

080013ea <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80013ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b21      	cmp	r3, #33	; 0x21
 80013f2:	d001      	beq.n	80013f8 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80013f4:	2002      	movs	r0, #2
  }
}
 80013f6:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013f8:	6883      	ldr	r3, [r0, #8]
 80013fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013fe:	d017      	beq.n	8001430 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001400:	6a03      	ldr	r3, [r0, #32]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	6202      	str	r2, [r0, #32]
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	6803      	ldr	r3, [r0, #0]
 800140a:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800140c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800140e:	b29b      	uxth	r3, r3
 8001410:	3b01      	subs	r3, #1
 8001412:	b29b      	uxth	r3, r3
 8001414:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001416:	b94b      	cbnz	r3, 800142c <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001418:	6802      	ldr	r2, [r0, #0]
 800141a:	68d3      	ldr	r3, [r2, #12]
 800141c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001420:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001422:	6802      	ldr	r2, [r0, #0]
 8001424:	68d3      	ldr	r3, [r2, #12]
 8001426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800142a:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800142c:	2000      	movs	r0, #0
 800142e:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001430:	6903      	ldr	r3, [r0, #16]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1e4      	bne.n	8001400 <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001436:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	6802      	ldr	r2, [r0, #0]
 800143c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001440:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8001442:	6a03      	ldr	r3, [r0, #32]
 8001444:	3302      	adds	r3, #2
 8001446:	6203      	str	r3, [r0, #32]
 8001448:	e7e0      	b.n	800140c <UART_Transmit_IT+0x22>
	...

0800144c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001450:	6802      	ldr	r2, [r0, #0]
 8001452:	6913      	ldr	r3, [r2, #16]
 8001454:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001458:	68c1      	ldr	r1, [r0, #12]
 800145a:	430b      	orrs	r3, r1
 800145c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800145e:	6883      	ldr	r3, [r0, #8]
 8001460:	6902      	ldr	r2, [r0, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	6942      	ldr	r2, [r0, #20]
 8001466:	4313      	orrs	r3, r2
 8001468:	69c2      	ldr	r2, [r0, #28]
 800146a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800146c:	6801      	ldr	r1, [r0, #0]
 800146e:	68cb      	ldr	r3, [r1, #12]
 8001470:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001474:	f023 030c 	bic.w	r3, r3, #12
 8001478:	4313      	orrs	r3, r2
 800147a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800147c:	6802      	ldr	r2, [r0, #0]
 800147e:	6953      	ldr	r3, [r2, #20]
 8001480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001484:	6981      	ldr	r1, [r0, #24]
 8001486:	430b      	orrs	r3, r1
 8001488:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800148a:	6803      	ldr	r3, [r0, #0]
 800148c:	4a34      	ldr	r2, [pc, #208]	; (8001560 <UART_SetConfig+0x114>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d006      	beq.n	80014a0 <UART_SetConfig+0x54>
 8001492:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001496:	4293      	cmp	r3, r2
 8001498:	d002      	beq.n	80014a0 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800149a:	f7ff ff6d 	bl	8001378 <HAL_RCC_GetPCLK1Freq>
 800149e:	e001      	b.n	80014a4 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80014a0:	f7ff ff7a 	bl	8001398 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014a4:	69e3      	ldr	r3, [r4, #28]
 80014a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014aa:	d02a      	beq.n	8001502 <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80014ac:	2600      	movs	r6, #0
 80014ae:	1805      	adds	r5, r0, r0
 80014b0:	eb46 0106 	adc.w	r1, r6, r6
 80014b4:	182d      	adds	r5, r5, r0
 80014b6:	eb46 0101 	adc.w	r1, r6, r1
 80014ba:	00cb      	lsls	r3, r1, #3
 80014bc:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80014c0:	00ea      	lsls	r2, r5, #3
 80014c2:	4615      	mov	r5, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	6863      	ldr	r3, [r4, #4]
 80014c8:	009a      	lsls	r2, r3, #2
 80014ca:	0f9b      	lsrs	r3, r3, #30
 80014cc:	1828      	adds	r0, r5, r0
 80014ce:	eb46 0101 	adc.w	r1, r6, r1
 80014d2:	f7fe fecd 	bl	8000270 <__aeabi_uldivmod>
 80014d6:	4d23      	ldr	r5, [pc, #140]	; (8001564 <UART_SetConfig+0x118>)
 80014d8:	fba5 3200 	umull	r3, r2, r5, r0
 80014dc:	0951      	lsrs	r1, r2, #5
 80014de:	2364      	movs	r3, #100	; 0x64
 80014e0:	fb03 0311 	mls	r3, r3, r1, r0
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	3332      	adds	r3, #50	; 0x32
 80014e8:	fba5 2303 	umull	r2, r3, r5, r3
 80014ec:	095b      	lsrs	r3, r3, #5
 80014ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014f2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	6821      	ldr	r1, [r4, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	608b      	str	r3, [r1, #8]
  }
}
 8001500:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001502:	2600      	movs	r6, #0
 8001504:	1805      	adds	r5, r0, r0
 8001506:	eb46 0106 	adc.w	r1, r6, r6
 800150a:	182d      	adds	r5, r5, r0
 800150c:	eb46 0101 	adc.w	r1, r6, r1
 8001510:	00cb      	lsls	r3, r1, #3
 8001512:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001516:	00ea      	lsls	r2, r5, #3
 8001518:	4615      	mov	r5, r2
 800151a:	4619      	mov	r1, r3
 800151c:	6862      	ldr	r2, [r4, #4]
 800151e:	4633      	mov	r3, r6
 8001520:	1892      	adds	r2, r2, r2
 8001522:	eb46 0303 	adc.w	r3, r6, r3
 8001526:	1828      	adds	r0, r5, r0
 8001528:	eb46 0101 	adc.w	r1, r6, r1
 800152c:	f7fe fea0 	bl	8000270 <__aeabi_uldivmod>
 8001530:	4d0c      	ldr	r5, [pc, #48]	; (8001564 <UART_SetConfig+0x118>)
 8001532:	fba5 3200 	umull	r3, r2, r5, r0
 8001536:	0951      	lsrs	r1, r2, #5
 8001538:	2364      	movs	r3, #100	; 0x64
 800153a:	fb03 0311 	mls	r3, r3, r1, r0
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	3332      	adds	r3, #50	; 0x32
 8001542:	fba5 2303 	umull	r2, r3, r5, r3
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	005a      	lsls	r2, r3, #1
 800154a:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800154e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	6821      	ldr	r1, [r4, #0]
 8001558:	4413      	add	r3, r2
 800155a:	608b      	str	r3, [r1, #8]
 800155c:	e7d0      	b.n	8001500 <UART_SetConfig+0xb4>
 800155e:	bf00      	nop
 8001560:	40011000 	.word	0x40011000
 8001564:	51eb851f 	.word	0x51eb851f

08001568 <UART_WaitOnFlagUntilTimeout>:
{
 8001568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800156c:	4605      	mov	r5, r0
 800156e:	460f      	mov	r7, r1
 8001570:	4616      	mov	r6, r2
 8001572:	4699      	mov	r9, r3
 8001574:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001578:	682c      	ldr	r4, [r5, #0]
 800157a:	6824      	ldr	r4, [r4, #0]
 800157c:	ea37 0304 	bics.w	r3, r7, r4
 8001580:	bf0c      	ite	eq
 8001582:	2401      	moveq	r4, #1
 8001584:	2400      	movne	r4, #0
 8001586:	42b4      	cmp	r4, r6
 8001588:	d11f      	bne.n	80015ca <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 800158a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800158e:	d0f3      	beq.n	8001578 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001590:	f1b8 0f00 	cmp.w	r8, #0
 8001594:	d005      	beq.n	80015a2 <UART_WaitOnFlagUntilTimeout+0x3a>
 8001596:	f7ff fa0f 	bl	80009b8 <HAL_GetTick>
 800159a:	eba0 0009 	sub.w	r0, r0, r9
 800159e:	4540      	cmp	r0, r8
 80015a0:	d9ea      	bls.n	8001578 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015a2:	682a      	ldr	r2, [r5, #0]
 80015a4:	68d3      	ldr	r3, [r2, #12]
 80015a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80015aa:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015ac:	682a      	ldr	r2, [r5, #0]
 80015ae:	6953      	ldr	r3, [r2, #20]
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80015b6:	2320      	movs	r3, #32
 80015b8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80015bc:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80015c0:	2300      	movs	r3, #0
 80015c2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 80015c6:	2003      	movs	r0, #3
 80015c8:	e000      	b.n	80015cc <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 80015ca:	2000      	movs	r0, #0
}
 80015cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080015d0 <HAL_UART_Init>:
  if (huart == NULL)
 80015d0:	b358      	cbz	r0, 800162a <HAL_UART_Init+0x5a>
{
 80015d2:	b510      	push	{r4, lr}
 80015d4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80015d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80015da:	b30b      	cbz	r3, 8001620 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80015dc:	2324      	movs	r3, #36	; 0x24
 80015de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80015e2:	6822      	ldr	r2, [r4, #0]
 80015e4:	68d3      	ldr	r3, [r2, #12]
 80015e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015ea:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80015ec:	4620      	mov	r0, r4
 80015ee:	f7ff ff2d 	bl	800144c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015f2:	6822      	ldr	r2, [r4, #0]
 80015f4:	6913      	ldr	r3, [r2, #16]
 80015f6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80015fa:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015fc:	6822      	ldr	r2, [r4, #0]
 80015fe:	6953      	ldr	r3, [r2, #20]
 8001600:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001604:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001606:	6822      	ldr	r2, [r4, #0]
 8001608:	68d3      	ldr	r3, [r2, #12]
 800160a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800160e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001610:	2000      	movs	r0, #0
 8001612:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001614:	2320      	movs	r3, #32
 8001616:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800161a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800161e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001620:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001624:	f7ff f8b2 	bl	800078c <HAL_UART_MspInit>
 8001628:	e7d8      	b.n	80015dc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800162a:	2001      	movs	r0, #1
}
 800162c:	4770      	bx	lr

0800162e <HAL_UART_Transmit>:
{
 800162e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001636:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b20      	cmp	r3, #32
 800163e:	d154      	bne.n	80016ea <HAL_UART_Transmit+0xbc>
 8001640:	4604      	mov	r4, r0
 8001642:	460d      	mov	r5, r1
 8001644:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001646:	2900      	cmp	r1, #0
 8001648:	d053      	beq.n	80016f2 <HAL_UART_Transmit+0xc4>
 800164a:	2a00      	cmp	r2, #0
 800164c:	d053      	beq.n	80016f6 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 800164e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001652:	2b01      	cmp	r3, #1
 8001654:	d051      	beq.n	80016fa <HAL_UART_Transmit+0xcc>
 8001656:	2301      	movs	r3, #1
 8001658:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800165c:	2300      	movs	r3, #0
 800165e:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001660:	2321      	movs	r3, #33	; 0x21
 8001662:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8001666:	f7ff f9a7 	bl	80009b8 <HAL_GetTick>
 800166a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800166c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001670:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001674:	68a3      	ldr	r3, [r4, #8]
 8001676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800167a:	d005      	beq.n	8001688 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 800167c:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8001680:	2300      	movs	r3, #0
 8001682:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8001686:	e012      	b.n	80016ae <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001688:	6923      	ldr	r3, [r4, #16]
 800168a:	b113      	cbz	r3, 8001692 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 800168c:	f04f 0800 	mov.w	r8, #0
 8001690:	e7f6      	b.n	8001680 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8001692:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001694:	2500      	movs	r5, #0
 8001696:	e7f3      	b.n	8001680 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001698:	f838 3b02 	ldrh.w	r3, [r8], #2
 800169c:	6822      	ldr	r2, [r4, #0]
 800169e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a2:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80016a4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80016a6:	b292      	uxth	r2, r2
 80016a8:	3a01      	subs	r2, #1
 80016aa:	b292      	uxth	r2, r2
 80016ac:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80016ae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b173      	cbz	r3, 80016d2 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016b4:	9600      	str	r6, [sp, #0]
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	4620      	mov	r0, r4
 80016be:	f7ff ff53 	bl	8001568 <UART_WaitOnFlagUntilTimeout>
 80016c2:	b9e0      	cbnz	r0, 80016fe <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80016c4:	2d00      	cmp	r5, #0
 80016c6:	d0e7      	beq.n	8001698 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80016c8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016d0:	e7e8      	b.n	80016a4 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016d2:	9600      	str	r6, [sp, #0]
 80016d4:	463b      	mov	r3, r7
 80016d6:	2200      	movs	r2, #0
 80016d8:	2140      	movs	r1, #64	; 0x40
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff ff44 	bl	8001568 <UART_WaitOnFlagUntilTimeout>
 80016e0:	b978      	cbnz	r0, 8001702 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 80016e2:	2320      	movs	r3, #32
 80016e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80016e8:	e000      	b.n	80016ec <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80016ea:	2002      	movs	r0, #2
}
 80016ec:	b002      	add	sp, #8
 80016ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80016f2:	2001      	movs	r0, #1
 80016f4:	e7fa      	b.n	80016ec <HAL_UART_Transmit+0xbe>
 80016f6:	2001      	movs	r0, #1
 80016f8:	e7f8      	b.n	80016ec <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80016fa:	2002      	movs	r0, #2
 80016fc:	e7f6      	b.n	80016ec <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80016fe:	2003      	movs	r0, #3
 8001700:	e7f4      	b.n	80016ec <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8001702:	2003      	movs	r0, #3
 8001704:	e7f2      	b.n	80016ec <HAL_UART_Transmit+0xbe>

08001706 <HAL_UART_TxCpltCallback>:
}
 8001706:	4770      	bx	lr

08001708 <UART_EndTransmit_IT>:
{
 8001708:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800170a:	6801      	ldr	r1, [r0, #0]
 800170c:	68ca      	ldr	r2, [r1, #12]
 800170e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001712:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001714:	2220      	movs	r2, #32
 8001716:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800171a:	f7ff fff4 	bl	8001706 <HAL_UART_TxCpltCallback>
}
 800171e:	2000      	movs	r0, #0
 8001720:	bd08      	pop	{r3, pc}

08001722 <HAL_UART_RxCpltCallback>:
}
 8001722:	4770      	bx	lr

08001724 <HAL_UART_ErrorCallback>:
}
 8001724:	4770      	bx	lr

08001726 <UART_DMAAbortOnError>:
{
 8001726:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001728:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800172e:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001730:	f7ff fff8 	bl	8001724 <HAL_UART_ErrorCallback>
}
 8001734:	bd08      	pop	{r3, pc}

08001736 <HAL_UARTEx_RxEventCallback>:
}
 8001736:	4770      	bx	lr

08001738 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001738:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b22      	cmp	r3, #34	; 0x22
 8001740:	d153      	bne.n	80017ea <UART_Receive_IT+0xb2>
{
 8001742:	b510      	push	{r4, lr}
 8001744:	4604      	mov	r4, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001746:	6883      	ldr	r3, [r0, #8]
 8001748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800174c:	d030      	beq.n	80017b0 <UART_Receive_IT+0x78>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800174e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001754:	d004      	beq.n	8001760 <UART_Receive_IT+0x28>
 8001756:	2b00      	cmp	r3, #0
 8001758:	d137      	bne.n	80017ca <UART_Receive_IT+0x92>
 800175a:	6923      	ldr	r3, [r4, #16]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d134      	bne.n	80017ca <UART_Receive_IT+0x92>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8001766:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001768:	3301      	adds	r3, #1
 800176a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800176c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800176e:	b29b      	uxth	r3, r3
 8001770:	3b01      	subs	r3, #1
 8001772:	b29b      	uxth	r3, r3
 8001774:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001776:	2b00      	cmp	r3, #0
 8001778:	d139      	bne.n	80017ee <UART_Receive_IT+0xb6>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800177a:	6822      	ldr	r2, [r4, #0]
 800177c:	68d3      	ldr	r3, [r2, #12]
 800177e:	f023 0320 	bic.w	r3, r3, #32
 8001782:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001784:	6822      	ldr	r2, [r4, #0]
 8001786:	68d3      	ldr	r3, [r2, #12]
 8001788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800178c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800178e:	6822      	ldr	r2, [r4, #0]
 8001790:	6953      	ldr	r3, [r2, #20]
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001798:	2320      	movs	r3, #32
 800179a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800179e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d018      	beq.n	80017d6 <UART_Receive_IT+0x9e>
       HAL_UART_RxCpltCallback(huart);
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7ff ffbc 	bl	8001722 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017aa:	2000      	movs	r0, #0
 80017ac:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_OK;
 80017ae:	e01f      	b.n	80017f0 <UART_Receive_IT+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017b0:	6902      	ldr	r2, [r0, #16]
 80017b2:	2a00      	cmp	r2, #0
 80017b4:	d1cb      	bne.n	800174e <UART_Receive_IT+0x16>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80017b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80017b8:	6803      	ldr	r3, [r0, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80017c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80017c4:	3302      	adds	r3, #2
 80017c6:	6283      	str	r3, [r0, #40]	; 0x28
 80017c8:	e7d0      	b.n	800176c <UART_Receive_IT+0x34>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017d2:	7013      	strb	r3, [r2, #0]
 80017d4:	e7c7      	b.n	8001766 <UART_Receive_IT+0x2e>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017d6:	6822      	ldr	r2, [r4, #0]
 80017d8:	68d3      	ldr	r3, [r2, #12]
 80017da:	f023 0310 	bic.w	r3, r3, #16
 80017de:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80017e0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80017e2:	4620      	mov	r0, r4
 80017e4:	f7ff ffa7 	bl	8001736 <HAL_UARTEx_RxEventCallback>
 80017e8:	e7df      	b.n	80017aa <UART_Receive_IT+0x72>
    return HAL_BUSY;
 80017ea:	2002      	movs	r0, #2
}
 80017ec:	4770      	bx	lr
    return HAL_OK;
 80017ee:	2000      	movs	r0, #0
}
 80017f0:	bd10      	pop	{r4, pc}
	...

080017f4 <HAL_UART_IRQHandler>:
{
 80017f4:	b530      	push	{r4, r5, lr}
 80017f6:	b083      	sub	sp, #12
 80017f8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017fa:	6802      	ldr	r2, [r0, #0]
 80017fc:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80017fe:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001800:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8001802:	f013 050f 	ands.w	r5, r3, #15
 8001806:	d105      	bne.n	8001814 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001808:	f013 0f20 	tst.w	r3, #32
 800180c:	d002      	beq.n	8001814 <HAL_UART_IRQHandler+0x20>
 800180e:	f010 0f20 	tst.w	r0, #32
 8001812:	d119      	bne.n	8001848 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001814:	b12d      	cbz	r5, 8001822 <HAL_UART_IRQHandler+0x2e>
 8001816:	f011 0101 	ands.w	r1, r1, #1
 800181a:	d119      	bne.n	8001850 <HAL_UART_IRQHandler+0x5c>
 800181c:	f410 7f90 	tst.w	r0, #288	; 0x120
 8001820:	d116      	bne.n	8001850 <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001822:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001824:	2901      	cmp	r1, #1
 8001826:	d075      	beq.n	8001914 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001828:	f013 0f80 	tst.w	r3, #128	; 0x80
 800182c:	d003      	beq.n	8001836 <HAL_UART_IRQHandler+0x42>
 800182e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001832:	f040 80d8 	bne.w	80019e6 <HAL_UART_IRQHandler+0x1f2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001836:	f013 0f40 	tst.w	r3, #64	; 0x40
 800183a:	d003      	beq.n	8001844 <HAL_UART_IRQHandler+0x50>
 800183c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001840:	f040 80d5 	bne.w	80019ee <HAL_UART_IRQHandler+0x1fa>
}
 8001844:	b003      	add	sp, #12
 8001846:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff ff75 	bl	8001738 <UART_Receive_IT>
      return;
 800184e:	e7f9      	b.n	8001844 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001850:	f013 0f01 	tst.w	r3, #1
 8001854:	d006      	beq.n	8001864 <HAL_UART_IRQHandler+0x70>
 8001856:	f410 7f80 	tst.w	r0, #256	; 0x100
 800185a:	d003      	beq.n	8001864 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800185c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001864:	f013 0f04 	tst.w	r3, #4
 8001868:	d004      	beq.n	8001874 <HAL_UART_IRQHandler+0x80>
 800186a:	b119      	cbz	r1, 8001874 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800186c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800186e:	f042 0202 	orr.w	r2, r2, #2
 8001872:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001874:	f013 0f02 	tst.w	r3, #2
 8001878:	d004      	beq.n	8001884 <HAL_UART_IRQHandler+0x90>
 800187a:	b119      	cbz	r1, 8001884 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800187c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800187e:	f042 0204 	orr.w	r2, r2, #4
 8001882:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001884:	f013 0f08 	tst.w	r3, #8
 8001888:	d007      	beq.n	800189a <HAL_UART_IRQHandler+0xa6>
 800188a:	f010 0f20 	tst.w	r0, #32
 800188e:	d100      	bne.n	8001892 <HAL_UART_IRQHandler+0x9e>
 8001890:	b119      	cbz	r1, 800189a <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001892:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001894:	f042 0208 	orr.w	r2, r2, #8
 8001898:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800189a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800189c:	2a00      	cmp	r2, #0
 800189e:	d0d1      	beq.n	8001844 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80018a0:	f013 0f20 	tst.w	r3, #32
 80018a4:	d002      	beq.n	80018ac <HAL_UART_IRQHandler+0xb8>
 80018a6:	f010 0f20 	tst.w	r0, #32
 80018aa:	d121      	bne.n	80018f0 <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80018b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018b6:	f012 0f08 	tst.w	r2, #8
 80018ba:	d100      	bne.n	80018be <HAL_UART_IRQHandler+0xca>
 80018bc:	b323      	cbz	r3, 8001908 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 80018be:	4620      	mov	r0, r4
 80018c0:	f7ff fd7a 	bl	80013b8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	695a      	ldr	r2, [r3, #20]
 80018c8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80018cc:	d018      	beq.n	8001900 <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80018ce:	695a      	ldr	r2, [r3, #20]
 80018d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018d4:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80018d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018d8:	b173      	cbz	r3, 80018f8 <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80018da:	4a47      	ldr	r2, [pc, #284]	; (80019f8 <HAL_UART_IRQHandler+0x204>)
 80018dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80018de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80018e0:	f7ff f924 	bl	8000b2c <HAL_DMA_Abort_IT>
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d0ad      	beq.n	8001844 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80018e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80018ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80018ec:	4798      	blx	r3
 80018ee:	e7a9      	b.n	8001844 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff ff21 	bl	8001738 <UART_Receive_IT>
 80018f6:	e7d9      	b.n	80018ac <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff ff13 	bl	8001724 <HAL_UART_ErrorCallback>
 80018fe:	e7a1      	b.n	8001844 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8001900:	4620      	mov	r0, r4
 8001902:	f7ff ff0f 	bl	8001724 <HAL_UART_ErrorCallback>
 8001906:	e79d      	b.n	8001844 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff ff0b 	bl	8001724 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800190e:	2300      	movs	r3, #0
 8001910:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8001912:	e797      	b.n	8001844 <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001914:	f013 0f10 	tst.w	r3, #16
 8001918:	d086      	beq.n	8001828 <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800191a:	f010 0f10 	tst.w	r0, #16
 800191e:	d083      	beq.n	8001828 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001920:	2300      	movs	r3, #0
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	6813      	ldr	r3, [r2, #0]
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	6853      	ldr	r3, [r2, #4]
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800192e:	6953      	ldr	r3, [r2, #20]
 8001930:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001934:	d033      	beq.n	800199e <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001936:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001938:	680b      	ldr	r3, [r1, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 800193e:	2b00      	cmp	r3, #0
 8001940:	d080      	beq.n	8001844 <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001942:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8001944:	4298      	cmp	r0, r3
 8001946:	f67f af7d 	bls.w	8001844 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 800194a:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800194c:	69cb      	ldr	r3, [r1, #28]
 800194e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001952:	d108      	bne.n	8001966 <HAL_UART_IRQHandler+0x172>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001954:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8001956:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001958:	b29b      	uxth	r3, r3
 800195a:	1ac9      	subs	r1, r1, r3
 800195c:	b289      	uxth	r1, r1
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff fee9 	bl	8001736 <HAL_UARTEx_RxEventCallback>
      return;
 8001964:	e76e      	b.n	8001844 <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001966:	68d3      	ldr	r3, [r2, #12]
 8001968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800196c:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800196e:	6822      	ldr	r2, [r4, #0]
 8001970:	6953      	ldr	r3, [r2, #20]
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001978:	6822      	ldr	r2, [r4, #0]
 800197a:	6953      	ldr	r3, [r2, #20]
 800197c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001980:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8001982:	2320      	movs	r3, #32
 8001984:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001988:	2300      	movs	r3, #0
 800198a:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800198c:	6822      	ldr	r2, [r4, #0]
 800198e:	68d3      	ldr	r3, [r2, #12]
 8001990:	f023 0310 	bic.w	r3, r3, #16
 8001994:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001996:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001998:	f7ff f87e 	bl	8000a98 <HAL_DMA_Abort>
 800199c:	e7da      	b.n	8001954 <HAL_UART_IRQHandler+0x160>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800199e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80019a0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	1ac9      	subs	r1, r1, r3
 80019a6:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 80019a8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f43f af49 	beq.w	8001844 <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 80019b2:	2900      	cmp	r1, #0
 80019b4:	f43f af46 	beq.w	8001844 <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019b8:	68d3      	ldr	r3, [r2, #12]
 80019ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80019be:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019c0:	6822      	ldr	r2, [r4, #0]
 80019c2:	6953      	ldr	r3, [r2, #20]
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 80019ca:	2320      	movs	r3, #32
 80019cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019d0:	2300      	movs	r3, #0
 80019d2:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80019d4:	6822      	ldr	r2, [r4, #0]
 80019d6:	68d3      	ldr	r3, [r2, #12]
 80019d8:	f023 0310 	bic.w	r3, r3, #16
 80019dc:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80019de:	4620      	mov	r0, r4
 80019e0:	f7ff fea9 	bl	8001736 <HAL_UARTEx_RxEventCallback>
      return;
 80019e4:	e72e      	b.n	8001844 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 80019e6:	4620      	mov	r0, r4
 80019e8:	f7ff fcff 	bl	80013ea <UART_Transmit_IT>
    return;
 80019ec:	e72a      	b.n	8001844 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 80019ee:	4620      	mov	r0, r4
 80019f0:	f7ff fe8a 	bl	8001708 <UART_EndTransmit_IT>
    return;
 80019f4:	e726      	b.n	8001844 <HAL_UART_IRQHandler+0x50>
 80019f6:	bf00      	nop
 80019f8:	08001727 	.word	0x08001727

080019fc <__errno>:
 80019fc:	4b01      	ldr	r3, [pc, #4]	; (8001a04 <__errno+0x8>)
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	2000000c 	.word	0x2000000c

08001a08 <__libc_init_array>:
 8001a08:	b570      	push	{r4, r5, r6, lr}
 8001a0a:	4d0d      	ldr	r5, [pc, #52]	; (8001a40 <__libc_init_array+0x38>)
 8001a0c:	4c0d      	ldr	r4, [pc, #52]	; (8001a44 <__libc_init_array+0x3c>)
 8001a0e:	1b64      	subs	r4, r4, r5
 8001a10:	10a4      	asrs	r4, r4, #2
 8001a12:	2600      	movs	r6, #0
 8001a14:	42a6      	cmp	r6, r4
 8001a16:	d109      	bne.n	8001a2c <__libc_init_array+0x24>
 8001a18:	4d0b      	ldr	r5, [pc, #44]	; (8001a48 <__libc_init_array+0x40>)
 8001a1a:	4c0c      	ldr	r4, [pc, #48]	; (8001a4c <__libc_init_array+0x44>)
 8001a1c:	f000 ffec 	bl	80029f8 <_init>
 8001a20:	1b64      	subs	r4, r4, r5
 8001a22:	10a4      	asrs	r4, r4, #2
 8001a24:	2600      	movs	r6, #0
 8001a26:	42a6      	cmp	r6, r4
 8001a28:	d105      	bne.n	8001a36 <__libc_init_array+0x2e>
 8001a2a:	bd70      	pop	{r4, r5, r6, pc}
 8001a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a30:	4798      	blx	r3
 8001a32:	3601      	adds	r6, #1
 8001a34:	e7ee      	b.n	8001a14 <__libc_init_array+0xc>
 8001a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a3a:	4798      	blx	r3
 8001a3c:	3601      	adds	r6, #1
 8001a3e:	e7f2      	b.n	8001a26 <__libc_init_array+0x1e>
 8001a40:	08002af4 	.word	0x08002af4
 8001a44:	08002af4 	.word	0x08002af4
 8001a48:	08002af4 	.word	0x08002af4
 8001a4c:	08002af8 	.word	0x08002af8

08001a50 <memset>:
 8001a50:	4402      	add	r2, r0
 8001a52:	4603      	mov	r3, r0
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d100      	bne.n	8001a5a <memset+0xa>
 8001a58:	4770      	bx	lr
 8001a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8001a5e:	e7f9      	b.n	8001a54 <memset+0x4>

08001a60 <iprintf>:
 8001a60:	b40f      	push	{r0, r1, r2, r3}
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <iprintf+0x2c>)
 8001a64:	b513      	push	{r0, r1, r4, lr}
 8001a66:	681c      	ldr	r4, [r3, #0]
 8001a68:	b124      	cbz	r4, 8001a74 <iprintf+0x14>
 8001a6a:	69a3      	ldr	r3, [r4, #24]
 8001a6c:	b913      	cbnz	r3, 8001a74 <iprintf+0x14>
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f000 fa5e 	bl	8001f30 <__sinit>
 8001a74:	ab05      	add	r3, sp, #20
 8001a76:	9a04      	ldr	r2, [sp, #16]
 8001a78:	68a1      	ldr	r1, [r4, #8]
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f000 fc2f 	bl	80022e0 <_vfiprintf_r>
 8001a82:	b002      	add	sp, #8
 8001a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a88:	b004      	add	sp, #16
 8001a8a:	4770      	bx	lr
 8001a8c:	2000000c 	.word	0x2000000c

08001a90 <_puts_r>:
 8001a90:	b570      	push	{r4, r5, r6, lr}
 8001a92:	460e      	mov	r6, r1
 8001a94:	4605      	mov	r5, r0
 8001a96:	b118      	cbz	r0, 8001aa0 <_puts_r+0x10>
 8001a98:	6983      	ldr	r3, [r0, #24]
 8001a9a:	b90b      	cbnz	r3, 8001aa0 <_puts_r+0x10>
 8001a9c:	f000 fa48 	bl	8001f30 <__sinit>
 8001aa0:	69ab      	ldr	r3, [r5, #24]
 8001aa2:	68ac      	ldr	r4, [r5, #8]
 8001aa4:	b913      	cbnz	r3, 8001aac <_puts_r+0x1c>
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	f000 fa42 	bl	8001f30 <__sinit>
 8001aac:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <_puts_r+0xd0>)
 8001aae:	429c      	cmp	r4, r3
 8001ab0:	d120      	bne.n	8001af4 <_puts_r+0x64>
 8001ab2:	686c      	ldr	r4, [r5, #4]
 8001ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ab6:	07db      	lsls	r3, r3, #31
 8001ab8:	d405      	bmi.n	8001ac6 <_puts_r+0x36>
 8001aba:	89a3      	ldrh	r3, [r4, #12]
 8001abc:	0598      	lsls	r0, r3, #22
 8001abe:	d402      	bmi.n	8001ac6 <_puts_r+0x36>
 8001ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ac2:	f000 fad3 	bl	800206c <__retarget_lock_acquire_recursive>
 8001ac6:	89a3      	ldrh	r3, [r4, #12]
 8001ac8:	0719      	lsls	r1, r3, #28
 8001aca:	d51d      	bpl.n	8001b08 <_puts_r+0x78>
 8001acc:	6923      	ldr	r3, [r4, #16]
 8001ace:	b1db      	cbz	r3, 8001b08 <_puts_r+0x78>
 8001ad0:	3e01      	subs	r6, #1
 8001ad2:	68a3      	ldr	r3, [r4, #8]
 8001ad4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	60a3      	str	r3, [r4, #8]
 8001adc:	bb39      	cbnz	r1, 8001b2e <_puts_r+0x9e>
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	da38      	bge.n	8001b54 <_puts_r+0xc4>
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	210a      	movs	r1, #10
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f000 f848 	bl	8001b7c <__swbuf_r>
 8001aec:	3001      	adds	r0, #1
 8001aee:	d011      	beq.n	8001b14 <_puts_r+0x84>
 8001af0:	250a      	movs	r5, #10
 8001af2:	e011      	b.n	8001b18 <_puts_r+0x88>
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <_puts_r+0xd4>)
 8001af6:	429c      	cmp	r4, r3
 8001af8:	d101      	bne.n	8001afe <_puts_r+0x6e>
 8001afa:	68ac      	ldr	r4, [r5, #8]
 8001afc:	e7da      	b.n	8001ab4 <_puts_r+0x24>
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <_puts_r+0xd8>)
 8001b00:	429c      	cmp	r4, r3
 8001b02:	bf08      	it	eq
 8001b04:	68ec      	ldreq	r4, [r5, #12]
 8001b06:	e7d5      	b.n	8001ab4 <_puts_r+0x24>
 8001b08:	4621      	mov	r1, r4
 8001b0a:	4628      	mov	r0, r5
 8001b0c:	f000 f888 	bl	8001c20 <__swsetup_r>
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d0dd      	beq.n	8001ad0 <_puts_r+0x40>
 8001b14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001b18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b1a:	07da      	lsls	r2, r3, #31
 8001b1c:	d405      	bmi.n	8001b2a <_puts_r+0x9a>
 8001b1e:	89a3      	ldrh	r3, [r4, #12]
 8001b20:	059b      	lsls	r3, r3, #22
 8001b22:	d402      	bmi.n	8001b2a <_puts_r+0x9a>
 8001b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b26:	f000 faa2 	bl	800206e <__retarget_lock_release_recursive>
 8001b2a:	4628      	mov	r0, r5
 8001b2c:	bd70      	pop	{r4, r5, r6, pc}
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	da04      	bge.n	8001b3c <_puts_r+0xac>
 8001b32:	69a2      	ldr	r2, [r4, #24]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dc06      	bgt.n	8001b46 <_puts_r+0xb6>
 8001b38:	290a      	cmp	r1, #10
 8001b3a:	d004      	beq.n	8001b46 <_puts_r+0xb6>
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	6022      	str	r2, [r4, #0]
 8001b42:	7019      	strb	r1, [r3, #0]
 8001b44:	e7c5      	b.n	8001ad2 <_puts_r+0x42>
 8001b46:	4622      	mov	r2, r4
 8001b48:	4628      	mov	r0, r5
 8001b4a:	f000 f817 	bl	8001b7c <__swbuf_r>
 8001b4e:	3001      	adds	r0, #1
 8001b50:	d1bf      	bne.n	8001ad2 <_puts_r+0x42>
 8001b52:	e7df      	b.n	8001b14 <_puts_r+0x84>
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	250a      	movs	r5, #10
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	6022      	str	r2, [r4, #0]
 8001b5c:	701d      	strb	r5, [r3, #0]
 8001b5e:	e7db      	b.n	8001b18 <_puts_r+0x88>
 8001b60:	08002a78 	.word	0x08002a78
 8001b64:	08002a98 	.word	0x08002a98
 8001b68:	08002a58 	.word	0x08002a58

08001b6c <puts>:
 8001b6c:	4b02      	ldr	r3, [pc, #8]	; (8001b78 <puts+0xc>)
 8001b6e:	4601      	mov	r1, r0
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	f7ff bf8d 	b.w	8001a90 <_puts_r>
 8001b76:	bf00      	nop
 8001b78:	2000000c 	.word	0x2000000c

08001b7c <__swbuf_r>:
 8001b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7e:	460e      	mov	r6, r1
 8001b80:	4614      	mov	r4, r2
 8001b82:	4605      	mov	r5, r0
 8001b84:	b118      	cbz	r0, 8001b8e <__swbuf_r+0x12>
 8001b86:	6983      	ldr	r3, [r0, #24]
 8001b88:	b90b      	cbnz	r3, 8001b8e <__swbuf_r+0x12>
 8001b8a:	f000 f9d1 	bl	8001f30 <__sinit>
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <__swbuf_r+0x98>)
 8001b90:	429c      	cmp	r4, r3
 8001b92:	d12b      	bne.n	8001bec <__swbuf_r+0x70>
 8001b94:	686c      	ldr	r4, [r5, #4]
 8001b96:	69a3      	ldr	r3, [r4, #24]
 8001b98:	60a3      	str	r3, [r4, #8]
 8001b9a:	89a3      	ldrh	r3, [r4, #12]
 8001b9c:	071a      	lsls	r2, r3, #28
 8001b9e:	d52f      	bpl.n	8001c00 <__swbuf_r+0x84>
 8001ba0:	6923      	ldr	r3, [r4, #16]
 8001ba2:	b36b      	cbz	r3, 8001c00 <__swbuf_r+0x84>
 8001ba4:	6923      	ldr	r3, [r4, #16]
 8001ba6:	6820      	ldr	r0, [r4, #0]
 8001ba8:	1ac0      	subs	r0, r0, r3
 8001baa:	6963      	ldr	r3, [r4, #20]
 8001bac:	b2f6      	uxtb	r6, r6
 8001bae:	4283      	cmp	r3, r0
 8001bb0:	4637      	mov	r7, r6
 8001bb2:	dc04      	bgt.n	8001bbe <__swbuf_r+0x42>
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	f000 f926 	bl	8001e08 <_fflush_r>
 8001bbc:	bb30      	cbnz	r0, 8001c0c <__swbuf_r+0x90>
 8001bbe:	68a3      	ldr	r3, [r4, #8]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	60a3      	str	r3, [r4, #8]
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	6022      	str	r2, [r4, #0]
 8001bca:	701e      	strb	r6, [r3, #0]
 8001bcc:	6963      	ldr	r3, [r4, #20]
 8001bce:	3001      	adds	r0, #1
 8001bd0:	4283      	cmp	r3, r0
 8001bd2:	d004      	beq.n	8001bde <__swbuf_r+0x62>
 8001bd4:	89a3      	ldrh	r3, [r4, #12]
 8001bd6:	07db      	lsls	r3, r3, #31
 8001bd8:	d506      	bpl.n	8001be8 <__swbuf_r+0x6c>
 8001bda:	2e0a      	cmp	r6, #10
 8001bdc:	d104      	bne.n	8001be8 <__swbuf_r+0x6c>
 8001bde:	4621      	mov	r1, r4
 8001be0:	4628      	mov	r0, r5
 8001be2:	f000 f911 	bl	8001e08 <_fflush_r>
 8001be6:	b988      	cbnz	r0, 8001c0c <__swbuf_r+0x90>
 8001be8:	4638      	mov	r0, r7
 8001bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <__swbuf_r+0x9c>)
 8001bee:	429c      	cmp	r4, r3
 8001bf0:	d101      	bne.n	8001bf6 <__swbuf_r+0x7a>
 8001bf2:	68ac      	ldr	r4, [r5, #8]
 8001bf4:	e7cf      	b.n	8001b96 <__swbuf_r+0x1a>
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <__swbuf_r+0xa0>)
 8001bf8:	429c      	cmp	r4, r3
 8001bfa:	bf08      	it	eq
 8001bfc:	68ec      	ldreq	r4, [r5, #12]
 8001bfe:	e7ca      	b.n	8001b96 <__swbuf_r+0x1a>
 8001c00:	4621      	mov	r1, r4
 8001c02:	4628      	mov	r0, r5
 8001c04:	f000 f80c 	bl	8001c20 <__swsetup_r>
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d0cb      	beq.n	8001ba4 <__swbuf_r+0x28>
 8001c0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001c10:	e7ea      	b.n	8001be8 <__swbuf_r+0x6c>
 8001c12:	bf00      	nop
 8001c14:	08002a78 	.word	0x08002a78
 8001c18:	08002a98 	.word	0x08002a98
 8001c1c:	08002a58 	.word	0x08002a58

08001c20 <__swsetup_r>:
 8001c20:	4b32      	ldr	r3, [pc, #200]	; (8001cec <__swsetup_r+0xcc>)
 8001c22:	b570      	push	{r4, r5, r6, lr}
 8001c24:	681d      	ldr	r5, [r3, #0]
 8001c26:	4606      	mov	r6, r0
 8001c28:	460c      	mov	r4, r1
 8001c2a:	b125      	cbz	r5, 8001c36 <__swsetup_r+0x16>
 8001c2c:	69ab      	ldr	r3, [r5, #24]
 8001c2e:	b913      	cbnz	r3, 8001c36 <__swsetup_r+0x16>
 8001c30:	4628      	mov	r0, r5
 8001c32:	f000 f97d 	bl	8001f30 <__sinit>
 8001c36:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <__swsetup_r+0xd0>)
 8001c38:	429c      	cmp	r4, r3
 8001c3a:	d10f      	bne.n	8001c5c <__swsetup_r+0x3c>
 8001c3c:	686c      	ldr	r4, [r5, #4]
 8001c3e:	89a3      	ldrh	r3, [r4, #12]
 8001c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c44:	0719      	lsls	r1, r3, #28
 8001c46:	d42c      	bmi.n	8001ca2 <__swsetup_r+0x82>
 8001c48:	06dd      	lsls	r5, r3, #27
 8001c4a:	d411      	bmi.n	8001c70 <__swsetup_r+0x50>
 8001c4c:	2309      	movs	r3, #9
 8001c4e:	6033      	str	r3, [r6, #0]
 8001c50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c54:	81a3      	strh	r3, [r4, #12]
 8001c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c5a:	e03e      	b.n	8001cda <__swsetup_r+0xba>
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <__swsetup_r+0xd4>)
 8001c5e:	429c      	cmp	r4, r3
 8001c60:	d101      	bne.n	8001c66 <__swsetup_r+0x46>
 8001c62:	68ac      	ldr	r4, [r5, #8]
 8001c64:	e7eb      	b.n	8001c3e <__swsetup_r+0x1e>
 8001c66:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <__swsetup_r+0xd8>)
 8001c68:	429c      	cmp	r4, r3
 8001c6a:	bf08      	it	eq
 8001c6c:	68ec      	ldreq	r4, [r5, #12]
 8001c6e:	e7e6      	b.n	8001c3e <__swsetup_r+0x1e>
 8001c70:	0758      	lsls	r0, r3, #29
 8001c72:	d512      	bpl.n	8001c9a <__swsetup_r+0x7a>
 8001c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c76:	b141      	cbz	r1, 8001c8a <__swsetup_r+0x6a>
 8001c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c7c:	4299      	cmp	r1, r3
 8001c7e:	d002      	beq.n	8001c86 <__swsetup_r+0x66>
 8001c80:	4630      	mov	r0, r6
 8001c82:	f000 fa59 	bl	8002138 <_free_r>
 8001c86:	2300      	movs	r3, #0
 8001c88:	6363      	str	r3, [r4, #52]	; 0x34
 8001c8a:	89a3      	ldrh	r3, [r4, #12]
 8001c8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c90:	81a3      	strh	r3, [r4, #12]
 8001c92:	2300      	movs	r3, #0
 8001c94:	6063      	str	r3, [r4, #4]
 8001c96:	6923      	ldr	r3, [r4, #16]
 8001c98:	6023      	str	r3, [r4, #0]
 8001c9a:	89a3      	ldrh	r3, [r4, #12]
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	81a3      	strh	r3, [r4, #12]
 8001ca2:	6923      	ldr	r3, [r4, #16]
 8001ca4:	b94b      	cbnz	r3, 8001cba <__swsetup_r+0x9a>
 8001ca6:	89a3      	ldrh	r3, [r4, #12]
 8001ca8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb0:	d003      	beq.n	8001cba <__swsetup_r+0x9a>
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	4630      	mov	r0, r6
 8001cb6:	f000 f9ff 	bl	80020b8 <__smakebuf_r>
 8001cba:	89a0      	ldrh	r0, [r4, #12]
 8001cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001cc0:	f010 0301 	ands.w	r3, r0, #1
 8001cc4:	d00a      	beq.n	8001cdc <__swsetup_r+0xbc>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60a3      	str	r3, [r4, #8]
 8001cca:	6963      	ldr	r3, [r4, #20]
 8001ccc:	425b      	negs	r3, r3
 8001cce:	61a3      	str	r3, [r4, #24]
 8001cd0:	6923      	ldr	r3, [r4, #16]
 8001cd2:	b943      	cbnz	r3, 8001ce6 <__swsetup_r+0xc6>
 8001cd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001cd8:	d1ba      	bne.n	8001c50 <__swsetup_r+0x30>
 8001cda:	bd70      	pop	{r4, r5, r6, pc}
 8001cdc:	0781      	lsls	r1, r0, #30
 8001cde:	bf58      	it	pl
 8001ce0:	6963      	ldrpl	r3, [r4, #20]
 8001ce2:	60a3      	str	r3, [r4, #8]
 8001ce4:	e7f4      	b.n	8001cd0 <__swsetup_r+0xb0>
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	e7f7      	b.n	8001cda <__swsetup_r+0xba>
 8001cea:	bf00      	nop
 8001cec:	2000000c 	.word	0x2000000c
 8001cf0:	08002a78 	.word	0x08002a78
 8001cf4:	08002a98 	.word	0x08002a98
 8001cf8:	08002a58 	.word	0x08002a58

08001cfc <__sflush_r>:
 8001cfc:	898a      	ldrh	r2, [r1, #12]
 8001cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d02:	4605      	mov	r5, r0
 8001d04:	0710      	lsls	r0, r2, #28
 8001d06:	460c      	mov	r4, r1
 8001d08:	d458      	bmi.n	8001dbc <__sflush_r+0xc0>
 8001d0a:	684b      	ldr	r3, [r1, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	dc05      	bgt.n	8001d1c <__sflush_r+0x20>
 8001d10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	dc02      	bgt.n	8001d1c <__sflush_r+0x20>
 8001d16:	2000      	movs	r0, #0
 8001d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d1e:	2e00      	cmp	r6, #0
 8001d20:	d0f9      	beq.n	8001d16 <__sflush_r+0x1a>
 8001d22:	2300      	movs	r3, #0
 8001d24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d28:	682f      	ldr	r7, [r5, #0]
 8001d2a:	602b      	str	r3, [r5, #0]
 8001d2c:	d032      	beq.n	8001d94 <__sflush_r+0x98>
 8001d2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d30:	89a3      	ldrh	r3, [r4, #12]
 8001d32:	075a      	lsls	r2, r3, #29
 8001d34:	d505      	bpl.n	8001d42 <__sflush_r+0x46>
 8001d36:	6863      	ldr	r3, [r4, #4]
 8001d38:	1ac0      	subs	r0, r0, r3
 8001d3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d3c:	b10b      	cbz	r3, 8001d42 <__sflush_r+0x46>
 8001d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d40:	1ac0      	subs	r0, r0, r3
 8001d42:	2300      	movs	r3, #0
 8001d44:	4602      	mov	r2, r0
 8001d46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d48:	6a21      	ldr	r1, [r4, #32]
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	47b0      	blx	r6
 8001d4e:	1c43      	adds	r3, r0, #1
 8001d50:	89a3      	ldrh	r3, [r4, #12]
 8001d52:	d106      	bne.n	8001d62 <__sflush_r+0x66>
 8001d54:	6829      	ldr	r1, [r5, #0]
 8001d56:	291d      	cmp	r1, #29
 8001d58:	d82c      	bhi.n	8001db4 <__sflush_r+0xb8>
 8001d5a:	4a2a      	ldr	r2, [pc, #168]	; (8001e04 <__sflush_r+0x108>)
 8001d5c:	40ca      	lsrs	r2, r1
 8001d5e:	07d6      	lsls	r6, r2, #31
 8001d60:	d528      	bpl.n	8001db4 <__sflush_r+0xb8>
 8001d62:	2200      	movs	r2, #0
 8001d64:	6062      	str	r2, [r4, #4]
 8001d66:	04d9      	lsls	r1, r3, #19
 8001d68:	6922      	ldr	r2, [r4, #16]
 8001d6a:	6022      	str	r2, [r4, #0]
 8001d6c:	d504      	bpl.n	8001d78 <__sflush_r+0x7c>
 8001d6e:	1c42      	adds	r2, r0, #1
 8001d70:	d101      	bne.n	8001d76 <__sflush_r+0x7a>
 8001d72:	682b      	ldr	r3, [r5, #0]
 8001d74:	b903      	cbnz	r3, 8001d78 <__sflush_r+0x7c>
 8001d76:	6560      	str	r0, [r4, #84]	; 0x54
 8001d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d7a:	602f      	str	r7, [r5, #0]
 8001d7c:	2900      	cmp	r1, #0
 8001d7e:	d0ca      	beq.n	8001d16 <__sflush_r+0x1a>
 8001d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d84:	4299      	cmp	r1, r3
 8001d86:	d002      	beq.n	8001d8e <__sflush_r+0x92>
 8001d88:	4628      	mov	r0, r5
 8001d8a:	f000 f9d5 	bl	8002138 <_free_r>
 8001d8e:	2000      	movs	r0, #0
 8001d90:	6360      	str	r0, [r4, #52]	; 0x34
 8001d92:	e7c1      	b.n	8001d18 <__sflush_r+0x1c>
 8001d94:	6a21      	ldr	r1, [r4, #32]
 8001d96:	2301      	movs	r3, #1
 8001d98:	4628      	mov	r0, r5
 8001d9a:	47b0      	blx	r6
 8001d9c:	1c41      	adds	r1, r0, #1
 8001d9e:	d1c7      	bne.n	8001d30 <__sflush_r+0x34>
 8001da0:	682b      	ldr	r3, [r5, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0c4      	beq.n	8001d30 <__sflush_r+0x34>
 8001da6:	2b1d      	cmp	r3, #29
 8001da8:	d001      	beq.n	8001dae <__sflush_r+0xb2>
 8001daa:	2b16      	cmp	r3, #22
 8001dac:	d101      	bne.n	8001db2 <__sflush_r+0xb6>
 8001dae:	602f      	str	r7, [r5, #0]
 8001db0:	e7b1      	b.n	8001d16 <__sflush_r+0x1a>
 8001db2:	89a3      	ldrh	r3, [r4, #12]
 8001db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001db8:	81a3      	strh	r3, [r4, #12]
 8001dba:	e7ad      	b.n	8001d18 <__sflush_r+0x1c>
 8001dbc:	690f      	ldr	r7, [r1, #16]
 8001dbe:	2f00      	cmp	r7, #0
 8001dc0:	d0a9      	beq.n	8001d16 <__sflush_r+0x1a>
 8001dc2:	0793      	lsls	r3, r2, #30
 8001dc4:	680e      	ldr	r6, [r1, #0]
 8001dc6:	bf08      	it	eq
 8001dc8:	694b      	ldreq	r3, [r1, #20]
 8001dca:	600f      	str	r7, [r1, #0]
 8001dcc:	bf18      	it	ne
 8001dce:	2300      	movne	r3, #0
 8001dd0:	eba6 0807 	sub.w	r8, r6, r7
 8001dd4:	608b      	str	r3, [r1, #8]
 8001dd6:	f1b8 0f00 	cmp.w	r8, #0
 8001dda:	dd9c      	ble.n	8001d16 <__sflush_r+0x1a>
 8001ddc:	6a21      	ldr	r1, [r4, #32]
 8001dde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001de0:	4643      	mov	r3, r8
 8001de2:	463a      	mov	r2, r7
 8001de4:	4628      	mov	r0, r5
 8001de6:	47b0      	blx	r6
 8001de8:	2800      	cmp	r0, #0
 8001dea:	dc06      	bgt.n	8001dfa <__sflush_r+0xfe>
 8001dec:	89a3      	ldrh	r3, [r4, #12]
 8001dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df2:	81a3      	strh	r3, [r4, #12]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001df8:	e78e      	b.n	8001d18 <__sflush_r+0x1c>
 8001dfa:	4407      	add	r7, r0
 8001dfc:	eba8 0800 	sub.w	r8, r8, r0
 8001e00:	e7e9      	b.n	8001dd6 <__sflush_r+0xda>
 8001e02:	bf00      	nop
 8001e04:	20400001 	.word	0x20400001

08001e08 <_fflush_r>:
 8001e08:	b538      	push	{r3, r4, r5, lr}
 8001e0a:	690b      	ldr	r3, [r1, #16]
 8001e0c:	4605      	mov	r5, r0
 8001e0e:	460c      	mov	r4, r1
 8001e10:	b913      	cbnz	r3, 8001e18 <_fflush_r+0x10>
 8001e12:	2500      	movs	r5, #0
 8001e14:	4628      	mov	r0, r5
 8001e16:	bd38      	pop	{r3, r4, r5, pc}
 8001e18:	b118      	cbz	r0, 8001e22 <_fflush_r+0x1a>
 8001e1a:	6983      	ldr	r3, [r0, #24]
 8001e1c:	b90b      	cbnz	r3, 8001e22 <_fflush_r+0x1a>
 8001e1e:	f000 f887 	bl	8001f30 <__sinit>
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <_fflush_r+0x6c>)
 8001e24:	429c      	cmp	r4, r3
 8001e26:	d11b      	bne.n	8001e60 <_fflush_r+0x58>
 8001e28:	686c      	ldr	r4, [r5, #4]
 8001e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0ef      	beq.n	8001e12 <_fflush_r+0xa>
 8001e32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e34:	07d0      	lsls	r0, r2, #31
 8001e36:	d404      	bmi.n	8001e42 <_fflush_r+0x3a>
 8001e38:	0599      	lsls	r1, r3, #22
 8001e3a:	d402      	bmi.n	8001e42 <_fflush_r+0x3a>
 8001e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e3e:	f000 f915 	bl	800206c <__retarget_lock_acquire_recursive>
 8001e42:	4628      	mov	r0, r5
 8001e44:	4621      	mov	r1, r4
 8001e46:	f7ff ff59 	bl	8001cfc <__sflush_r>
 8001e4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e4c:	07da      	lsls	r2, r3, #31
 8001e4e:	4605      	mov	r5, r0
 8001e50:	d4e0      	bmi.n	8001e14 <_fflush_r+0xc>
 8001e52:	89a3      	ldrh	r3, [r4, #12]
 8001e54:	059b      	lsls	r3, r3, #22
 8001e56:	d4dd      	bmi.n	8001e14 <_fflush_r+0xc>
 8001e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e5a:	f000 f908 	bl	800206e <__retarget_lock_release_recursive>
 8001e5e:	e7d9      	b.n	8001e14 <_fflush_r+0xc>
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <_fflush_r+0x70>)
 8001e62:	429c      	cmp	r4, r3
 8001e64:	d101      	bne.n	8001e6a <_fflush_r+0x62>
 8001e66:	68ac      	ldr	r4, [r5, #8]
 8001e68:	e7df      	b.n	8001e2a <_fflush_r+0x22>
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <_fflush_r+0x74>)
 8001e6c:	429c      	cmp	r4, r3
 8001e6e:	bf08      	it	eq
 8001e70:	68ec      	ldreq	r4, [r5, #12]
 8001e72:	e7da      	b.n	8001e2a <_fflush_r+0x22>
 8001e74:	08002a78 	.word	0x08002a78
 8001e78:	08002a98 	.word	0x08002a98
 8001e7c:	08002a58 	.word	0x08002a58

08001e80 <std>:
 8001e80:	2300      	movs	r3, #0
 8001e82:	b510      	push	{r4, lr}
 8001e84:	4604      	mov	r4, r0
 8001e86:	e9c0 3300 	strd	r3, r3, [r0]
 8001e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e8e:	6083      	str	r3, [r0, #8]
 8001e90:	8181      	strh	r1, [r0, #12]
 8001e92:	6643      	str	r3, [r0, #100]	; 0x64
 8001e94:	81c2      	strh	r2, [r0, #14]
 8001e96:	6183      	str	r3, [r0, #24]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	305c      	adds	r0, #92	; 0x5c
 8001e9e:	f7ff fdd7 	bl	8001a50 <memset>
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <std+0x38>)
 8001ea4:	6263      	str	r3, [r4, #36]	; 0x24
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <std+0x3c>)
 8001ea8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <std+0x40>)
 8001eac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <std+0x44>)
 8001eb0:	6224      	str	r4, [r4, #32]
 8001eb2:	6323      	str	r3, [r4, #48]	; 0x30
 8001eb4:	bd10      	pop	{r4, pc}
 8001eb6:	bf00      	nop
 8001eb8:	08002889 	.word	0x08002889
 8001ebc:	080028ab 	.word	0x080028ab
 8001ec0:	080028e3 	.word	0x080028e3
 8001ec4:	08002907 	.word	0x08002907

08001ec8 <_cleanup_r>:
 8001ec8:	4901      	ldr	r1, [pc, #4]	; (8001ed0 <_cleanup_r+0x8>)
 8001eca:	f000 b8af 	b.w	800202c <_fwalk_reent>
 8001ece:	bf00      	nop
 8001ed0:	08001e09 	.word	0x08001e09

08001ed4 <__sfmoreglue>:
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	1e4a      	subs	r2, r1, #1
 8001ed8:	2568      	movs	r5, #104	; 0x68
 8001eda:	4355      	muls	r5, r2
 8001edc:	460e      	mov	r6, r1
 8001ede:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ee2:	f000 f979 	bl	80021d8 <_malloc_r>
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	b140      	cbz	r0, 8001efc <__sfmoreglue+0x28>
 8001eea:	2100      	movs	r1, #0
 8001eec:	e9c0 1600 	strd	r1, r6, [r0]
 8001ef0:	300c      	adds	r0, #12
 8001ef2:	60a0      	str	r0, [r4, #8]
 8001ef4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ef8:	f7ff fdaa 	bl	8001a50 <memset>
 8001efc:	4620      	mov	r0, r4
 8001efe:	bd70      	pop	{r4, r5, r6, pc}

08001f00 <__sfp_lock_acquire>:
 8001f00:	4801      	ldr	r0, [pc, #4]	; (8001f08 <__sfp_lock_acquire+0x8>)
 8001f02:	f000 b8b3 	b.w	800206c <__retarget_lock_acquire_recursive>
 8001f06:	bf00      	nop
 8001f08:	200000e8 	.word	0x200000e8

08001f0c <__sfp_lock_release>:
 8001f0c:	4801      	ldr	r0, [pc, #4]	; (8001f14 <__sfp_lock_release+0x8>)
 8001f0e:	f000 b8ae 	b.w	800206e <__retarget_lock_release_recursive>
 8001f12:	bf00      	nop
 8001f14:	200000e8 	.word	0x200000e8

08001f18 <__sinit_lock_acquire>:
 8001f18:	4801      	ldr	r0, [pc, #4]	; (8001f20 <__sinit_lock_acquire+0x8>)
 8001f1a:	f000 b8a7 	b.w	800206c <__retarget_lock_acquire_recursive>
 8001f1e:	bf00      	nop
 8001f20:	200000e3 	.word	0x200000e3

08001f24 <__sinit_lock_release>:
 8001f24:	4801      	ldr	r0, [pc, #4]	; (8001f2c <__sinit_lock_release+0x8>)
 8001f26:	f000 b8a2 	b.w	800206e <__retarget_lock_release_recursive>
 8001f2a:	bf00      	nop
 8001f2c:	200000e3 	.word	0x200000e3

08001f30 <__sinit>:
 8001f30:	b510      	push	{r4, lr}
 8001f32:	4604      	mov	r4, r0
 8001f34:	f7ff fff0 	bl	8001f18 <__sinit_lock_acquire>
 8001f38:	69a3      	ldr	r3, [r4, #24]
 8001f3a:	b11b      	cbz	r3, 8001f44 <__sinit+0x14>
 8001f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f40:	f7ff bff0 	b.w	8001f24 <__sinit_lock_release>
 8001f44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f48:	6523      	str	r3, [r4, #80]	; 0x50
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <__sinit+0x68>)
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <__sinit+0x6c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f52:	42a3      	cmp	r3, r4
 8001f54:	bf04      	itt	eq
 8001f56:	2301      	moveq	r3, #1
 8001f58:	61a3      	streq	r3, [r4, #24]
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f000 f820 	bl	8001fa0 <__sfp>
 8001f60:	6060      	str	r0, [r4, #4]
 8001f62:	4620      	mov	r0, r4
 8001f64:	f000 f81c 	bl	8001fa0 <__sfp>
 8001f68:	60a0      	str	r0, [r4, #8]
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	f000 f818 	bl	8001fa0 <__sfp>
 8001f70:	2200      	movs	r2, #0
 8001f72:	60e0      	str	r0, [r4, #12]
 8001f74:	2104      	movs	r1, #4
 8001f76:	6860      	ldr	r0, [r4, #4]
 8001f78:	f7ff ff82 	bl	8001e80 <std>
 8001f7c:	68a0      	ldr	r0, [r4, #8]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2109      	movs	r1, #9
 8001f82:	f7ff ff7d 	bl	8001e80 <std>
 8001f86:	68e0      	ldr	r0, [r4, #12]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	2112      	movs	r1, #18
 8001f8c:	f7ff ff78 	bl	8001e80 <std>
 8001f90:	2301      	movs	r3, #1
 8001f92:	61a3      	str	r3, [r4, #24]
 8001f94:	e7d2      	b.n	8001f3c <__sinit+0xc>
 8001f96:	bf00      	nop
 8001f98:	08002a54 	.word	0x08002a54
 8001f9c:	08001ec9 	.word	0x08001ec9

08001fa0 <__sfp>:
 8001fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa2:	4607      	mov	r7, r0
 8001fa4:	f7ff ffac 	bl	8001f00 <__sfp_lock_acquire>
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <__sfp+0x84>)
 8001faa:	681e      	ldr	r6, [r3, #0]
 8001fac:	69b3      	ldr	r3, [r6, #24]
 8001fae:	b913      	cbnz	r3, 8001fb6 <__sfp+0x16>
 8001fb0:	4630      	mov	r0, r6
 8001fb2:	f7ff ffbd 	bl	8001f30 <__sinit>
 8001fb6:	3648      	adds	r6, #72	; 0x48
 8001fb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	d503      	bpl.n	8001fc8 <__sfp+0x28>
 8001fc0:	6833      	ldr	r3, [r6, #0]
 8001fc2:	b30b      	cbz	r3, 8002008 <__sfp+0x68>
 8001fc4:	6836      	ldr	r6, [r6, #0]
 8001fc6:	e7f7      	b.n	8001fb8 <__sfp+0x18>
 8001fc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001fcc:	b9d5      	cbnz	r5, 8002004 <__sfp+0x64>
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <__sfp+0x88>)
 8001fd0:	60e3      	str	r3, [r4, #12]
 8001fd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001fd6:	6665      	str	r5, [r4, #100]	; 0x64
 8001fd8:	f000 f847 	bl	800206a <__retarget_lock_init_recursive>
 8001fdc:	f7ff ff96 	bl	8001f0c <__sfp_lock_release>
 8001fe0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001fe4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001fe8:	6025      	str	r5, [r4, #0]
 8001fea:	61a5      	str	r5, [r4, #24]
 8001fec:	2208      	movs	r2, #8
 8001fee:	4629      	mov	r1, r5
 8001ff0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ff4:	f7ff fd2c 	bl	8001a50 <memset>
 8001ff8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ffc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002000:	4620      	mov	r0, r4
 8002002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002004:	3468      	adds	r4, #104	; 0x68
 8002006:	e7d9      	b.n	8001fbc <__sfp+0x1c>
 8002008:	2104      	movs	r1, #4
 800200a:	4638      	mov	r0, r7
 800200c:	f7ff ff62 	bl	8001ed4 <__sfmoreglue>
 8002010:	4604      	mov	r4, r0
 8002012:	6030      	str	r0, [r6, #0]
 8002014:	2800      	cmp	r0, #0
 8002016:	d1d5      	bne.n	8001fc4 <__sfp+0x24>
 8002018:	f7ff ff78 	bl	8001f0c <__sfp_lock_release>
 800201c:	230c      	movs	r3, #12
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	e7ee      	b.n	8002000 <__sfp+0x60>
 8002022:	bf00      	nop
 8002024:	08002a54 	.word	0x08002a54
 8002028:	ffff0001 	.word	0xffff0001

0800202c <_fwalk_reent>:
 800202c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002030:	4606      	mov	r6, r0
 8002032:	4688      	mov	r8, r1
 8002034:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002038:	2700      	movs	r7, #0
 800203a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800203e:	f1b9 0901 	subs.w	r9, r9, #1
 8002042:	d505      	bpl.n	8002050 <_fwalk_reent+0x24>
 8002044:	6824      	ldr	r4, [r4, #0]
 8002046:	2c00      	cmp	r4, #0
 8002048:	d1f7      	bne.n	800203a <_fwalk_reent+0xe>
 800204a:	4638      	mov	r0, r7
 800204c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002050:	89ab      	ldrh	r3, [r5, #12]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d907      	bls.n	8002066 <_fwalk_reent+0x3a>
 8002056:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800205a:	3301      	adds	r3, #1
 800205c:	d003      	beq.n	8002066 <_fwalk_reent+0x3a>
 800205e:	4629      	mov	r1, r5
 8002060:	4630      	mov	r0, r6
 8002062:	47c0      	blx	r8
 8002064:	4307      	orrs	r7, r0
 8002066:	3568      	adds	r5, #104	; 0x68
 8002068:	e7e9      	b.n	800203e <_fwalk_reent+0x12>

0800206a <__retarget_lock_init_recursive>:
 800206a:	4770      	bx	lr

0800206c <__retarget_lock_acquire_recursive>:
 800206c:	4770      	bx	lr

0800206e <__retarget_lock_release_recursive>:
 800206e:	4770      	bx	lr

08002070 <__swhatbuf_r>:
 8002070:	b570      	push	{r4, r5, r6, lr}
 8002072:	460e      	mov	r6, r1
 8002074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002078:	2900      	cmp	r1, #0
 800207a:	b096      	sub	sp, #88	; 0x58
 800207c:	4614      	mov	r4, r2
 800207e:	461d      	mov	r5, r3
 8002080:	da07      	bge.n	8002092 <__swhatbuf_r+0x22>
 8002082:	2300      	movs	r3, #0
 8002084:	602b      	str	r3, [r5, #0]
 8002086:	89b3      	ldrh	r3, [r6, #12]
 8002088:	061a      	lsls	r2, r3, #24
 800208a:	d410      	bmi.n	80020ae <__swhatbuf_r+0x3e>
 800208c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002090:	e00e      	b.n	80020b0 <__swhatbuf_r+0x40>
 8002092:	466a      	mov	r2, sp
 8002094:	f000 fc5e 	bl	8002954 <_fstat_r>
 8002098:	2800      	cmp	r0, #0
 800209a:	dbf2      	blt.n	8002082 <__swhatbuf_r+0x12>
 800209c:	9a01      	ldr	r2, [sp, #4]
 800209e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020a6:	425a      	negs	r2, r3
 80020a8:	415a      	adcs	r2, r3
 80020aa:	602a      	str	r2, [r5, #0]
 80020ac:	e7ee      	b.n	800208c <__swhatbuf_r+0x1c>
 80020ae:	2340      	movs	r3, #64	; 0x40
 80020b0:	2000      	movs	r0, #0
 80020b2:	6023      	str	r3, [r4, #0]
 80020b4:	b016      	add	sp, #88	; 0x58
 80020b6:	bd70      	pop	{r4, r5, r6, pc}

080020b8 <__smakebuf_r>:
 80020b8:	898b      	ldrh	r3, [r1, #12]
 80020ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020bc:	079d      	lsls	r5, r3, #30
 80020be:	4606      	mov	r6, r0
 80020c0:	460c      	mov	r4, r1
 80020c2:	d507      	bpl.n	80020d4 <__smakebuf_r+0x1c>
 80020c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020c8:	6023      	str	r3, [r4, #0]
 80020ca:	6123      	str	r3, [r4, #16]
 80020cc:	2301      	movs	r3, #1
 80020ce:	6163      	str	r3, [r4, #20]
 80020d0:	b002      	add	sp, #8
 80020d2:	bd70      	pop	{r4, r5, r6, pc}
 80020d4:	ab01      	add	r3, sp, #4
 80020d6:	466a      	mov	r2, sp
 80020d8:	f7ff ffca 	bl	8002070 <__swhatbuf_r>
 80020dc:	9900      	ldr	r1, [sp, #0]
 80020de:	4605      	mov	r5, r0
 80020e0:	4630      	mov	r0, r6
 80020e2:	f000 f879 	bl	80021d8 <_malloc_r>
 80020e6:	b948      	cbnz	r0, 80020fc <__smakebuf_r+0x44>
 80020e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020ec:	059a      	lsls	r2, r3, #22
 80020ee:	d4ef      	bmi.n	80020d0 <__smakebuf_r+0x18>
 80020f0:	f023 0303 	bic.w	r3, r3, #3
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	81a3      	strh	r3, [r4, #12]
 80020fa:	e7e3      	b.n	80020c4 <__smakebuf_r+0xc>
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <__smakebuf_r+0x7c>)
 80020fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8002100:	89a3      	ldrh	r3, [r4, #12]
 8002102:	6020      	str	r0, [r4, #0]
 8002104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002108:	81a3      	strh	r3, [r4, #12]
 800210a:	9b00      	ldr	r3, [sp, #0]
 800210c:	6163      	str	r3, [r4, #20]
 800210e:	9b01      	ldr	r3, [sp, #4]
 8002110:	6120      	str	r0, [r4, #16]
 8002112:	b15b      	cbz	r3, 800212c <__smakebuf_r+0x74>
 8002114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002118:	4630      	mov	r0, r6
 800211a:	f000 fc2d 	bl	8002978 <_isatty_r>
 800211e:	b128      	cbz	r0, 800212c <__smakebuf_r+0x74>
 8002120:	89a3      	ldrh	r3, [r4, #12]
 8002122:	f023 0303 	bic.w	r3, r3, #3
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	81a3      	strh	r3, [r4, #12]
 800212c:	89a0      	ldrh	r0, [r4, #12]
 800212e:	4305      	orrs	r5, r0
 8002130:	81a5      	strh	r5, [r4, #12]
 8002132:	e7cd      	b.n	80020d0 <__smakebuf_r+0x18>
 8002134:	08001ec9 	.word	0x08001ec9

08002138 <_free_r>:
 8002138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800213a:	2900      	cmp	r1, #0
 800213c:	d048      	beq.n	80021d0 <_free_r+0x98>
 800213e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002142:	9001      	str	r0, [sp, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	f1a1 0404 	sub.w	r4, r1, #4
 800214a:	bfb8      	it	lt
 800214c:	18e4      	addlt	r4, r4, r3
 800214e:	f000 fc35 	bl	80029bc <__malloc_lock>
 8002152:	4a20      	ldr	r2, [pc, #128]	; (80021d4 <_free_r+0x9c>)
 8002154:	9801      	ldr	r0, [sp, #4]
 8002156:	6813      	ldr	r3, [r2, #0]
 8002158:	4615      	mov	r5, r2
 800215a:	b933      	cbnz	r3, 800216a <_free_r+0x32>
 800215c:	6063      	str	r3, [r4, #4]
 800215e:	6014      	str	r4, [r2, #0]
 8002160:	b003      	add	sp, #12
 8002162:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002166:	f000 bc2f 	b.w	80029c8 <__malloc_unlock>
 800216a:	42a3      	cmp	r3, r4
 800216c:	d90b      	bls.n	8002186 <_free_r+0x4e>
 800216e:	6821      	ldr	r1, [r4, #0]
 8002170:	1862      	adds	r2, r4, r1
 8002172:	4293      	cmp	r3, r2
 8002174:	bf04      	itt	eq
 8002176:	681a      	ldreq	r2, [r3, #0]
 8002178:	685b      	ldreq	r3, [r3, #4]
 800217a:	6063      	str	r3, [r4, #4]
 800217c:	bf04      	itt	eq
 800217e:	1852      	addeq	r2, r2, r1
 8002180:	6022      	streq	r2, [r4, #0]
 8002182:	602c      	str	r4, [r5, #0]
 8002184:	e7ec      	b.n	8002160 <_free_r+0x28>
 8002186:	461a      	mov	r2, r3
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	b10b      	cbz	r3, 8002190 <_free_r+0x58>
 800218c:	42a3      	cmp	r3, r4
 800218e:	d9fa      	bls.n	8002186 <_free_r+0x4e>
 8002190:	6811      	ldr	r1, [r2, #0]
 8002192:	1855      	adds	r5, r2, r1
 8002194:	42a5      	cmp	r5, r4
 8002196:	d10b      	bne.n	80021b0 <_free_r+0x78>
 8002198:	6824      	ldr	r4, [r4, #0]
 800219a:	4421      	add	r1, r4
 800219c:	1854      	adds	r4, r2, r1
 800219e:	42a3      	cmp	r3, r4
 80021a0:	6011      	str	r1, [r2, #0]
 80021a2:	d1dd      	bne.n	8002160 <_free_r+0x28>
 80021a4:	681c      	ldr	r4, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	6053      	str	r3, [r2, #4]
 80021aa:	4421      	add	r1, r4
 80021ac:	6011      	str	r1, [r2, #0]
 80021ae:	e7d7      	b.n	8002160 <_free_r+0x28>
 80021b0:	d902      	bls.n	80021b8 <_free_r+0x80>
 80021b2:	230c      	movs	r3, #12
 80021b4:	6003      	str	r3, [r0, #0]
 80021b6:	e7d3      	b.n	8002160 <_free_r+0x28>
 80021b8:	6825      	ldr	r5, [r4, #0]
 80021ba:	1961      	adds	r1, r4, r5
 80021bc:	428b      	cmp	r3, r1
 80021be:	bf04      	itt	eq
 80021c0:	6819      	ldreq	r1, [r3, #0]
 80021c2:	685b      	ldreq	r3, [r3, #4]
 80021c4:	6063      	str	r3, [r4, #4]
 80021c6:	bf04      	itt	eq
 80021c8:	1949      	addeq	r1, r1, r5
 80021ca:	6021      	streq	r1, [r4, #0]
 80021cc:	6054      	str	r4, [r2, #4]
 80021ce:	e7c7      	b.n	8002160 <_free_r+0x28>
 80021d0:	b003      	add	sp, #12
 80021d2:	bd30      	pop	{r4, r5, pc}
 80021d4:	20000090 	.word	0x20000090

080021d8 <_malloc_r>:
 80021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021da:	1ccd      	adds	r5, r1, #3
 80021dc:	f025 0503 	bic.w	r5, r5, #3
 80021e0:	3508      	adds	r5, #8
 80021e2:	2d0c      	cmp	r5, #12
 80021e4:	bf38      	it	cc
 80021e6:	250c      	movcc	r5, #12
 80021e8:	2d00      	cmp	r5, #0
 80021ea:	4606      	mov	r6, r0
 80021ec:	db01      	blt.n	80021f2 <_malloc_r+0x1a>
 80021ee:	42a9      	cmp	r1, r5
 80021f0:	d903      	bls.n	80021fa <_malloc_r+0x22>
 80021f2:	230c      	movs	r3, #12
 80021f4:	6033      	str	r3, [r6, #0]
 80021f6:	2000      	movs	r0, #0
 80021f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021fa:	f000 fbdf 	bl	80029bc <__malloc_lock>
 80021fe:	4921      	ldr	r1, [pc, #132]	; (8002284 <_malloc_r+0xac>)
 8002200:	680a      	ldr	r2, [r1, #0]
 8002202:	4614      	mov	r4, r2
 8002204:	b99c      	cbnz	r4, 800222e <_malloc_r+0x56>
 8002206:	4f20      	ldr	r7, [pc, #128]	; (8002288 <_malloc_r+0xb0>)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b923      	cbnz	r3, 8002216 <_malloc_r+0x3e>
 800220c:	4621      	mov	r1, r4
 800220e:	4630      	mov	r0, r6
 8002210:	f000 fb2a 	bl	8002868 <_sbrk_r>
 8002214:	6038      	str	r0, [r7, #0]
 8002216:	4629      	mov	r1, r5
 8002218:	4630      	mov	r0, r6
 800221a:	f000 fb25 	bl	8002868 <_sbrk_r>
 800221e:	1c43      	adds	r3, r0, #1
 8002220:	d123      	bne.n	800226a <_malloc_r+0x92>
 8002222:	230c      	movs	r3, #12
 8002224:	6033      	str	r3, [r6, #0]
 8002226:	4630      	mov	r0, r6
 8002228:	f000 fbce 	bl	80029c8 <__malloc_unlock>
 800222c:	e7e3      	b.n	80021f6 <_malloc_r+0x1e>
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	1b5b      	subs	r3, r3, r5
 8002232:	d417      	bmi.n	8002264 <_malloc_r+0x8c>
 8002234:	2b0b      	cmp	r3, #11
 8002236:	d903      	bls.n	8002240 <_malloc_r+0x68>
 8002238:	6023      	str	r3, [r4, #0]
 800223a:	441c      	add	r4, r3
 800223c:	6025      	str	r5, [r4, #0]
 800223e:	e004      	b.n	800224a <_malloc_r+0x72>
 8002240:	6863      	ldr	r3, [r4, #4]
 8002242:	42a2      	cmp	r2, r4
 8002244:	bf0c      	ite	eq
 8002246:	600b      	streq	r3, [r1, #0]
 8002248:	6053      	strne	r3, [r2, #4]
 800224a:	4630      	mov	r0, r6
 800224c:	f000 fbbc 	bl	80029c8 <__malloc_unlock>
 8002250:	f104 000b 	add.w	r0, r4, #11
 8002254:	1d23      	adds	r3, r4, #4
 8002256:	f020 0007 	bic.w	r0, r0, #7
 800225a:	1ac2      	subs	r2, r0, r3
 800225c:	d0cc      	beq.n	80021f8 <_malloc_r+0x20>
 800225e:	1a1b      	subs	r3, r3, r0
 8002260:	50a3      	str	r3, [r4, r2]
 8002262:	e7c9      	b.n	80021f8 <_malloc_r+0x20>
 8002264:	4622      	mov	r2, r4
 8002266:	6864      	ldr	r4, [r4, #4]
 8002268:	e7cc      	b.n	8002204 <_malloc_r+0x2c>
 800226a:	1cc4      	adds	r4, r0, #3
 800226c:	f024 0403 	bic.w	r4, r4, #3
 8002270:	42a0      	cmp	r0, r4
 8002272:	d0e3      	beq.n	800223c <_malloc_r+0x64>
 8002274:	1a21      	subs	r1, r4, r0
 8002276:	4630      	mov	r0, r6
 8002278:	f000 faf6 	bl	8002868 <_sbrk_r>
 800227c:	3001      	adds	r0, #1
 800227e:	d1dd      	bne.n	800223c <_malloc_r+0x64>
 8002280:	e7cf      	b.n	8002222 <_malloc_r+0x4a>
 8002282:	bf00      	nop
 8002284:	20000090 	.word	0x20000090
 8002288:	20000094 	.word	0x20000094

0800228c <__sfputc_r>:
 800228c:	6893      	ldr	r3, [r2, #8]
 800228e:	3b01      	subs	r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	b410      	push	{r4}
 8002294:	6093      	str	r3, [r2, #8]
 8002296:	da08      	bge.n	80022aa <__sfputc_r+0x1e>
 8002298:	6994      	ldr	r4, [r2, #24]
 800229a:	42a3      	cmp	r3, r4
 800229c:	db01      	blt.n	80022a2 <__sfputc_r+0x16>
 800229e:	290a      	cmp	r1, #10
 80022a0:	d103      	bne.n	80022aa <__sfputc_r+0x1e>
 80022a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022a6:	f7ff bc69 	b.w	8001b7c <__swbuf_r>
 80022aa:	6813      	ldr	r3, [r2, #0]
 80022ac:	1c58      	adds	r0, r3, #1
 80022ae:	6010      	str	r0, [r2, #0]
 80022b0:	7019      	strb	r1, [r3, #0]
 80022b2:	4608      	mov	r0, r1
 80022b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <__sfputs_r>:
 80022ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022bc:	4606      	mov	r6, r0
 80022be:	460f      	mov	r7, r1
 80022c0:	4614      	mov	r4, r2
 80022c2:	18d5      	adds	r5, r2, r3
 80022c4:	42ac      	cmp	r4, r5
 80022c6:	d101      	bne.n	80022cc <__sfputs_r+0x12>
 80022c8:	2000      	movs	r0, #0
 80022ca:	e007      	b.n	80022dc <__sfputs_r+0x22>
 80022cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022d0:	463a      	mov	r2, r7
 80022d2:	4630      	mov	r0, r6
 80022d4:	f7ff ffda 	bl	800228c <__sfputc_r>
 80022d8:	1c43      	adds	r3, r0, #1
 80022da:	d1f3      	bne.n	80022c4 <__sfputs_r+0xa>
 80022dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080022e0 <_vfiprintf_r>:
 80022e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022e4:	460d      	mov	r5, r1
 80022e6:	b09d      	sub	sp, #116	; 0x74
 80022e8:	4614      	mov	r4, r2
 80022ea:	4698      	mov	r8, r3
 80022ec:	4606      	mov	r6, r0
 80022ee:	b118      	cbz	r0, 80022f8 <_vfiprintf_r+0x18>
 80022f0:	6983      	ldr	r3, [r0, #24]
 80022f2:	b90b      	cbnz	r3, 80022f8 <_vfiprintf_r+0x18>
 80022f4:	f7ff fe1c 	bl	8001f30 <__sinit>
 80022f8:	4b89      	ldr	r3, [pc, #548]	; (8002520 <_vfiprintf_r+0x240>)
 80022fa:	429d      	cmp	r5, r3
 80022fc:	d11b      	bne.n	8002336 <_vfiprintf_r+0x56>
 80022fe:	6875      	ldr	r5, [r6, #4]
 8002300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002302:	07d9      	lsls	r1, r3, #31
 8002304:	d405      	bmi.n	8002312 <_vfiprintf_r+0x32>
 8002306:	89ab      	ldrh	r3, [r5, #12]
 8002308:	059a      	lsls	r2, r3, #22
 800230a:	d402      	bmi.n	8002312 <_vfiprintf_r+0x32>
 800230c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800230e:	f7ff fead 	bl	800206c <__retarget_lock_acquire_recursive>
 8002312:	89ab      	ldrh	r3, [r5, #12]
 8002314:	071b      	lsls	r3, r3, #28
 8002316:	d501      	bpl.n	800231c <_vfiprintf_r+0x3c>
 8002318:	692b      	ldr	r3, [r5, #16]
 800231a:	b9eb      	cbnz	r3, 8002358 <_vfiprintf_r+0x78>
 800231c:	4629      	mov	r1, r5
 800231e:	4630      	mov	r0, r6
 8002320:	f7ff fc7e 	bl	8001c20 <__swsetup_r>
 8002324:	b1c0      	cbz	r0, 8002358 <_vfiprintf_r+0x78>
 8002326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002328:	07dc      	lsls	r4, r3, #31
 800232a:	d50e      	bpl.n	800234a <_vfiprintf_r+0x6a>
 800232c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002330:	b01d      	add	sp, #116	; 0x74
 8002332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002336:	4b7b      	ldr	r3, [pc, #492]	; (8002524 <_vfiprintf_r+0x244>)
 8002338:	429d      	cmp	r5, r3
 800233a:	d101      	bne.n	8002340 <_vfiprintf_r+0x60>
 800233c:	68b5      	ldr	r5, [r6, #8]
 800233e:	e7df      	b.n	8002300 <_vfiprintf_r+0x20>
 8002340:	4b79      	ldr	r3, [pc, #484]	; (8002528 <_vfiprintf_r+0x248>)
 8002342:	429d      	cmp	r5, r3
 8002344:	bf08      	it	eq
 8002346:	68f5      	ldreq	r5, [r6, #12]
 8002348:	e7da      	b.n	8002300 <_vfiprintf_r+0x20>
 800234a:	89ab      	ldrh	r3, [r5, #12]
 800234c:	0598      	lsls	r0, r3, #22
 800234e:	d4ed      	bmi.n	800232c <_vfiprintf_r+0x4c>
 8002350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002352:	f7ff fe8c 	bl	800206e <__retarget_lock_release_recursive>
 8002356:	e7e9      	b.n	800232c <_vfiprintf_r+0x4c>
 8002358:	2300      	movs	r3, #0
 800235a:	9309      	str	r3, [sp, #36]	; 0x24
 800235c:	2320      	movs	r3, #32
 800235e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002362:	f8cd 800c 	str.w	r8, [sp, #12]
 8002366:	2330      	movs	r3, #48	; 0x30
 8002368:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800252c <_vfiprintf_r+0x24c>
 800236c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002370:	f04f 0901 	mov.w	r9, #1
 8002374:	4623      	mov	r3, r4
 8002376:	469a      	mov	sl, r3
 8002378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800237c:	b10a      	cbz	r2, 8002382 <_vfiprintf_r+0xa2>
 800237e:	2a25      	cmp	r2, #37	; 0x25
 8002380:	d1f9      	bne.n	8002376 <_vfiprintf_r+0x96>
 8002382:	ebba 0b04 	subs.w	fp, sl, r4
 8002386:	d00b      	beq.n	80023a0 <_vfiprintf_r+0xc0>
 8002388:	465b      	mov	r3, fp
 800238a:	4622      	mov	r2, r4
 800238c:	4629      	mov	r1, r5
 800238e:	4630      	mov	r0, r6
 8002390:	f7ff ff93 	bl	80022ba <__sfputs_r>
 8002394:	3001      	adds	r0, #1
 8002396:	f000 80aa 	beq.w	80024ee <_vfiprintf_r+0x20e>
 800239a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800239c:	445a      	add	r2, fp
 800239e:	9209      	str	r2, [sp, #36]	; 0x24
 80023a0:	f89a 3000 	ldrb.w	r3, [sl]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a2 	beq.w	80024ee <_vfiprintf_r+0x20e>
 80023aa:	2300      	movs	r3, #0
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023b4:	f10a 0a01 	add.w	sl, sl, #1
 80023b8:	9304      	str	r3, [sp, #16]
 80023ba:	9307      	str	r3, [sp, #28]
 80023bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023c0:	931a      	str	r3, [sp, #104]	; 0x68
 80023c2:	4654      	mov	r4, sl
 80023c4:	2205      	movs	r2, #5
 80023c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023ca:	4858      	ldr	r0, [pc, #352]	; (800252c <_vfiprintf_r+0x24c>)
 80023cc:	f7fd ff00 	bl	80001d0 <memchr>
 80023d0:	9a04      	ldr	r2, [sp, #16]
 80023d2:	b9d8      	cbnz	r0, 800240c <_vfiprintf_r+0x12c>
 80023d4:	06d1      	lsls	r1, r2, #27
 80023d6:	bf44      	itt	mi
 80023d8:	2320      	movmi	r3, #32
 80023da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023de:	0713      	lsls	r3, r2, #28
 80023e0:	bf44      	itt	mi
 80023e2:	232b      	movmi	r3, #43	; 0x2b
 80023e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023e8:	f89a 3000 	ldrb.w	r3, [sl]
 80023ec:	2b2a      	cmp	r3, #42	; 0x2a
 80023ee:	d015      	beq.n	800241c <_vfiprintf_r+0x13c>
 80023f0:	9a07      	ldr	r2, [sp, #28]
 80023f2:	4654      	mov	r4, sl
 80023f4:	2000      	movs	r0, #0
 80023f6:	f04f 0c0a 	mov.w	ip, #10
 80023fa:	4621      	mov	r1, r4
 80023fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002400:	3b30      	subs	r3, #48	; 0x30
 8002402:	2b09      	cmp	r3, #9
 8002404:	d94e      	bls.n	80024a4 <_vfiprintf_r+0x1c4>
 8002406:	b1b0      	cbz	r0, 8002436 <_vfiprintf_r+0x156>
 8002408:	9207      	str	r2, [sp, #28]
 800240a:	e014      	b.n	8002436 <_vfiprintf_r+0x156>
 800240c:	eba0 0308 	sub.w	r3, r0, r8
 8002410:	fa09 f303 	lsl.w	r3, r9, r3
 8002414:	4313      	orrs	r3, r2
 8002416:	9304      	str	r3, [sp, #16]
 8002418:	46a2      	mov	sl, r4
 800241a:	e7d2      	b.n	80023c2 <_vfiprintf_r+0xe2>
 800241c:	9b03      	ldr	r3, [sp, #12]
 800241e:	1d19      	adds	r1, r3, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	9103      	str	r1, [sp, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	bfbb      	ittet	lt
 8002428:	425b      	neglt	r3, r3
 800242a:	f042 0202 	orrlt.w	r2, r2, #2
 800242e:	9307      	strge	r3, [sp, #28]
 8002430:	9307      	strlt	r3, [sp, #28]
 8002432:	bfb8      	it	lt
 8002434:	9204      	strlt	r2, [sp, #16]
 8002436:	7823      	ldrb	r3, [r4, #0]
 8002438:	2b2e      	cmp	r3, #46	; 0x2e
 800243a:	d10c      	bne.n	8002456 <_vfiprintf_r+0x176>
 800243c:	7863      	ldrb	r3, [r4, #1]
 800243e:	2b2a      	cmp	r3, #42	; 0x2a
 8002440:	d135      	bne.n	80024ae <_vfiprintf_r+0x1ce>
 8002442:	9b03      	ldr	r3, [sp, #12]
 8002444:	1d1a      	adds	r2, r3, #4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	9203      	str	r2, [sp, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	bfb8      	it	lt
 800244e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002452:	3402      	adds	r4, #2
 8002454:	9305      	str	r3, [sp, #20]
 8002456:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800253c <_vfiprintf_r+0x25c>
 800245a:	7821      	ldrb	r1, [r4, #0]
 800245c:	2203      	movs	r2, #3
 800245e:	4650      	mov	r0, sl
 8002460:	f7fd feb6 	bl	80001d0 <memchr>
 8002464:	b140      	cbz	r0, 8002478 <_vfiprintf_r+0x198>
 8002466:	2340      	movs	r3, #64	; 0x40
 8002468:	eba0 000a 	sub.w	r0, r0, sl
 800246c:	fa03 f000 	lsl.w	r0, r3, r0
 8002470:	9b04      	ldr	r3, [sp, #16]
 8002472:	4303      	orrs	r3, r0
 8002474:	3401      	adds	r4, #1
 8002476:	9304      	str	r3, [sp, #16]
 8002478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800247c:	482c      	ldr	r0, [pc, #176]	; (8002530 <_vfiprintf_r+0x250>)
 800247e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002482:	2206      	movs	r2, #6
 8002484:	f7fd fea4 	bl	80001d0 <memchr>
 8002488:	2800      	cmp	r0, #0
 800248a:	d03f      	beq.n	800250c <_vfiprintf_r+0x22c>
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <_vfiprintf_r+0x254>)
 800248e:	bb1b      	cbnz	r3, 80024d8 <_vfiprintf_r+0x1f8>
 8002490:	9b03      	ldr	r3, [sp, #12]
 8002492:	3307      	adds	r3, #7
 8002494:	f023 0307 	bic.w	r3, r3, #7
 8002498:	3308      	adds	r3, #8
 800249a:	9303      	str	r3, [sp, #12]
 800249c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800249e:	443b      	add	r3, r7
 80024a0:	9309      	str	r3, [sp, #36]	; 0x24
 80024a2:	e767      	b.n	8002374 <_vfiprintf_r+0x94>
 80024a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80024a8:	460c      	mov	r4, r1
 80024aa:	2001      	movs	r0, #1
 80024ac:	e7a5      	b.n	80023fa <_vfiprintf_r+0x11a>
 80024ae:	2300      	movs	r3, #0
 80024b0:	3401      	adds	r4, #1
 80024b2:	9305      	str	r3, [sp, #20]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f04f 0c0a 	mov.w	ip, #10
 80024ba:	4620      	mov	r0, r4
 80024bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024c0:	3a30      	subs	r2, #48	; 0x30
 80024c2:	2a09      	cmp	r2, #9
 80024c4:	d903      	bls.n	80024ce <_vfiprintf_r+0x1ee>
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0c5      	beq.n	8002456 <_vfiprintf_r+0x176>
 80024ca:	9105      	str	r1, [sp, #20]
 80024cc:	e7c3      	b.n	8002456 <_vfiprintf_r+0x176>
 80024ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80024d2:	4604      	mov	r4, r0
 80024d4:	2301      	movs	r3, #1
 80024d6:	e7f0      	b.n	80024ba <_vfiprintf_r+0x1da>
 80024d8:	ab03      	add	r3, sp, #12
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	462a      	mov	r2, r5
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <_vfiprintf_r+0x258>)
 80024e0:	a904      	add	r1, sp, #16
 80024e2:	4630      	mov	r0, r6
 80024e4:	f3af 8000 	nop.w
 80024e8:	4607      	mov	r7, r0
 80024ea:	1c78      	adds	r0, r7, #1
 80024ec:	d1d6      	bne.n	800249c <_vfiprintf_r+0x1bc>
 80024ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80024f0:	07d9      	lsls	r1, r3, #31
 80024f2:	d405      	bmi.n	8002500 <_vfiprintf_r+0x220>
 80024f4:	89ab      	ldrh	r3, [r5, #12]
 80024f6:	059a      	lsls	r2, r3, #22
 80024f8:	d402      	bmi.n	8002500 <_vfiprintf_r+0x220>
 80024fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80024fc:	f7ff fdb7 	bl	800206e <__retarget_lock_release_recursive>
 8002500:	89ab      	ldrh	r3, [r5, #12]
 8002502:	065b      	lsls	r3, r3, #25
 8002504:	f53f af12 	bmi.w	800232c <_vfiprintf_r+0x4c>
 8002508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800250a:	e711      	b.n	8002330 <_vfiprintf_r+0x50>
 800250c:	ab03      	add	r3, sp, #12
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	462a      	mov	r2, r5
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <_vfiprintf_r+0x258>)
 8002514:	a904      	add	r1, sp, #16
 8002516:	4630      	mov	r0, r6
 8002518:	f000 f880 	bl	800261c <_printf_i>
 800251c:	e7e4      	b.n	80024e8 <_vfiprintf_r+0x208>
 800251e:	bf00      	nop
 8002520:	08002a78 	.word	0x08002a78
 8002524:	08002a98 	.word	0x08002a98
 8002528:	08002a58 	.word	0x08002a58
 800252c:	08002ab8 	.word	0x08002ab8
 8002530:	08002ac2 	.word	0x08002ac2
 8002534:	00000000 	.word	0x00000000
 8002538:	080022bb 	.word	0x080022bb
 800253c:	08002abe 	.word	0x08002abe

08002540 <_printf_common>:
 8002540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002544:	4616      	mov	r6, r2
 8002546:	4699      	mov	r9, r3
 8002548:	688a      	ldr	r2, [r1, #8]
 800254a:	690b      	ldr	r3, [r1, #16]
 800254c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002550:	4293      	cmp	r3, r2
 8002552:	bfb8      	it	lt
 8002554:	4613      	movlt	r3, r2
 8002556:	6033      	str	r3, [r6, #0]
 8002558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800255c:	4607      	mov	r7, r0
 800255e:	460c      	mov	r4, r1
 8002560:	b10a      	cbz	r2, 8002566 <_printf_common+0x26>
 8002562:	3301      	adds	r3, #1
 8002564:	6033      	str	r3, [r6, #0]
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	0699      	lsls	r1, r3, #26
 800256a:	bf42      	ittt	mi
 800256c:	6833      	ldrmi	r3, [r6, #0]
 800256e:	3302      	addmi	r3, #2
 8002570:	6033      	strmi	r3, [r6, #0]
 8002572:	6825      	ldr	r5, [r4, #0]
 8002574:	f015 0506 	ands.w	r5, r5, #6
 8002578:	d106      	bne.n	8002588 <_printf_common+0x48>
 800257a:	f104 0a19 	add.w	sl, r4, #25
 800257e:	68e3      	ldr	r3, [r4, #12]
 8002580:	6832      	ldr	r2, [r6, #0]
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	42ab      	cmp	r3, r5
 8002586:	dc26      	bgt.n	80025d6 <_printf_common+0x96>
 8002588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800258c:	1e13      	subs	r3, r2, #0
 800258e:	6822      	ldr	r2, [r4, #0]
 8002590:	bf18      	it	ne
 8002592:	2301      	movne	r3, #1
 8002594:	0692      	lsls	r2, r2, #26
 8002596:	d42b      	bmi.n	80025f0 <_printf_common+0xb0>
 8002598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800259c:	4649      	mov	r1, r9
 800259e:	4638      	mov	r0, r7
 80025a0:	47c0      	blx	r8
 80025a2:	3001      	adds	r0, #1
 80025a4:	d01e      	beq.n	80025e4 <_printf_common+0xa4>
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	68e5      	ldr	r5, [r4, #12]
 80025aa:	6832      	ldr	r2, [r6, #0]
 80025ac:	f003 0306 	and.w	r3, r3, #6
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	bf08      	it	eq
 80025b4:	1aad      	subeq	r5, r5, r2
 80025b6:	68a3      	ldr	r3, [r4, #8]
 80025b8:	6922      	ldr	r2, [r4, #16]
 80025ba:	bf0c      	ite	eq
 80025bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025c0:	2500      	movne	r5, #0
 80025c2:	4293      	cmp	r3, r2
 80025c4:	bfc4      	itt	gt
 80025c6:	1a9b      	subgt	r3, r3, r2
 80025c8:	18ed      	addgt	r5, r5, r3
 80025ca:	2600      	movs	r6, #0
 80025cc:	341a      	adds	r4, #26
 80025ce:	42b5      	cmp	r5, r6
 80025d0:	d11a      	bne.n	8002608 <_printf_common+0xc8>
 80025d2:	2000      	movs	r0, #0
 80025d4:	e008      	b.n	80025e8 <_printf_common+0xa8>
 80025d6:	2301      	movs	r3, #1
 80025d8:	4652      	mov	r2, sl
 80025da:	4649      	mov	r1, r9
 80025dc:	4638      	mov	r0, r7
 80025de:	47c0      	blx	r8
 80025e0:	3001      	adds	r0, #1
 80025e2:	d103      	bne.n	80025ec <_printf_common+0xac>
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025ec:	3501      	adds	r5, #1
 80025ee:	e7c6      	b.n	800257e <_printf_common+0x3e>
 80025f0:	18e1      	adds	r1, r4, r3
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	2030      	movs	r0, #48	; 0x30
 80025f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025fa:	4422      	add	r2, r4
 80025fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002604:	3302      	adds	r3, #2
 8002606:	e7c7      	b.n	8002598 <_printf_common+0x58>
 8002608:	2301      	movs	r3, #1
 800260a:	4622      	mov	r2, r4
 800260c:	4649      	mov	r1, r9
 800260e:	4638      	mov	r0, r7
 8002610:	47c0      	blx	r8
 8002612:	3001      	adds	r0, #1
 8002614:	d0e6      	beq.n	80025e4 <_printf_common+0xa4>
 8002616:	3601      	adds	r6, #1
 8002618:	e7d9      	b.n	80025ce <_printf_common+0x8e>
	...

0800261c <_printf_i>:
 800261c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002620:	460c      	mov	r4, r1
 8002622:	4691      	mov	r9, r2
 8002624:	7e27      	ldrb	r7, [r4, #24]
 8002626:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002628:	2f78      	cmp	r7, #120	; 0x78
 800262a:	4680      	mov	r8, r0
 800262c:	469a      	mov	sl, r3
 800262e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002632:	d807      	bhi.n	8002644 <_printf_i+0x28>
 8002634:	2f62      	cmp	r7, #98	; 0x62
 8002636:	d80a      	bhi.n	800264e <_printf_i+0x32>
 8002638:	2f00      	cmp	r7, #0
 800263a:	f000 80d8 	beq.w	80027ee <_printf_i+0x1d2>
 800263e:	2f58      	cmp	r7, #88	; 0x58
 8002640:	f000 80a3 	beq.w	800278a <_printf_i+0x16e>
 8002644:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800264c:	e03a      	b.n	80026c4 <_printf_i+0xa8>
 800264e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002652:	2b15      	cmp	r3, #21
 8002654:	d8f6      	bhi.n	8002644 <_printf_i+0x28>
 8002656:	a001      	add	r0, pc, #4	; (adr r0, 800265c <_printf_i+0x40>)
 8002658:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800265c:	080026b5 	.word	0x080026b5
 8002660:	080026c9 	.word	0x080026c9
 8002664:	08002645 	.word	0x08002645
 8002668:	08002645 	.word	0x08002645
 800266c:	08002645 	.word	0x08002645
 8002670:	08002645 	.word	0x08002645
 8002674:	080026c9 	.word	0x080026c9
 8002678:	08002645 	.word	0x08002645
 800267c:	08002645 	.word	0x08002645
 8002680:	08002645 	.word	0x08002645
 8002684:	08002645 	.word	0x08002645
 8002688:	080027d5 	.word	0x080027d5
 800268c:	080026f9 	.word	0x080026f9
 8002690:	080027b7 	.word	0x080027b7
 8002694:	08002645 	.word	0x08002645
 8002698:	08002645 	.word	0x08002645
 800269c:	080027f7 	.word	0x080027f7
 80026a0:	08002645 	.word	0x08002645
 80026a4:	080026f9 	.word	0x080026f9
 80026a8:	08002645 	.word	0x08002645
 80026ac:	08002645 	.word	0x08002645
 80026b0:	080027bf 	.word	0x080027bf
 80026b4:	680b      	ldr	r3, [r1, #0]
 80026b6:	1d1a      	adds	r2, r3, #4
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	600a      	str	r2, [r1, #0]
 80026bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80026c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0a3      	b.n	8002810 <_printf_i+0x1f4>
 80026c8:	6825      	ldr	r5, [r4, #0]
 80026ca:	6808      	ldr	r0, [r1, #0]
 80026cc:	062e      	lsls	r6, r5, #24
 80026ce:	f100 0304 	add.w	r3, r0, #4
 80026d2:	d50a      	bpl.n	80026ea <_printf_i+0xce>
 80026d4:	6805      	ldr	r5, [r0, #0]
 80026d6:	600b      	str	r3, [r1, #0]
 80026d8:	2d00      	cmp	r5, #0
 80026da:	da03      	bge.n	80026e4 <_printf_i+0xc8>
 80026dc:	232d      	movs	r3, #45	; 0x2d
 80026de:	426d      	negs	r5, r5
 80026e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026e4:	485e      	ldr	r0, [pc, #376]	; (8002860 <_printf_i+0x244>)
 80026e6:	230a      	movs	r3, #10
 80026e8:	e019      	b.n	800271e <_printf_i+0x102>
 80026ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80026ee:	6805      	ldr	r5, [r0, #0]
 80026f0:	600b      	str	r3, [r1, #0]
 80026f2:	bf18      	it	ne
 80026f4:	b22d      	sxthne	r5, r5
 80026f6:	e7ef      	b.n	80026d8 <_printf_i+0xbc>
 80026f8:	680b      	ldr	r3, [r1, #0]
 80026fa:	6825      	ldr	r5, [r4, #0]
 80026fc:	1d18      	adds	r0, r3, #4
 80026fe:	6008      	str	r0, [r1, #0]
 8002700:	0628      	lsls	r0, r5, #24
 8002702:	d501      	bpl.n	8002708 <_printf_i+0xec>
 8002704:	681d      	ldr	r5, [r3, #0]
 8002706:	e002      	b.n	800270e <_printf_i+0xf2>
 8002708:	0669      	lsls	r1, r5, #25
 800270a:	d5fb      	bpl.n	8002704 <_printf_i+0xe8>
 800270c:	881d      	ldrh	r5, [r3, #0]
 800270e:	4854      	ldr	r0, [pc, #336]	; (8002860 <_printf_i+0x244>)
 8002710:	2f6f      	cmp	r7, #111	; 0x6f
 8002712:	bf0c      	ite	eq
 8002714:	2308      	moveq	r3, #8
 8002716:	230a      	movne	r3, #10
 8002718:	2100      	movs	r1, #0
 800271a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800271e:	6866      	ldr	r6, [r4, #4]
 8002720:	60a6      	str	r6, [r4, #8]
 8002722:	2e00      	cmp	r6, #0
 8002724:	bfa2      	ittt	ge
 8002726:	6821      	ldrge	r1, [r4, #0]
 8002728:	f021 0104 	bicge.w	r1, r1, #4
 800272c:	6021      	strge	r1, [r4, #0]
 800272e:	b90d      	cbnz	r5, 8002734 <_printf_i+0x118>
 8002730:	2e00      	cmp	r6, #0
 8002732:	d04d      	beq.n	80027d0 <_printf_i+0x1b4>
 8002734:	4616      	mov	r6, r2
 8002736:	fbb5 f1f3 	udiv	r1, r5, r3
 800273a:	fb03 5711 	mls	r7, r3, r1, r5
 800273e:	5dc7      	ldrb	r7, [r0, r7]
 8002740:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002744:	462f      	mov	r7, r5
 8002746:	42bb      	cmp	r3, r7
 8002748:	460d      	mov	r5, r1
 800274a:	d9f4      	bls.n	8002736 <_printf_i+0x11a>
 800274c:	2b08      	cmp	r3, #8
 800274e:	d10b      	bne.n	8002768 <_printf_i+0x14c>
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	07df      	lsls	r7, r3, #31
 8002754:	d508      	bpl.n	8002768 <_printf_i+0x14c>
 8002756:	6923      	ldr	r3, [r4, #16]
 8002758:	6861      	ldr	r1, [r4, #4]
 800275a:	4299      	cmp	r1, r3
 800275c:	bfde      	ittt	le
 800275e:	2330      	movle	r3, #48	; 0x30
 8002760:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002764:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002768:	1b92      	subs	r2, r2, r6
 800276a:	6122      	str	r2, [r4, #16]
 800276c:	f8cd a000 	str.w	sl, [sp]
 8002770:	464b      	mov	r3, r9
 8002772:	aa03      	add	r2, sp, #12
 8002774:	4621      	mov	r1, r4
 8002776:	4640      	mov	r0, r8
 8002778:	f7ff fee2 	bl	8002540 <_printf_common>
 800277c:	3001      	adds	r0, #1
 800277e:	d14c      	bne.n	800281a <_printf_i+0x1fe>
 8002780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002784:	b004      	add	sp, #16
 8002786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800278a:	4835      	ldr	r0, [pc, #212]	; (8002860 <_printf_i+0x244>)
 800278c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	680e      	ldr	r6, [r1, #0]
 8002794:	061f      	lsls	r7, r3, #24
 8002796:	f856 5b04 	ldr.w	r5, [r6], #4
 800279a:	600e      	str	r6, [r1, #0]
 800279c:	d514      	bpl.n	80027c8 <_printf_i+0x1ac>
 800279e:	07d9      	lsls	r1, r3, #31
 80027a0:	bf44      	itt	mi
 80027a2:	f043 0320 	orrmi.w	r3, r3, #32
 80027a6:	6023      	strmi	r3, [r4, #0]
 80027a8:	b91d      	cbnz	r5, 80027b2 <_printf_i+0x196>
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	f023 0320 	bic.w	r3, r3, #32
 80027b0:	6023      	str	r3, [r4, #0]
 80027b2:	2310      	movs	r3, #16
 80027b4:	e7b0      	b.n	8002718 <_printf_i+0xfc>
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	f043 0320 	orr.w	r3, r3, #32
 80027bc:	6023      	str	r3, [r4, #0]
 80027be:	2378      	movs	r3, #120	; 0x78
 80027c0:	4828      	ldr	r0, [pc, #160]	; (8002864 <_printf_i+0x248>)
 80027c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027c6:	e7e3      	b.n	8002790 <_printf_i+0x174>
 80027c8:	065e      	lsls	r6, r3, #25
 80027ca:	bf48      	it	mi
 80027cc:	b2ad      	uxthmi	r5, r5
 80027ce:	e7e6      	b.n	800279e <_printf_i+0x182>
 80027d0:	4616      	mov	r6, r2
 80027d2:	e7bb      	b.n	800274c <_printf_i+0x130>
 80027d4:	680b      	ldr	r3, [r1, #0]
 80027d6:	6826      	ldr	r6, [r4, #0]
 80027d8:	6960      	ldr	r0, [r4, #20]
 80027da:	1d1d      	adds	r5, r3, #4
 80027dc:	600d      	str	r5, [r1, #0]
 80027de:	0635      	lsls	r5, r6, #24
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	d501      	bpl.n	80027e8 <_printf_i+0x1cc>
 80027e4:	6018      	str	r0, [r3, #0]
 80027e6:	e002      	b.n	80027ee <_printf_i+0x1d2>
 80027e8:	0671      	lsls	r1, r6, #25
 80027ea:	d5fb      	bpl.n	80027e4 <_printf_i+0x1c8>
 80027ec:	8018      	strh	r0, [r3, #0]
 80027ee:	2300      	movs	r3, #0
 80027f0:	6123      	str	r3, [r4, #16]
 80027f2:	4616      	mov	r6, r2
 80027f4:	e7ba      	b.n	800276c <_printf_i+0x150>
 80027f6:	680b      	ldr	r3, [r1, #0]
 80027f8:	1d1a      	adds	r2, r3, #4
 80027fa:	600a      	str	r2, [r1, #0]
 80027fc:	681e      	ldr	r6, [r3, #0]
 80027fe:	6862      	ldr	r2, [r4, #4]
 8002800:	2100      	movs	r1, #0
 8002802:	4630      	mov	r0, r6
 8002804:	f7fd fce4 	bl	80001d0 <memchr>
 8002808:	b108      	cbz	r0, 800280e <_printf_i+0x1f2>
 800280a:	1b80      	subs	r0, r0, r6
 800280c:	6060      	str	r0, [r4, #4]
 800280e:	6863      	ldr	r3, [r4, #4]
 8002810:	6123      	str	r3, [r4, #16]
 8002812:	2300      	movs	r3, #0
 8002814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002818:	e7a8      	b.n	800276c <_printf_i+0x150>
 800281a:	6923      	ldr	r3, [r4, #16]
 800281c:	4632      	mov	r2, r6
 800281e:	4649      	mov	r1, r9
 8002820:	4640      	mov	r0, r8
 8002822:	47d0      	blx	sl
 8002824:	3001      	adds	r0, #1
 8002826:	d0ab      	beq.n	8002780 <_printf_i+0x164>
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	079b      	lsls	r3, r3, #30
 800282c:	d413      	bmi.n	8002856 <_printf_i+0x23a>
 800282e:	68e0      	ldr	r0, [r4, #12]
 8002830:	9b03      	ldr	r3, [sp, #12]
 8002832:	4298      	cmp	r0, r3
 8002834:	bfb8      	it	lt
 8002836:	4618      	movlt	r0, r3
 8002838:	e7a4      	b.n	8002784 <_printf_i+0x168>
 800283a:	2301      	movs	r3, #1
 800283c:	4632      	mov	r2, r6
 800283e:	4649      	mov	r1, r9
 8002840:	4640      	mov	r0, r8
 8002842:	47d0      	blx	sl
 8002844:	3001      	adds	r0, #1
 8002846:	d09b      	beq.n	8002780 <_printf_i+0x164>
 8002848:	3501      	adds	r5, #1
 800284a:	68e3      	ldr	r3, [r4, #12]
 800284c:	9903      	ldr	r1, [sp, #12]
 800284e:	1a5b      	subs	r3, r3, r1
 8002850:	42ab      	cmp	r3, r5
 8002852:	dcf2      	bgt.n	800283a <_printf_i+0x21e>
 8002854:	e7eb      	b.n	800282e <_printf_i+0x212>
 8002856:	2500      	movs	r5, #0
 8002858:	f104 0619 	add.w	r6, r4, #25
 800285c:	e7f5      	b.n	800284a <_printf_i+0x22e>
 800285e:	bf00      	nop
 8002860:	08002ac9 	.word	0x08002ac9
 8002864:	08002ada 	.word	0x08002ada

08002868 <_sbrk_r>:
 8002868:	b538      	push	{r3, r4, r5, lr}
 800286a:	4d06      	ldr	r5, [pc, #24]	; (8002884 <_sbrk_r+0x1c>)
 800286c:	2300      	movs	r3, #0
 800286e:	4604      	mov	r4, r0
 8002870:	4608      	mov	r0, r1
 8002872:	602b      	str	r3, [r5, #0]
 8002874:	f7fd fffc 	bl	8000870 <_sbrk>
 8002878:	1c43      	adds	r3, r0, #1
 800287a:	d102      	bne.n	8002882 <_sbrk_r+0x1a>
 800287c:	682b      	ldr	r3, [r5, #0]
 800287e:	b103      	cbz	r3, 8002882 <_sbrk_r+0x1a>
 8002880:	6023      	str	r3, [r4, #0]
 8002882:	bd38      	pop	{r3, r4, r5, pc}
 8002884:	200000ec 	.word	0x200000ec

08002888 <__sread>:
 8002888:	b510      	push	{r4, lr}
 800288a:	460c      	mov	r4, r1
 800288c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002890:	f000 f8a0 	bl	80029d4 <_read_r>
 8002894:	2800      	cmp	r0, #0
 8002896:	bfab      	itete	ge
 8002898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800289a:	89a3      	ldrhlt	r3, [r4, #12]
 800289c:	181b      	addge	r3, r3, r0
 800289e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80028a2:	bfac      	ite	ge
 80028a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80028a6:	81a3      	strhlt	r3, [r4, #12]
 80028a8:	bd10      	pop	{r4, pc}

080028aa <__swrite>:
 80028aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ae:	461f      	mov	r7, r3
 80028b0:	898b      	ldrh	r3, [r1, #12]
 80028b2:	05db      	lsls	r3, r3, #23
 80028b4:	4605      	mov	r5, r0
 80028b6:	460c      	mov	r4, r1
 80028b8:	4616      	mov	r6, r2
 80028ba:	d505      	bpl.n	80028c8 <__swrite+0x1e>
 80028bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028c0:	2302      	movs	r3, #2
 80028c2:	2200      	movs	r2, #0
 80028c4:	f000 f868 	bl	8002998 <_lseek_r>
 80028c8:	89a3      	ldrh	r3, [r4, #12]
 80028ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028d2:	81a3      	strh	r3, [r4, #12]
 80028d4:	4632      	mov	r2, r6
 80028d6:	463b      	mov	r3, r7
 80028d8:	4628      	mov	r0, r5
 80028da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028de:	f000 b817 	b.w	8002910 <_write_r>

080028e2 <__sseek>:
 80028e2:	b510      	push	{r4, lr}
 80028e4:	460c      	mov	r4, r1
 80028e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028ea:	f000 f855 	bl	8002998 <_lseek_r>
 80028ee:	1c43      	adds	r3, r0, #1
 80028f0:	89a3      	ldrh	r3, [r4, #12]
 80028f2:	bf15      	itete	ne
 80028f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80028f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80028fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80028fe:	81a3      	strheq	r3, [r4, #12]
 8002900:	bf18      	it	ne
 8002902:	81a3      	strhne	r3, [r4, #12]
 8002904:	bd10      	pop	{r4, pc}

08002906 <__sclose>:
 8002906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800290a:	f000 b813 	b.w	8002934 <_close_r>
	...

08002910 <_write_r>:
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	4d07      	ldr	r5, [pc, #28]	; (8002930 <_write_r+0x20>)
 8002914:	4604      	mov	r4, r0
 8002916:	4608      	mov	r0, r1
 8002918:	4611      	mov	r1, r2
 800291a:	2200      	movs	r2, #0
 800291c:	602a      	str	r2, [r5, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	f7fd fe62 	bl	80005e8 <_write>
 8002924:	1c43      	adds	r3, r0, #1
 8002926:	d102      	bne.n	800292e <_write_r+0x1e>
 8002928:	682b      	ldr	r3, [r5, #0]
 800292a:	b103      	cbz	r3, 800292e <_write_r+0x1e>
 800292c:	6023      	str	r3, [r4, #0]
 800292e:	bd38      	pop	{r3, r4, r5, pc}
 8002930:	200000ec 	.word	0x200000ec

08002934 <_close_r>:
 8002934:	b538      	push	{r3, r4, r5, lr}
 8002936:	4d06      	ldr	r5, [pc, #24]	; (8002950 <_close_r+0x1c>)
 8002938:	2300      	movs	r3, #0
 800293a:	4604      	mov	r4, r0
 800293c:	4608      	mov	r0, r1
 800293e:	602b      	str	r3, [r5, #0]
 8002940:	f7fd ff8a 	bl	8000858 <_close>
 8002944:	1c43      	adds	r3, r0, #1
 8002946:	d102      	bne.n	800294e <_close_r+0x1a>
 8002948:	682b      	ldr	r3, [r5, #0]
 800294a:	b103      	cbz	r3, 800294e <_close_r+0x1a>
 800294c:	6023      	str	r3, [r4, #0]
 800294e:	bd38      	pop	{r3, r4, r5, pc}
 8002950:	200000ec 	.word	0x200000ec

08002954 <_fstat_r>:
 8002954:	b538      	push	{r3, r4, r5, lr}
 8002956:	4d07      	ldr	r5, [pc, #28]	; (8002974 <_fstat_r+0x20>)
 8002958:	2300      	movs	r3, #0
 800295a:	4604      	mov	r4, r0
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	602b      	str	r3, [r5, #0]
 8002962:	f7fd ff7c 	bl	800085e <_fstat>
 8002966:	1c43      	adds	r3, r0, #1
 8002968:	d102      	bne.n	8002970 <_fstat_r+0x1c>
 800296a:	682b      	ldr	r3, [r5, #0]
 800296c:	b103      	cbz	r3, 8002970 <_fstat_r+0x1c>
 800296e:	6023      	str	r3, [r4, #0]
 8002970:	bd38      	pop	{r3, r4, r5, pc}
 8002972:	bf00      	nop
 8002974:	200000ec 	.word	0x200000ec

08002978 <_isatty_r>:
 8002978:	b538      	push	{r3, r4, r5, lr}
 800297a:	4d06      	ldr	r5, [pc, #24]	; (8002994 <_isatty_r+0x1c>)
 800297c:	2300      	movs	r3, #0
 800297e:	4604      	mov	r4, r0
 8002980:	4608      	mov	r0, r1
 8002982:	602b      	str	r3, [r5, #0]
 8002984:	f7fd ff70 	bl	8000868 <_isatty>
 8002988:	1c43      	adds	r3, r0, #1
 800298a:	d102      	bne.n	8002992 <_isatty_r+0x1a>
 800298c:	682b      	ldr	r3, [r5, #0]
 800298e:	b103      	cbz	r3, 8002992 <_isatty_r+0x1a>
 8002990:	6023      	str	r3, [r4, #0]
 8002992:	bd38      	pop	{r3, r4, r5, pc}
 8002994:	200000ec 	.word	0x200000ec

08002998 <_lseek_r>:
 8002998:	b538      	push	{r3, r4, r5, lr}
 800299a:	4d07      	ldr	r5, [pc, #28]	; (80029b8 <_lseek_r+0x20>)
 800299c:	4604      	mov	r4, r0
 800299e:	4608      	mov	r0, r1
 80029a0:	4611      	mov	r1, r2
 80029a2:	2200      	movs	r2, #0
 80029a4:	602a      	str	r2, [r5, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	f7fd ff60 	bl	800086c <_lseek>
 80029ac:	1c43      	adds	r3, r0, #1
 80029ae:	d102      	bne.n	80029b6 <_lseek_r+0x1e>
 80029b0:	682b      	ldr	r3, [r5, #0]
 80029b2:	b103      	cbz	r3, 80029b6 <_lseek_r+0x1e>
 80029b4:	6023      	str	r3, [r4, #0]
 80029b6:	bd38      	pop	{r3, r4, r5, pc}
 80029b8:	200000ec 	.word	0x200000ec

080029bc <__malloc_lock>:
 80029bc:	4801      	ldr	r0, [pc, #4]	; (80029c4 <__malloc_lock+0x8>)
 80029be:	f7ff bb55 	b.w	800206c <__retarget_lock_acquire_recursive>
 80029c2:	bf00      	nop
 80029c4:	200000e4 	.word	0x200000e4

080029c8 <__malloc_unlock>:
 80029c8:	4801      	ldr	r0, [pc, #4]	; (80029d0 <__malloc_unlock+0x8>)
 80029ca:	f7ff bb50 	b.w	800206e <__retarget_lock_release_recursive>
 80029ce:	bf00      	nop
 80029d0:	200000e4 	.word	0x200000e4

080029d4 <_read_r>:
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	4d07      	ldr	r5, [pc, #28]	; (80029f4 <_read_r+0x20>)
 80029d8:	4604      	mov	r4, r0
 80029da:	4608      	mov	r0, r1
 80029dc:	4611      	mov	r1, r2
 80029de:	2200      	movs	r2, #0
 80029e0:	602a      	str	r2, [r5, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7fd ff28 	bl	8000838 <_read>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d102      	bne.n	80029f2 <_read_r+0x1e>
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	b103      	cbz	r3, 80029f2 <_read_r+0x1e>
 80029f0:	6023      	str	r3, [r4, #0]
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
 80029f4:	200000ec 	.word	0x200000ec

080029f8 <_init>:
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	bf00      	nop
 80029fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fe:	bc08      	pop	{r3}
 8002a00:	469e      	mov	lr, r3
 8002a02:	4770      	bx	lr

08002a04 <_fini>:
 8002a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a06:	bf00      	nop
 8002a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0a:	bc08      	pop	{r3}
 8002a0c:	469e      	mov	lr, r3
 8002a0e:	4770      	bx	lr
