
ws2812panel2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001018  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800437c  0800437c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004384  08004384  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004388  08004388  00014388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800438c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000070  080043fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080043fc  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a557  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001960  00000000  00000000  0002a5f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  0002bf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000938  00000000  00000000  0002c968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e8b4  00000000  00000000  0002d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d64  00000000  00000000  0004bb54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bbefb  00000000  00000000  000538b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010f7b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a68  00000000  00000000  0010f830  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800334c 	.word	0x0800334c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800334c 	.word	0x0800334c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fb3b 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f86f 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f96d 	bl	80007b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004da:	f000 f94b 	bl	8000774 <MX_DMA_Init>
  MX_TIM3_Init();
 80004de:	f000 f8d3 	bl	8000688 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  ws2812b_init(&htim3, TIM_CHANNEL_1, LED_ROWS, LED_COLS);
 80004e2:	2308      	movs	r3, #8
 80004e4:	2208      	movs	r2, #8
 80004e6:	2100      	movs	r1, #0
 80004e8:	482f      	ldr	r0, [pc, #188]	; (80005a8 <main+0xe0>)
 80004ea:	f002 fe2d 	bl	8003148 <ws2812b_init>

  setLedValues(0, 0, 50, 0, 0);
 80004ee:	2300      	movs	r3, #0
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2300      	movs	r3, #0
 80004f4:	2232      	movs	r2, #50	; 0x32
 80004f6:	2100      	movs	r1, #0
 80004f8:	2000      	movs	r0, #0
 80004fa:	f002 fddf 	bl	80030bc <setLedValues>
  setLedValues(1, 0, 0, 50, 0);
 80004fe:	2300      	movs	r3, #0
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2332      	movs	r3, #50	; 0x32
 8000504:	2200      	movs	r2, #0
 8000506:	2100      	movs	r1, #0
 8000508:	2001      	movs	r0, #1
 800050a:	f002 fdd7 	bl	80030bc <setLedValues>
  setLedValues(2, 0, 0, 0, 50);
 800050e:	2332      	movs	r3, #50	; 0x32
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2200      	movs	r2, #0
 8000516:	2100      	movs	r1, #0
 8000518:	2002      	movs	r0, #2
 800051a:	f002 fdcf 	bl	80030bc <setLedValues>
  setLedValues(3, 0, 50, 0, 50);
 800051e:	2332      	movs	r3, #50	; 0x32
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	2232      	movs	r2, #50	; 0x32
 8000526:	2100      	movs	r1, #0
 8000528:	2003      	movs	r0, #3
 800052a:	f002 fdc7 	bl	80030bc <setLedValues>
  setLedValues(4, 0, 50, 50, 0);
 800052e:	2300      	movs	r3, #0
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2332      	movs	r3, #50	; 0x32
 8000534:	2232      	movs	r2, #50	; 0x32
 8000536:	2100      	movs	r1, #0
 8000538:	2004      	movs	r0, #4
 800053a:	f002 fdbf 	bl	80030bc <setLedValues>
  setLedValues(5, 0, 0, 50, 50);
 800053e:	2332      	movs	r3, #50	; 0x32
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2332      	movs	r3, #50	; 0x32
 8000544:	2200      	movs	r2, #0
 8000546:	2100      	movs	r1, #0
 8000548:	2005      	movs	r0, #5
 800054a:	f002 fdb7 	bl	80030bc <setLedValues>
  setLedValues(6, 0, 10, 10, 10);
 800054e:	230a      	movs	r3, #10
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	230a      	movs	r3, #10
 8000554:	220a      	movs	r2, #10
 8000556:	2100      	movs	r1, #0
 8000558:	2006      	movs	r0, #6
 800055a:	f002 fdaf 	bl	80030bc <setLedValues>
  setLedValues(7, 0, 50, 50, 50);
 800055e:	2332      	movs	r3, #50	; 0x32
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2332      	movs	r3, #50	; 0x32
 8000564:	2232      	movs	r2, #50	; 0x32
 8000566:	2100      	movs	r1, #0
 8000568:	2007      	movs	r0, #7
 800056a:	f002 fda7 	bl	80030bc <setLedValues>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t then = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
  uint32_t now;

  while (1)
  {

	now = HAL_GetTick();
 8000572:	f000 fb4f 	bl	8000c14 <HAL_GetTick>
 8000576:	6038      	str	r0, [r7, #0]
	if (now % 100 == 0 && now != then) {
 8000578:	683a      	ldr	r2, [r7, #0]
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <main+0xe4>)
 800057c:	fba3 1302 	umull	r1, r3, r3, r2
 8000580:	095b      	lsrs	r3, r3, #5
 8000582:	2164      	movs	r1, #100	; 0x64
 8000584:	fb01 f303 	mul.w	r3, r1, r3
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1f1      	bne.n	8000572 <main+0xaa>
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	429a      	cmp	r2, r3
 8000594:	d0ed      	beq.n	8000572 <main+0xaa>
		HAL_GPIO_TogglePin(BUILTIN_LED_GPIO_Port, BUILTIN_LED_Pin);
 8000596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <main+0xe8>)
 800059c:	f001 f979 	bl	8001892 <HAL_GPIO_TogglePin>
		then = now;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	607b      	str	r3, [r7, #4]
	now = HAL_GetTick();
 80005a4:	e7e5      	b.n	8000572 <main+0xaa>
 80005a6:	bf00      	nop
 80005a8:	20000104 	.word	0x20000104
 80005ac:	51eb851f 	.word	0x51eb851f
 80005b0:	40020800 	.word	0x40020800

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fe4d 	bl	8003262 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a27      	ldr	r2, [pc, #156]	; (8000680 <SystemClock_Config+0xcc>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <SystemClock_Config+0xd0>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000628:	23a8      	movs	r3, #168	; 0xa8
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f001 f945 	bl	80018c8 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000644:	f000 f916 	bl	8000874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000654:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2105      	movs	r1, #5
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fb9e 	bl	8001da8 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000672:	f000 f8ff 	bl	8000874 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08e      	sub	sp, #56	; 0x38
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
 80006b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <MX_TIM3_Init+0xe4>)
 80006ba:	4a2d      	ldr	r2, [pc, #180]	; (8000770 <MX_TIM3_Init+0xe8>)
 80006bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = T3_PRE;
 80006be:	4b2b      	ldr	r3, [pc, #172]	; (800076c <MX_TIM3_Init+0xe4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <MX_TIM3_Init+0xe4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = T3_CNT;
 80006ca:	4b28      	ldr	r3, [pc, #160]	; (800076c <MX_TIM3_Init+0xe4>)
 80006cc:	2268      	movs	r2, #104	; 0x68
 80006ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <MX_TIM3_Init+0xe4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <MX_TIM3_Init+0xe4>)
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006dc:	4823      	ldr	r0, [pc, #140]	; (800076c <MX_TIM3_Init+0xe4>)
 80006de:	f001 fd21 	bl	8002124 <HAL_TIM_Base_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80006e8:	f000 f8c4 	bl	8000874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f6:	4619      	mov	r1, r3
 80006f8:	481c      	ldr	r0, [pc, #112]	; (800076c <MX_TIM3_Init+0xe4>)
 80006fa:	f001 ff4b 	bl	8002594 <HAL_TIM_ConfigClockSource>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000704:	f000 f8b6 	bl	8000874 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000708:	4818      	ldr	r0, [pc, #96]	; (800076c <MX_TIM3_Init+0xe4>)
 800070a:	f001 fd36 	bl	800217a <HAL_TIM_PWM_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000714:	f000 f8ae 	bl	8000874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000718:	2320      	movs	r3, #32
 800071a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4619      	mov	r1, r3
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <MX_TIM3_Init+0xe4>)
 8000728:	f002 fb88 	bl	8002e3c <HAL_TIMEx_MasterConfigSynchronization>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000732:	f000 f89f 	bl	8000874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000736:	2360      	movs	r3, #96	; 0x60
 8000738:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000742:	2304      	movs	r3, #4
 8000744:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	4619      	mov	r1, r3
 800074c:	4807      	ldr	r0, [pc, #28]	; (800076c <MX_TIM3_Init+0xe4>)
 800074e:	f001 fe5b 	bl	8002408 <HAL_TIM_PWM_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000758:	f000 f88c 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <MX_TIM3_Init+0xe4>)
 800075e:	f000 f90f 	bl	8000980 <HAL_TIM_MspPostInit>

}
 8000762:	bf00      	nop
 8000764:	3738      	adds	r7, #56	; 0x38
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000104 	.word	0x20000104
 8000770:	40000400 	.word	0x40000400

08000774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_DMA_Init+0x3c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <MX_DMA_Init+0x3c>)
 8000784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_DMA_Init+0x3c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	200f      	movs	r0, #15
 800079c:	f000 fb21 	bl	8000de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007a0:	200f      	movs	r0, #15
 80007a2:	f000 fb3a 	bl	8000e1a <HAL_NVIC_EnableIRQ>

}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b27      	ldr	r3, [pc, #156]	; (800086c <MX_GPIO_Init+0xb8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a26      	ldr	r2, [pc, #152]	; (800086c <MX_GPIO_Init+0xb8>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b24      	ldr	r3, [pc, #144]	; (800086c <MX_GPIO_Init+0xb8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <MX_GPIO_Init+0xb8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a1f      	ldr	r2, [pc, #124]	; (800086c <MX_GPIO_Init+0xb8>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_GPIO_Init+0xb8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_GPIO_Init+0xb8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a18      	ldr	r2, [pc, #96]	; (800086c <MX_GPIO_Init+0xb8>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_GPIO_Init+0xb8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_GPIO_Init+0xb8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a11      	ldr	r2, [pc, #68]	; (800086c <MX_GPIO_Init+0xb8>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_GPIO_Init+0xb8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILTIN_LED_GPIO_Port, BUILTIN_LED_Pin, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <MX_GPIO_Init+0xbc>)
 8000842:	f001 f80d 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUILTIN_LED_Pin */
  GPIO_InitStruct.Pin = BUILTIN_LED_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800084c:	2311      	movs	r3, #17
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUILTIN_LED_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_GPIO_Init+0xbc>)
 8000860:	f000 fe64 	bl	800152c <HAL_GPIO_Init>

}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40020800 	.word	0x40020800

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087a:	e7fe      	b.n	800087a <Error_Handler+0x6>

0800087c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <HAL_MspInit+0x4c>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000890:	6453      	str	r3, [r2, #68]	; 0x44
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a25      	ldr	r2, [pc, #148]	; (8000970 <HAL_TIM_Base_MspInit+0xa4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d144      	bne.n	8000968 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b24      	ldr	r3, [pc, #144]	; (8000974 <HAL_TIM_Base_MspInit+0xa8>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <HAL_TIM_Base_MspInit+0xa8>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <HAL_TIM_Base_MspInit+0xa8>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 80008fc:	4a1f      	ldr	r2, [pc, #124]	; (800097c <HAL_TIM_Base_MspInit+0xb0>)
 80008fe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 8000902:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000906:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 800090a:	2240      	movs	r2, #64	; 0x40
 800090c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 8000916:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800091a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 800091e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000922:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 8000926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800092a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 800092e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000932:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 800093c:	2200      	movs	r2, #0
 800093e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 8000942:	f000 fa85 	bl	8000e50 <HAL_DMA_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800094c:	f7ff ff92 	bl	8000874 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a09      	ldr	r2, [pc, #36]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a06      	ldr	r2, [pc, #24]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 8000960:	639a      	str	r2, [r3, #56]	; 0x38
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <HAL_TIM_Base_MspInit+0xac>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40000400 	.word	0x40000400
 8000974:	40023800 	.word	0x40023800
 8000978:	20000144 	.word	0x20000144
 800097c:	40026070 	.word	0x40026070

08000980 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <HAL_TIM_MspPostInit+0x68>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d11d      	bne.n	80009de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_TIM_MspPostInit+0x6c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <HAL_TIM_MspPostInit+0x6c>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_TIM_MspPostInit+0x6c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009be:	2310      	movs	r3, #16
 80009c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <HAL_TIM_MspPostInit+0x70>)
 80009da:	f000 fda7 	bl	800152c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009de:	bf00      	nop
 80009e0:	3720      	adds	r7, #32
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40000400 	.word	0x40000400
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020400 	.word	0x40020400

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 f8d4 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <DMA1_Stream4_IRQHandler+0x10>)
 8000a4e:	f000 fb05 	bl	800105c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000144 	.word	0x20000144

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d207      	bcs.n	8000a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a8c:	f002 fbac 	bl	80031e8 <__errno>
 8000a90:	4602      	mov	r2, r0
 8000a92:	230c      	movs	r3, #12
 8000a94:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a9a:	e009      	b.n	8000ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <_sbrk+0x64>)
 8000aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20020000 	.word	0x20020000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	2000008c 	.word	0x2000008c
 8000ac4:	200001c0 	.word	0x200001c0

08000ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <SystemInit+0x28>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <SystemInit+0x28>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SystemInit+0x28>)
 8000ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ae2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000af8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000afa:	e003      	b.n	8000b04 <LoopCopyDataInit>

08000afc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000afe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b02:	3104      	adds	r1, #4

08000b04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b0c:	d3f6      	bcc.n	8000afc <CopyDataInit>
  ldr  r2, =_sbss
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b10:	e002      	b.n	8000b18 <LoopFillZerobss>

08000b12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b14:	f842 3b04 	str.w	r3, [r2], #4

08000b18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b1c:	d3f9      	bcc.n	8000b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b1e:	f7ff ffd3 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f002 fb67 	bl	80031f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fccf 	bl	80004c8 <main>
  bx  lr    
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b30:	0800438c 	.word	0x0800438c
  ldr  r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b38:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000b3c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000b40:	200001bc 	.word	0x200001bc

08000b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f92b 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f808 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fe7e 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_InitTick+0x54>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f943 	bl	8000e36 <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00e      	b.n	8000bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc8:	f000 f90b 	bl	8000de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <HAL_InitTick+0x5c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x20>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x24>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_IncTick+0x24>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	200001a4 	.word	0x200001a4

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <HAL_GetTick+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200001a4 	.word	0x200001a4

08000c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <__NVIC_GetPriorityGrouping+0x18>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	f003 0307 	and.w	r3, r3, #7
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	db0b      	blt.n	8000cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f003 021f 	and.w	r2, r3, #31
 8000ca8:	4907      	ldr	r1, [pc, #28]	; (8000cc8 <__NVIC_EnableIRQ+0x38>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	095b      	lsrs	r3, r3, #5
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000e100 	.word	0xe000e100

08000ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db0a      	blt.n	8000cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	490c      	ldr	r1, [pc, #48]	; (8000d18 <__NVIC_SetPriority+0x4c>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	440b      	add	r3, r1
 8000cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf4:	e00a      	b.n	8000d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4908      	ldr	r1, [pc, #32]	; (8000d1c <__NVIC_SetPriority+0x50>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	3b04      	subs	r3, #4
 8000d04:	0112      	lsls	r2, r2, #4
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	440b      	add	r3, r1
 8000d0a:	761a      	strb	r2, [r3, #24]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f1c3 0307 	rsb	r3, r3, #7
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf28      	it	cs
 8000d3e:	2304      	movcs	r3, #4
 8000d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3304      	adds	r3, #4
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d902      	bls.n	8000d50 <NVIC_EncodePriority+0x30>
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3b03      	subs	r3, #3
 8000d4e:	e000      	b.n	8000d52 <NVIC_EncodePriority+0x32>
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43d9      	mvns	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	4313      	orrs	r3, r2
         );
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dac:	f7ff ff8e 	bl	8000ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff29 	bl	8000c2c <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff3e 	bl	8000c74 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff8e 	bl	8000d20 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5d 	bl	8000ccc <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff31 	bl	8000c90 <__NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffa2 	bl	8000d88 <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff feda 	bl	8000c14 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d101      	bne.n	8000e6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e099      	b.n	8000fa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2202      	movs	r2, #2
 8000e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0201 	bic.w	r2, r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e8c:	e00f      	b.n	8000eae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e8e:	f7ff fec1 	bl	8000c14 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d908      	bls.n	8000eae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2220      	movs	r2, #32
 8000ea0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e078      	b.n	8000fa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1e8      	bne.n	8000e8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <HAL_DMA_Init+0x158>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d107      	bne.n	8000f18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	4313      	orrs	r3, r2
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f023 0307 	bic.w	r3, r3, #7
 8000f2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	d117      	bne.n	8000f72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00e      	beq.n	8000f72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fa6f 	bl	8001438 <DMA_CheckFifoParam>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d008      	beq.n	8000f72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2240      	movs	r2, #64	; 0x40
 8000f64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e016      	b.n	8000fa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fa26 	bl	80013cc <DMA_CalcBaseAndBitshift>
 8000f80:	4603      	mov	r3, r0
 8000f82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f88:	223f      	movs	r2, #63	; 0x3f
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	f010803f 	.word	0xf010803f

08000fac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <HAL_DMA_Start_IT+0x26>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e040      	b.n	8001054 <HAL_DMA_Start_IT+0xa8>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d12f      	bne.n	8001046 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 f9b8 	bl	8001370 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001004:	223f      	movs	r2, #63	; 0x3f
 8001006:	409a      	lsls	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0216 	orr.w	r2, r2, #22
 800101a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0208 	orr.w	r2, r2, #8
 8001032:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 0201 	orr.w	r2, r2, #1
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	e005      	b.n	8001052 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800104e:	2302      	movs	r3, #2
 8001050:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001052:	7dfb      	ldrb	r3, [r7, #23]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001068:	4b92      	ldr	r3, [pc, #584]	; (80012b4 <HAL_DMA_IRQHandler+0x258>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a92      	ldr	r2, [pc, #584]	; (80012b8 <HAL_DMA_IRQHandler+0x25c>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0a9b      	lsrs	r3, r3, #10
 8001074:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001086:	2208      	movs	r2, #8
 8001088:	409a      	lsls	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4013      	ands	r3, r2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d01a      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	d013      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0204 	bic.w	r2, r2, #4
 80010ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b4:	2208      	movs	r2, #8
 80010b6:	409a      	lsls	r2, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c0:	f043 0201 	orr.w	r2, r3, #1
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010cc:	2201      	movs	r2, #1
 80010ce:	409a      	lsls	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d012      	beq.n	80010fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ea:	2201      	movs	r2, #1
 80010ec:	409a      	lsls	r2, r3
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f6:	f043 0202 	orr.w	r2, r3, #2
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001102:	2204      	movs	r2, #4
 8001104:	409a      	lsls	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d012      	beq.n	8001134 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00b      	beq.n	8001134 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001120:	2204      	movs	r2, #4
 8001122:	409a      	lsls	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112c:	f043 0204 	orr.w	r2, r3, #4
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001138:	2210      	movs	r2, #16
 800113a:	409a      	lsls	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d043      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d03c      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001156:	2210      	movs	r2, #16
 8001158:	409a      	lsls	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d018      	beq.n	800119e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d108      	bne.n	800118c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	2b00      	cmp	r3, #0
 8001180:	d024      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	4798      	blx	r3
 800118a:	e01f      	b.n	80011cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001190:	2b00      	cmp	r3, #0
 8001192:	d01b      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	4798      	blx	r3
 800119c:	e016      	b.n	80011cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d107      	bne.n	80011bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0208 	bic.w	r2, r2, #8
 80011ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	2220      	movs	r2, #32
 80011d2:	409a      	lsls	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 808e 	beq.w	80012fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 8086 	beq.w	80012fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f2:	2220      	movs	r2, #32
 80011f4:	409a      	lsls	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b05      	cmp	r3, #5
 8001204:	d136      	bne.n	8001274 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0216 	bic.w	r2, r2, #22
 8001214:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	695a      	ldr	r2, [r3, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001224:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	2b00      	cmp	r3, #0
 800122c:	d103      	bne.n	8001236 <HAL_DMA_IRQHandler+0x1da>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0208 	bic.w	r2, r2, #8
 8001244:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124a:	223f      	movs	r2, #63	; 0x3f
 800124c:	409a      	lsls	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001266:	2b00      	cmp	r3, #0
 8001268:	d07d      	beq.n	8001366 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	4798      	blx	r3
        }
        return;
 8001272:	e078      	b.n	8001366 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d01c      	beq.n	80012bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d108      	bne.n	80012a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001294:	2b00      	cmp	r3, #0
 8001296:	d030      	beq.n	80012fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	4798      	blx	r3
 80012a0:	e02b      	b.n	80012fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d027      	beq.n	80012fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	4798      	blx	r3
 80012b2:	e022      	b.n	80012fa <HAL_DMA_IRQHandler+0x29e>
 80012b4:	20000000 	.word	0x20000000
 80012b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10f      	bne.n	80012ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0210 	bic.w	r2, r2, #16
 80012d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d032      	beq.n	8001368 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d022      	beq.n	8001354 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2205      	movs	r2, #5
 8001312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0201 	bic.w	r2, r2, #1
 8001324:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	3301      	adds	r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	429a      	cmp	r2, r3
 8001330:	d307      	bcc.n	8001342 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f2      	bne.n	8001326 <HAL_DMA_IRQHandler+0x2ca>
 8001340:	e000      	b.n	8001344 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001342:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	4798      	blx	r3
 8001364:	e000      	b.n	8001368 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001366:	bf00      	nop
    }
  }
}
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop

08001370 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800138c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b40      	cmp	r3, #64	; 0x40
 800139c:	d108      	bne.n	80013b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80013ae:	e007      	b.n	80013c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	60da      	str	r2, [r3, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	3b10      	subs	r3, #16
 80013dc:	4a14      	ldr	r2, [pc, #80]	; (8001430 <DMA_CalcBaseAndBitshift+0x64>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013e6:	4a13      	ldr	r2, [pc, #76]	; (8001434 <DMA_CalcBaseAndBitshift+0x68>)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d909      	bls.n	800140e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001402:	f023 0303 	bic.w	r3, r3, #3
 8001406:	1d1a      	adds	r2, r3, #4
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	659a      	str	r2, [r3, #88]	; 0x58
 800140c:	e007      	b.n	800141e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001416:	f023 0303 	bic.w	r3, r3, #3
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	aaaaaaab 	.word	0xaaaaaaab
 8001434:	08003374 	.word	0x08003374

08001438 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d11f      	bne.n	8001492 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d855      	bhi.n	8001504 <DMA_CheckFifoParam+0xcc>
 8001458:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <DMA_CheckFifoParam+0x28>)
 800145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145e:	bf00      	nop
 8001460:	08001471 	.word	0x08001471
 8001464:	08001483 	.word	0x08001483
 8001468:	08001471 	.word	0x08001471
 800146c:	08001505 	.word	0x08001505
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d045      	beq.n	8001508 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001480:	e042      	b.n	8001508 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001486:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800148a:	d13f      	bne.n	800150c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001490:	e03c      	b.n	800150c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800149a:	d121      	bne.n	80014e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d836      	bhi.n	8001510 <DMA_CheckFifoParam+0xd8>
 80014a2:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <DMA_CheckFifoParam+0x70>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	080014b9 	.word	0x080014b9
 80014ac:	080014bf 	.word	0x080014bf
 80014b0:	080014b9 	.word	0x080014b9
 80014b4:	080014d1 	.word	0x080014d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
      break;
 80014bc:	e02f      	b.n	800151e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d024      	beq.n	8001514 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014ce:	e021      	b.n	8001514 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014d8:	d11e      	bne.n	8001518 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014de:	e01b      	b.n	8001518 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d902      	bls.n	80014ec <DMA_CheckFifoParam+0xb4>
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d003      	beq.n	80014f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014ea:	e018      	b.n	800151e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
      break;
 80014f0:	e015      	b.n	800151e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00e      	beq.n	800151c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	73fb      	strb	r3, [r7, #15]
      break;
 8001502:	e00b      	b.n	800151c <DMA_CheckFifoParam+0xe4>
      break;
 8001504:	bf00      	nop
 8001506:	e00a      	b.n	800151e <DMA_CheckFifoParam+0xe6>
      break;
 8001508:	bf00      	nop
 800150a:	e008      	b.n	800151e <DMA_CheckFifoParam+0xe6>
      break;
 800150c:	bf00      	nop
 800150e:	e006      	b.n	800151e <DMA_CheckFifoParam+0xe6>
      break;
 8001510:	bf00      	nop
 8001512:	e004      	b.n	800151e <DMA_CheckFifoParam+0xe6>
      break;
 8001514:	bf00      	nop
 8001516:	e002      	b.n	800151e <DMA_CheckFifoParam+0xe6>
      break;   
 8001518:	bf00      	nop
 800151a:	e000      	b.n	800151e <DMA_CheckFifoParam+0xe6>
      break;
 800151c:	bf00      	nop
    }
  } 
  
  return status; 
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	e16b      	b.n	8001820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001548:	2201      	movs	r2, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	429a      	cmp	r2, r3
 8001562:	f040 815a 	bne.w	800181a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d00b      	beq.n	8001586 <HAL_GPIO_Init+0x5a>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800157a:	2b11      	cmp	r3, #17
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b12      	cmp	r3, #18
 8001584:	d130      	bne.n	80015e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015bc:	2201      	movs	r2, #1
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	f003 0201 	and.w	r2, r3, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0xfc>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b12      	cmp	r3, #18
 8001626:	d123      	bne.n	8001670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	08da      	lsrs	r2, r3, #3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3208      	adds	r2, #8
 8001630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	220f      	movs	r2, #15
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	691a      	ldr	r2, [r3, #16]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	69b9      	ldr	r1, [r7, #24]
 800166c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0203 	and.w	r2, r3, #3
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80b4 	beq.w	800181a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b5f      	ldr	r3, [pc, #380]	; (8001834 <HAL_GPIO_Init+0x308>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a5e      	ldr	r2, [pc, #376]	; (8001834 <HAL_GPIO_Init+0x308>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b5c      	ldr	r3, [pc, #368]	; (8001834 <HAL_GPIO_Init+0x308>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ce:	4a5a      	ldr	r2, [pc, #360]	; (8001838 <HAL_GPIO_Init+0x30c>)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	220f      	movs	r2, #15
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a51      	ldr	r2, [pc, #324]	; (800183c <HAL_GPIO_Init+0x310>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d02b      	beq.n	8001752 <HAL_GPIO_Init+0x226>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a50      	ldr	r2, [pc, #320]	; (8001840 <HAL_GPIO_Init+0x314>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d025      	beq.n	800174e <HAL_GPIO_Init+0x222>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4f      	ldr	r2, [pc, #316]	; (8001844 <HAL_GPIO_Init+0x318>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01f      	beq.n	800174a <HAL_GPIO_Init+0x21e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4e      	ldr	r2, [pc, #312]	; (8001848 <HAL_GPIO_Init+0x31c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_GPIO_Init+0x21a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4d      	ldr	r2, [pc, #308]	; (800184c <HAL_GPIO_Init+0x320>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0x216>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4c      	ldr	r2, [pc, #304]	; (8001850 <HAL_GPIO_Init+0x324>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x212>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4b      	ldr	r2, [pc, #300]	; (8001854 <HAL_GPIO_Init+0x328>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x20e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4a      	ldr	r2, [pc, #296]	; (8001858 <HAL_GPIO_Init+0x32c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x20a>
 8001732:	2307      	movs	r3, #7
 8001734:	e00e      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001736:	2308      	movs	r3, #8
 8001738:	e00c      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800173a:	2306      	movs	r3, #6
 800173c:	e00a      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800173e:	2305      	movs	r3, #5
 8001740:	e008      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001742:	2304      	movs	r3, #4
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001746:	2303      	movs	r3, #3
 8001748:	e004      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800174a:	2302      	movs	r3, #2
 800174c:	e002      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001752:	2300      	movs	r3, #0
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f002 0203 	and.w	r2, r2, #3
 800175a:	0092      	lsls	r2, r2, #2
 800175c:	4093      	lsls	r3, r2
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001764:	4934      	ldr	r1, [pc, #208]	; (8001838 <HAL_GPIO_Init+0x30c>)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <HAL_GPIO_Init+0x330>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001796:	4a31      	ldr	r2, [pc, #196]	; (800185c <HAL_GPIO_Init+0x330>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800179c:	4b2f      	ldr	r3, [pc, #188]	; (800185c <HAL_GPIO_Init+0x330>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c0:	4a26      	ldr	r2, [pc, #152]	; (800185c <HAL_GPIO_Init+0x330>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_GPIO_Init+0x330>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ea:	4a1c      	ldr	r2, [pc, #112]	; (800185c <HAL_GPIO_Init+0x330>)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_GPIO_Init+0x330>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001814:	4a11      	ldr	r2, [pc, #68]	; (800185c <HAL_GPIO_Init+0x330>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3301      	adds	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	2b0f      	cmp	r3, #15
 8001824:	f67f ae90 	bls.w	8001548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001828:	bf00      	nop
 800182a:	3724      	adds	r7, #36	; 0x24
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	40023800 	.word	0x40023800
 8001838:	40013800 	.word	0x40013800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	40020800 	.word	0x40020800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40021400 	.word	0x40021400
 8001854:	40021800 	.word	0x40021800
 8001858:	40021c00 	.word	0x40021c00
 800185c:	40013c00 	.word	0x40013c00

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	401a      	ands	r2, r3
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d104      	bne.n	80018b6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	041a      	lsls	r2, r3, #16
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80018b4:	e002      	b.n	80018bc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e25b      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d075      	beq.n	80019d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018e6:	4ba3      	ldr	r3, [pc, #652]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d00c      	beq.n	800190c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f2:	4ba0      	ldr	r3, [pc, #640]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d112      	bne.n	8001924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fe:	4b9d      	ldr	r3, [pc, #628]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800190a:	d10b      	bne.n	8001924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190c:	4b99      	ldr	r3, [pc, #612]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d05b      	beq.n	80019d0 <HAL_RCC_OscConfig+0x108>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d157      	bne.n	80019d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e236      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192c:	d106      	bne.n	800193c <HAL_RCC_OscConfig+0x74>
 800192e:	4b91      	ldr	r3, [pc, #580]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a90      	ldr	r2, [pc, #576]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e01d      	b.n	8001978 <HAL_RCC_OscConfig+0xb0>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0x98>
 8001946:	4b8b      	ldr	r3, [pc, #556]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a8a      	ldr	r2, [pc, #552]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 800194c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a87      	ldr	r2, [pc, #540]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0xb0>
 8001960:	4b84      	ldr	r3, [pc, #528]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a83      	ldr	r2, [pc, #524]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b81      	ldr	r3, [pc, #516]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a80      	ldr	r2, [pc, #512]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d013      	beq.n	80019a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff f948 	bl	8000c14 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff f944 	bl	8000c14 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e1fb      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0xc0>
 80019a6:	e014      	b.n	80019d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff f934 	bl	8000c14 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff f930 	bl	8000c14 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e1e7      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	4b6c      	ldr	r3, [pc, #432]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0xe8>
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d063      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019de:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00b      	beq.n	8001a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ea:	4b62      	ldr	r3, [pc, #392]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d11c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f6:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d116      	bne.n	8001a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a02:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_RCC_OscConfig+0x152>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d001      	beq.n	8001a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e1bb      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1a:	4b56      	ldr	r3, [pc, #344]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4952      	ldr	r1, [pc, #328]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2e:	e03a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d020      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a38:	4b4f      	ldr	r3, [pc, #316]	; (8001b78 <HAL_RCC_OscConfig+0x2b0>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f8e9 	bl	8000c14 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff f8e5 	bl	8000c14 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e19c      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a58:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4940      	ldr	r1, [pc, #256]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]
 8001a78:	e015      	b.n	8001aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <HAL_RCC_OscConfig+0x2b0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7ff f8c8 	bl	8000c14 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a88:	f7ff f8c4 	bl	8000c14 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e17b      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9a:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d030      	beq.n	8001b14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d016      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aba:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff f8a8 	bl	8000c14 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7ff f8a4 	bl	8000c14 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e15b      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x200>
 8001ae6:	e015      	b.n	8001b14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aee:	f7ff f891 	bl	8000c14 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af6:	f7ff f88d 	bl	8000c14 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e144      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80a0 	beq.w	8001c62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10f      	bne.n	8001b52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6413      	str	r3, [r2, #64]	; 0x40
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_OscConfig+0x2b8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d121      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_RCC_OscConfig+0x2b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_RCC_OscConfig+0x2b8>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff f853 	bl	8000c14 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	e011      	b.n	8001b96 <HAL_RCC_OscConfig+0x2ce>
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	42470000 	.word	0x42470000
 8001b7c:	42470e80 	.word	0x42470e80
 8001b80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	f7ff f846 	bl	8000c14 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e0fd      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b96:	4b81      	ldr	r3, [pc, #516]	; (8001d9c <HAL_RCC_OscConfig+0x4d4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2f0>
 8001baa:	4b7d      	ldr	r3, [pc, #500]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	4a7c      	ldr	r2, [pc, #496]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb6:	e01c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x32a>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x312>
 8001bc0:	4b77      	ldr	r3, [pc, #476]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4a76      	ldr	r2, [pc, #472]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6713      	str	r3, [r2, #112]	; 0x70
 8001bcc:	4b74      	ldr	r3, [pc, #464]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	4a73      	ldr	r2, [pc, #460]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd8:	e00b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x32a>
 8001bda:	4b71      	ldr	r3, [pc, #452]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	4a70      	ldr	r2, [pc, #448]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70
 8001be6:	4b6e      	ldr	r3, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bea:	4a6d      	ldr	r2, [pc, #436]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d015      	beq.n	8001c26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfa:	f7ff f80b 	bl	8000c14 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff f807 	bl	8000c14 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0bc      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	4b61      	ldr	r3, [pc, #388]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ee      	beq.n	8001c02 <HAL_RCC_OscConfig+0x33a>
 8001c24:	e014      	b.n	8001c50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c26:	f7fe fff5 	bl	8000c14 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7fe fff1 	bl	8000c14 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e0a6      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c44:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ee      	bne.n	8001c2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d105      	bne.n	8001c62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c56:	4b52      	ldr	r3, [pc, #328]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a51      	ldr	r2, [pc, #324]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8092 	beq.w	8001d90 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c6c:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d05c      	beq.n	8001d32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d141      	bne.n	8001d04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c80:	4b48      	ldr	r3, [pc, #288]	; (8001da4 <HAL_RCC_OscConfig+0x4dc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7fe ffc5 	bl	8000c14 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7fe ffc1 	bl	8000c14 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e078      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca0:	4b3f      	ldr	r3, [pc, #252]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69da      	ldr	r2, [r3, #28]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	019b      	lsls	r3, r3, #6
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	085b      	lsrs	r3, r3, #1
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	041b      	lsls	r3, r3, #16
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	061b      	lsls	r3, r3, #24
 8001cd0:	4933      	ldr	r1, [pc, #204]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd6:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <HAL_RCC_OscConfig+0x4dc>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7fe ff9a 	bl	8000c14 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7fe ff96 	bl	8000c14 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e04d      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x41c>
 8001d02:	e045      	b.n	8001d90 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d04:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <HAL_RCC_OscConfig+0x4dc>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7fe ff83 	bl	8000c14 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d12:	f7fe ff7f 	bl	8000c14 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e036      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d24:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f0      	bne.n	8001d12 <HAL_RCC_OscConfig+0x44a>
 8001d30:	e02e      	b.n	8001d90 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e029      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_RCC_OscConfig+0x4d8>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d11c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d115      	bne.n	8001d8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d66:	4013      	ands	r3, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d10d      	bne.n	8001d8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d106      	bne.n	8001d8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40007000 	.word	0x40007000
 8001da0:	40023800 	.word	0x40023800
 8001da4:	42470060 	.word	0x42470060

08001da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0cc      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d90c      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b65      	ldr	r3, [pc, #404]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0b8      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d020      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dfc:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a52      	ldr	r2, [pc, #328]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	494d      	ldr	r1, [pc, #308]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d044      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d119      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e07f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e66:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e06f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e76:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e067      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f023 0203 	bic.w	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4934      	ldr	r1, [pc, #208]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e98:	f7fe febc 	bl	8000c14 <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea0:	f7fe feb8 	bl	8000c14 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e04f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 020c 	and.w	r2, r3, #12
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d1eb      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d20c      	bcs.n	8001ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e032      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4916      	ldr	r1, [pc, #88]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	490e      	ldr	r1, [pc, #56]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f2e:	f000 f821 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f32:	4601      	mov	r1, r0
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	5cd3      	ldrb	r3, [r2, r3]
 8001f42:	fa21 f303 	lsr.w	r3, r1, r3
 8001f46:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fe1c 	bl	8000b8c <HAL_InitTick>

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00
 8001f64:	40023800 	.word	0x40023800
 8001f68:	08003364 	.word	0x08003364
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	20000004 	.word	0x20000004

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	2300      	movs	r3, #0
 8001f84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f8a:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d007      	beq.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x32>
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d008      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x38>
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 80b4 	bne.w	8002108 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fa0:	4b5e      	ldr	r3, [pc, #376]	; (800211c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fa2:	60bb      	str	r3, [r7, #8]
       break;
 8001fa4:	e0b3      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fa6:	4b5e      	ldr	r3, [pc, #376]	; (8002120 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001fa8:	60bb      	str	r3, [r7, #8]
      break;
 8001faa:	e0b0      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fac:	4b5a      	ldr	r3, [pc, #360]	; (8002118 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb6:	4b58      	ldr	r3, [pc, #352]	; (8002118 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d04a      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc2:	4b55      	ldr	r3, [pc, #340]	; (8002118 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	099b      	lsrs	r3, r3, #6
 8001fc8:	f04f 0400 	mov.w	r4, #0
 8001fcc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	ea03 0501 	and.w	r5, r3, r1
 8001fd8:	ea04 0602 	and.w	r6, r4, r2
 8001fdc:	4629      	mov	r1, r5
 8001fde:	4632      	mov	r2, r6
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	f04f 0400 	mov.w	r4, #0
 8001fe8:	0154      	lsls	r4, r2, #5
 8001fea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fee:	014b      	lsls	r3, r1, #5
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4622      	mov	r2, r4
 8001ff4:	1b49      	subs	r1, r1, r5
 8001ff6:	eb62 0206 	sbc.w	r2, r2, r6
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	f04f 0400 	mov.w	r4, #0
 8002002:	0194      	lsls	r4, r2, #6
 8002004:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002008:	018b      	lsls	r3, r1, #6
 800200a:	1a5b      	subs	r3, r3, r1
 800200c:	eb64 0402 	sbc.w	r4, r4, r2
 8002010:	f04f 0100 	mov.w	r1, #0
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	00e2      	lsls	r2, r4, #3
 800201a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800201e:	00d9      	lsls	r1, r3, #3
 8002020:	460b      	mov	r3, r1
 8002022:	4614      	mov	r4, r2
 8002024:	195b      	adds	r3, r3, r5
 8002026:	eb44 0406 	adc.w	r4, r4, r6
 800202a:	f04f 0100 	mov.w	r1, #0
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	0262      	lsls	r2, r4, #9
 8002034:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002038:	0259      	lsls	r1, r3, #9
 800203a:	460b      	mov	r3, r1
 800203c:	4614      	mov	r4, r2
 800203e:	4618      	mov	r0, r3
 8002040:	4621      	mov	r1, r4
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f04f 0400 	mov.w	r4, #0
 8002048:	461a      	mov	r2, r3
 800204a:	4623      	mov	r3, r4
 800204c:	f7fe f8bc 	bl	80001c8 <__aeabi_uldivmod>
 8002050:	4603      	mov	r3, r0
 8002052:	460c      	mov	r4, r1
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e049      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	099b      	lsrs	r3, r3, #6
 800205e:	f04f 0400 	mov.w	r4, #0
 8002062:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	ea03 0501 	and.w	r5, r3, r1
 800206e:	ea04 0602 	and.w	r6, r4, r2
 8002072:	4629      	mov	r1, r5
 8002074:	4632      	mov	r2, r6
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	f04f 0400 	mov.w	r4, #0
 800207e:	0154      	lsls	r4, r2, #5
 8002080:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002084:	014b      	lsls	r3, r1, #5
 8002086:	4619      	mov	r1, r3
 8002088:	4622      	mov	r2, r4
 800208a:	1b49      	subs	r1, r1, r5
 800208c:	eb62 0206 	sbc.w	r2, r2, r6
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	f04f 0400 	mov.w	r4, #0
 8002098:	0194      	lsls	r4, r2, #6
 800209a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800209e:	018b      	lsls	r3, r1, #6
 80020a0:	1a5b      	subs	r3, r3, r1
 80020a2:	eb64 0402 	sbc.w	r4, r4, r2
 80020a6:	f04f 0100 	mov.w	r1, #0
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	00e2      	lsls	r2, r4, #3
 80020b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020b4:	00d9      	lsls	r1, r3, #3
 80020b6:	460b      	mov	r3, r1
 80020b8:	4614      	mov	r4, r2
 80020ba:	195b      	adds	r3, r3, r5
 80020bc:	eb44 0406 	adc.w	r4, r4, r6
 80020c0:	f04f 0100 	mov.w	r1, #0
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	02a2      	lsls	r2, r4, #10
 80020ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020ce:	0299      	lsls	r1, r3, #10
 80020d0:	460b      	mov	r3, r1
 80020d2:	4614      	mov	r4, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	4621      	mov	r1, r4
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f04f 0400 	mov.w	r4, #0
 80020de:	461a      	mov	r2, r3
 80020e0:	4623      	mov	r3, r4
 80020e2:	f7fe f871 	bl	80001c8 <__aeabi_uldivmod>
 80020e6:	4603      	mov	r3, r0
 80020e8:	460c      	mov	r4, r1
 80020ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	3301      	adds	r3, #1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	60bb      	str	r3, [r7, #8]
      break;
 8002106:	e002      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800210a:	60bb      	str	r3, [r7, #8]
      break;
 800210c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210e:	68bb      	ldr	r3, [r7, #8]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002118:	40023800 	.word	0x40023800
 800211c:	00f42400 	.word	0x00f42400
 8002120:	007a1200 	.word	0x007a1200

08002124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e01d      	b.n	8002172 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fbbe 	bl	80008cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3304      	adds	r3, #4
 8002160:	4619      	mov	r1, r3
 8002162:	4610      	mov	r0, r2
 8002164:	f000 fb5a 	bl	800281c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e01d      	b.n	80021c8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d106      	bne.n	80021a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f815 	bl	80021d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2202      	movs	r2, #2
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3304      	adds	r3, #4
 80021b6:	4619      	mov	r1, r3
 80021b8:	4610      	mov	r0, r2
 80021ba:	f000 fb2f 	bl	800281c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d101      	bne.n	8002202 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80021fe:	2302      	movs	r3, #2
 8002200:	e0f3      	b.n	80023ea <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d10b      	bne.n	8002226 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d104      	bne.n	800221e <HAL_TIM_PWM_Start_DMA+0x3a>
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e0e5      	b.n	80023ea <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2202      	movs	r2, #2
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b0c      	cmp	r3, #12
 800222a:	f200 80ad 	bhi.w	8002388 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800222e:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <HAL_TIM_PWM_Start_DMA+0x50>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	08002269 	.word	0x08002269
 8002238:	08002389 	.word	0x08002389
 800223c:	08002389 	.word	0x08002389
 8002240:	08002389 	.word	0x08002389
 8002244:	080022b1 	.word	0x080022b1
 8002248:	08002389 	.word	0x08002389
 800224c:	08002389 	.word	0x08002389
 8002250:	08002389 	.word	0x08002389
 8002254:	080022f9 	.word	0x080022f9
 8002258:	08002389 	.word	0x08002389
 800225c:	08002389 	.word	0x08002389
 8002260:	08002389 	.word	0x08002389
 8002264:	08002341 	.word	0x08002341
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	4a61      	ldr	r2, [pc, #388]	; (80023f4 <HAL_TIM_PWM_Start_DMA+0x210>)
 800226e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	4a60      	ldr	r2, [pc, #384]	; (80023f8 <HAL_TIM_PWM_Start_DMA+0x214>)
 8002276:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	4a5f      	ldr	r2, [pc, #380]	; (80023fc <HAL_TIM_PWM_Start_DMA+0x218>)
 800227e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3334      	adds	r3, #52	; 0x34
 800228c:	461a      	mov	r2, r3
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	f7fe fe8c 	bl	8000fac <HAL_DMA_Start_IT>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0a5      	b.n	80023ea <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ac:	60da      	str	r2, [r3, #12]
      break;
 80022ae:	e06c      	b.n	800238a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	4a4f      	ldr	r2, [pc, #316]	; (80023f4 <HAL_TIM_PWM_Start_DMA+0x210>)
 80022b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	4a4e      	ldr	r2, [pc, #312]	; (80023f8 <HAL_TIM_PWM_Start_DMA+0x214>)
 80022be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	4a4d      	ldr	r2, [pc, #308]	; (80023fc <HAL_TIM_PWM_Start_DMA+0x218>)
 80022c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3338      	adds	r3, #56	; 0x38
 80022d4:	461a      	mov	r2, r3
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	f7fe fe68 	bl	8000fac <HAL_DMA_Start_IT>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e081      	b.n	80023ea <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022f4:	60da      	str	r2, [r3, #12]
      break;
 80022f6:	e048      	b.n	800238a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	4a3d      	ldr	r2, [pc, #244]	; (80023f4 <HAL_TIM_PWM_Start_DMA+0x210>)
 80022fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	4a3c      	ldr	r2, [pc, #240]	; (80023f8 <HAL_TIM_PWM_Start_DMA+0x214>)
 8002306:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	4a3b      	ldr	r2, [pc, #236]	; (80023fc <HAL_TIM_PWM_Start_DMA+0x218>)
 800230e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	333c      	adds	r3, #60	; 0x3c
 800231c:	461a      	mov	r2, r3
 800231e:	887b      	ldrh	r3, [r7, #2]
 8002320:	f7fe fe44 	bl	8000fac <HAL_DMA_Start_IT>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e05d      	b.n	80023ea <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800233c:	60da      	str	r2, [r3, #12]
      break;
 800233e:	e024      	b.n	800238a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	4a2b      	ldr	r2, [pc, #172]	; (80023f4 <HAL_TIM_PWM_Start_DMA+0x210>)
 8002346:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	4a2a      	ldr	r2, [pc, #168]	; (80023f8 <HAL_TIM_PWM_Start_DMA+0x214>)
 800234e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <HAL_TIM_PWM_Start_DMA+0x218>)
 8002356:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3340      	adds	r3, #64	; 0x40
 8002364:	461a      	mov	r2, r3
 8002366:	887b      	ldrh	r3, [r7, #2]
 8002368:	f7fe fe20 	bl	8000fac <HAL_DMA_Start_IT>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e039      	b.n	80023ea <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002384:	60da      	str	r2, [r3, #12]
      break;
 8002386:	e000      	b.n	800238a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8002388:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2201      	movs	r2, #1
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fd2c 	bl	8002df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a18      	ldr	r2, [pc, #96]	; (8002400 <HAL_TIM_PWM_Start_DMA+0x21c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d004      	beq.n	80023ac <HAL_TIM_PWM_Start_DMA+0x1c8>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a17      	ldr	r2, [pc, #92]	; (8002404 <HAL_TIM_PWM_Start_DMA+0x220>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d101      	bne.n	80023b0 <HAL_TIM_PWM_Start_DMA+0x1cc>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_TIM_PWM_Start_DMA+0x1ce>
 80023b0:	2300      	movs	r3, #0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b06      	cmp	r3, #6
 80023d6:	d007      	beq.n	80023e8 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	0800273b 	.word	0x0800273b
 80023f8:	080027ab 	.word	0x080027ab
 80023fc:	08002717 	.word	0x08002717
 8002400:	40010000 	.word	0x40010000
 8002404:	40010400 	.word	0x40010400

08002408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800241e:	2302      	movs	r3, #2
 8002420:	e0b4      	b.n	800258c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2202      	movs	r2, #2
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b0c      	cmp	r3, #12
 8002436:	f200 809f 	bhi.w	8002578 <HAL_TIM_PWM_ConfigChannel+0x170>
 800243a:	a201      	add	r2, pc, #4	; (adr r2, 8002440 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800243c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002440:	08002475 	.word	0x08002475
 8002444:	08002579 	.word	0x08002579
 8002448:	08002579 	.word	0x08002579
 800244c:	08002579 	.word	0x08002579
 8002450:	080024b5 	.word	0x080024b5
 8002454:	08002579 	.word	0x08002579
 8002458:	08002579 	.word	0x08002579
 800245c:	08002579 	.word	0x08002579
 8002460:	080024f7 	.word	0x080024f7
 8002464:	08002579 	.word	0x08002579
 8002468:	08002579 	.word	0x08002579
 800246c:	08002579 	.word	0x08002579
 8002470:	08002537 	.word	0x08002537
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fa6e 	bl	800295c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0208 	orr.w	r2, r2, #8
 800248e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0204 	bic.w	r2, r2, #4
 800249e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6999      	ldr	r1, [r3, #24]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	619a      	str	r2, [r3, #24]
      break;
 80024b2:	e062      	b.n	800257a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fabe 	bl	8002a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6999      	ldr	r1, [r3, #24]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	021a      	lsls	r2, r3, #8
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	619a      	str	r2, [r3, #24]
      break;
 80024f4:	e041      	b.n	800257a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fb13 	bl	8002b28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0208 	orr.w	r2, r2, #8
 8002510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0204 	bic.w	r2, r2, #4
 8002520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69d9      	ldr	r1, [r3, #28]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	61da      	str	r2, [r3, #28]
      break;
 8002534:	e021      	b.n	800257a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	4618      	mov	r0, r3
 800253e:	f000 fb67 	bl	8002c10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69d9      	ldr	r1, [r3, #28]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	021a      	lsls	r2, r3, #8
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	61da      	str	r2, [r3, #28]
      break;
 8002576:	e000      	b.n	800257a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002578:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_TIM_ConfigClockSource+0x18>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e0a6      	b.n	80026fa <HAL_TIM_ConfigClockSource+0x166>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b40      	cmp	r3, #64	; 0x40
 80025e2:	d067      	beq.n	80026b4 <HAL_TIM_ConfigClockSource+0x120>
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d80b      	bhi.n	8002600 <HAL_TIM_ConfigClockSource+0x6c>
 80025e8:	2b10      	cmp	r3, #16
 80025ea:	d073      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0x140>
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d802      	bhi.n	80025f6 <HAL_TIM_ConfigClockSource+0x62>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d06f      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80025f4:	e078      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	d06c      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0x140>
 80025fa:	2b30      	cmp	r3, #48	; 0x30
 80025fc:	d06a      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80025fe:	e073      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002600:	2b70      	cmp	r3, #112	; 0x70
 8002602:	d00d      	beq.n	8002620 <HAL_TIM_ConfigClockSource+0x8c>
 8002604:	2b70      	cmp	r3, #112	; 0x70
 8002606:	d804      	bhi.n	8002612 <HAL_TIM_ConfigClockSource+0x7e>
 8002608:	2b50      	cmp	r3, #80	; 0x50
 800260a:	d033      	beq.n	8002674 <HAL_TIM_ConfigClockSource+0xe0>
 800260c:	2b60      	cmp	r3, #96	; 0x60
 800260e:	d041      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002610:	e06a      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002616:	d066      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0x152>
 8002618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261c:	d017      	beq.n	800264e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800261e:	e063      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6899      	ldr	r1, [r3, #8]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f000 fbbe 	bl	8002db0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002642:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	609a      	str	r2, [r3, #8]
      break;
 800264c:	e04c      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f000 fba7 	bl	8002db0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002670:	609a      	str	r2, [r3, #8]
      break;
 8002672:	e039      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	461a      	mov	r2, r3
 8002682:	f000 fb1b 	bl	8002cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2150      	movs	r1, #80	; 0x50
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fb74 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 8002692:	e029      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	461a      	mov	r2, r3
 80026a2:	f000 fb3a 	bl	8002d1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2160      	movs	r1, #96	; 0x60
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fb64 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 80026b2:	e019      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	461a      	mov	r2, r3
 80026c2:	f000 fafb 	bl	8002cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2140      	movs	r1, #64	; 0x40
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fb54 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 80026d2:	e009      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	4610      	mov	r0, r2
 80026e0:	f000 fb4b 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 80026e4:	e000      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80026e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f7ff ffe8 	bl	8002702 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	d103      	bne.n	8002762 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	771a      	strb	r2, [r3, #28]
 8002760:	e019      	b.n	8002796 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	429a      	cmp	r2, r3
 800276a:	d103      	bne.n	8002774 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2202      	movs	r2, #2
 8002770:	771a      	strb	r2, [r3, #28]
 8002772:	e010      	b.n	8002796 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d103      	bne.n	8002786 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2204      	movs	r2, #4
 8002782:	771a      	strb	r2, [r3, #28]
 8002784:	e007      	b.n	8002796 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	429a      	cmp	r2, r3
 800278e:	d102      	bne.n	8002796 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2208      	movs	r2, #8
 8002794:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fc78 	bl	800308c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	771a      	strb	r2, [r3, #28]
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d103      	bne.n	80027d2 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	771a      	strb	r2, [r3, #28]
 80027d0:	e019      	b.n	8002806 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d103      	bne.n	80027e4 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2202      	movs	r2, #2
 80027e0:	771a      	strb	r2, [r3, #28]
 80027e2:	e010      	b.n	8002806 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d103      	bne.n	80027f6 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2204      	movs	r2, #4
 80027f2:	771a      	strb	r2, [r3, #28]
 80027f4:	e007      	b.n	8002806 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d102      	bne.n	8002806 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2208      	movs	r2, #8
 8002804:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 fc28 	bl	800305c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	771a      	strb	r2, [r3, #28]
}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a40      	ldr	r2, [pc, #256]	; (8002930 <TIM_Base_SetConfig+0x114>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d013      	beq.n	800285c <TIM_Base_SetConfig+0x40>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283a:	d00f      	beq.n	800285c <TIM_Base_SetConfig+0x40>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3d      	ldr	r2, [pc, #244]	; (8002934 <TIM_Base_SetConfig+0x118>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00b      	beq.n	800285c <TIM_Base_SetConfig+0x40>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a3c      	ldr	r2, [pc, #240]	; (8002938 <TIM_Base_SetConfig+0x11c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d007      	beq.n	800285c <TIM_Base_SetConfig+0x40>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a3b      	ldr	r2, [pc, #236]	; (800293c <TIM_Base_SetConfig+0x120>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d003      	beq.n	800285c <TIM_Base_SetConfig+0x40>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3a      	ldr	r2, [pc, #232]	; (8002940 <TIM_Base_SetConfig+0x124>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d108      	bne.n	800286e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a2f      	ldr	r2, [pc, #188]	; (8002930 <TIM_Base_SetConfig+0x114>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d02b      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d027      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a2c      	ldr	r2, [pc, #176]	; (8002934 <TIM_Base_SetConfig+0x118>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d023      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <TIM_Base_SetConfig+0x11c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d01f      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a2a      	ldr	r2, [pc, #168]	; (800293c <TIM_Base_SetConfig+0x120>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01b      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a29      	ldr	r2, [pc, #164]	; (8002940 <TIM_Base_SetConfig+0x124>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d017      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a28      	ldr	r2, [pc, #160]	; (8002944 <TIM_Base_SetConfig+0x128>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a27      	ldr	r2, [pc, #156]	; (8002948 <TIM_Base_SetConfig+0x12c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00f      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a26      	ldr	r2, [pc, #152]	; (800294c <TIM_Base_SetConfig+0x130>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00b      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a25      	ldr	r2, [pc, #148]	; (8002950 <TIM_Base_SetConfig+0x134>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a24      	ldr	r2, [pc, #144]	; (8002954 <TIM_Base_SetConfig+0x138>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d003      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a23      	ldr	r2, [pc, #140]	; (8002958 <TIM_Base_SetConfig+0x13c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d108      	bne.n	80028e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <TIM_Base_SetConfig+0x114>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <TIM_Base_SetConfig+0xf8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <TIM_Base_SetConfig+0x124>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d103      	bne.n	800291c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	615a      	str	r2, [r3, #20]
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40010000 	.word	0x40010000
 8002934:	40000400 	.word	0x40000400
 8002938:	40000800 	.word	0x40000800
 800293c:	40000c00 	.word	0x40000c00
 8002940:	40010400 	.word	0x40010400
 8002944:	40014000 	.word	0x40014000
 8002948:	40014400 	.word	0x40014400
 800294c:	40014800 	.word	0x40014800
 8002950:	40001800 	.word	0x40001800
 8002954:	40001c00 	.word	0x40001c00
 8002958:	40002000 	.word	0x40002000

0800295c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f023 0201 	bic.w	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0303 	bic.w	r3, r3, #3
 8002992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f023 0302 	bic.w	r3, r3, #2
 80029a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a20      	ldr	r2, [pc, #128]	; (8002a34 <TIM_OC1_SetConfig+0xd8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d003      	beq.n	80029c0 <TIM_OC1_SetConfig+0x64>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <TIM_OC1_SetConfig+0xdc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d10c      	bne.n	80029da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f023 0308 	bic.w	r3, r3, #8
 80029c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f023 0304 	bic.w	r3, r3, #4
 80029d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a15      	ldr	r2, [pc, #84]	; (8002a34 <TIM_OC1_SetConfig+0xd8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d003      	beq.n	80029ea <TIM_OC1_SetConfig+0x8e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <TIM_OC1_SetConfig+0xdc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d111      	bne.n	8002a0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	621a      	str	r2, [r3, #32]
}
 8002a28:	bf00      	nop
 8002a2a:	371c      	adds	r7, #28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40010000 	.word	0x40010000
 8002a38:	40010400 	.word	0x40010400

08002a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f023 0210 	bic.w	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f023 0320 	bic.w	r3, r3, #32
 8002a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a22      	ldr	r2, [pc, #136]	; (8002b20 <TIM_OC2_SetConfig+0xe4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d003      	beq.n	8002aa4 <TIM_OC2_SetConfig+0x68>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <TIM_OC2_SetConfig+0xe8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10d      	bne.n	8002ac0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002abe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <TIM_OC2_SetConfig+0xe4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <TIM_OC2_SetConfig+0x94>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <TIM_OC2_SetConfig+0xe8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d113      	bne.n	8002af8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ad6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ade:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	621a      	str	r2, [r3, #32]
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40010000 	.word	0x40010000
 8002b24:	40010400 	.word	0x40010400

08002b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a21      	ldr	r2, [pc, #132]	; (8002c08 <TIM_OC3_SetConfig+0xe0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d003      	beq.n	8002b8e <TIM_OC3_SetConfig+0x66>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a20      	ldr	r2, [pc, #128]	; (8002c0c <TIM_OC3_SetConfig+0xe4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d10d      	bne.n	8002baa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <TIM_OC3_SetConfig+0xe0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d003      	beq.n	8002bba <TIM_OC3_SetConfig+0x92>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <TIM_OC3_SetConfig+0xe4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d113      	bne.n	8002be2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	621a      	str	r2, [r3, #32]
}
 8002bfc:	bf00      	nop
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	40010400 	.word	0x40010400

08002c10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	031b      	lsls	r3, r3, #12
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <TIM_OC4_SetConfig+0xa4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <TIM_OC4_SetConfig+0x68>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <TIM_OC4_SetConfig+0xa8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d109      	bne.n	8002c8c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	621a      	str	r2, [r3, #32]
}
 8002ca6:	bf00      	nop
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40010000 	.word	0x40010000
 8002cb8:	40010400 	.word	0x40010400

08002cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f023 0201 	bic.w	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f023 030a 	bic.w	r3, r3, #10
 8002cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	621a      	str	r2, [r3, #32]
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b087      	sub	sp, #28
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	f023 0210 	bic.w	r2, r3, #16
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	031b      	lsls	r3, r3, #12
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	621a      	str	r2, [r3, #32]
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b085      	sub	sp, #20
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f043 0307 	orr.w	r3, r3, #7
 8002d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	609a      	str	r2, [r3, #8]
}
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	2201      	movs	r2, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1a      	ldr	r2, [r3, #32]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	401a      	ands	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a1a      	ldr	r2, [r3, #32]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	621a      	str	r2, [r3, #32]
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e05a      	b.n	8002f0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d022      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea0:	d01d      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d018      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	; (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1a      	ldr	r2, [pc, #104]	; (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00e      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d009      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d10c      	bne.n	8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40010000 	.word	0x40010000
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	40000800 	.word	0x40000800
 8002f24:	40000c00 	.word	0x40000c00
 8002f28:	40010400 	.word	0x40010400
 8002f2c:	40014000 	.word	0x40014000
 8002f30:	40001800 	.word	0x40001800

08002f34 <update_next_buffer>:
/*
 * Update next 24 bits in the dma buffer - assume dma_buffer_pointer is pointing
 * to the buffer that is safe to update.
 *
 */
static inline void update_next_buffer() {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
	#endif

	// A simple state machine - we're either resetting (two buffers worth of zeros) or
	// we are transmitting data for the "current" led.

	if (led_state == LED_RES) { // Latch state - 10 or more full buffers of zeros
 8002f3a:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <update_next_buffer+0x100>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d124      	bne.n	8002f8c <update_next_buffer+0x58>

		// This one is simple - we got a bunch of zeros of the right size - just throw
		// that into the buffer.  Twice will do (two half buffers).
		if (zero_halves < 2) {
 8002f42:	4b3d      	ldr	r3, [pc, #244]	; (8003038 <update_next_buffer+0x104>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d80c      	bhi.n	8002f64 <update_next_buffer+0x30>
			memset(dma_buffer_pointer, 0, 48); // That's be 24 uint16_t values
 8002f4a:	4b3c      	ldr	r3, [pc, #240]	; (800303c <update_next_buffer+0x108>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2230      	movs	r2, #48	; 0x30
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f985 	bl	8003262 <memset>
			zero_halves++;
 8002f58:	4b37      	ldr	r3, [pc, #220]	; (8003038 <update_next_buffer+0x104>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	4b35      	ldr	r3, [pc, #212]	; (8003038 <update_next_buffer+0x104>)
 8002f62:	701a      	strb	r2, [r3, #0]
		}

		res_cnt++;
 8002f64:	4b36      	ldr	r3, [pc, #216]	; (8003040 <update_next_buffer+0x10c>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	4b34      	ldr	r3, [pc, #208]	; (8003040 <update_next_buffer+0x10c>)
 8002f6e:	701a      	strb	r2, [r3, #0]

		if (res_cnt >= LED_RESET_CYCLES) { // done enough reset cycles - move to next state
 8002f70:	4b33      	ldr	r3, [pc, #204]	; (8003040 <update_next_buffer+0x10c>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b09      	cmp	r3, #9
 8002f76:	d959      	bls.n	800302c <update_next_buffer+0xf8>
			led_col = 0;	// prepare to send data
 8002f78:	4b32      	ldr	r3, [pc, #200]	; (8003044 <update_next_buffer+0x110>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
			led_row = 0;
 8002f7e:	4b32      	ldr	r3, [pc, #200]	; (8003048 <update_next_buffer+0x114>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
			led_state = LED_DAT;
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <update_next_buffer+0x100>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]

	#ifdef BUFF_GPIO_Port
		HAL_GPIO_WritePin(BUFF_GPIO_Port, BUFF_Pin, GPIO_PIN_RESET);
	#endif

}
 8002f8a:	e04f      	b.n	800302c <update_next_buffer+0xf8>
		zero_halves = 0;
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <update_next_buffer+0x104>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
		uint8_t *led = (uint8_t *)&led_value[led_col + (cols * led_row)];
 8002f92:	4b2e      	ldr	r3, [pc, #184]	; (800304c <update_next_buffer+0x118>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a2b      	ldr	r2, [pc, #172]	; (8003044 <update_next_buffer+0x110>)
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4a2c      	ldr	r2, [pc, #176]	; (8003050 <update_next_buffer+0x11c>)
 8002f9e:	8812      	ldrh	r2, [r2, #0]
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4a29      	ldr	r2, [pc, #164]	; (8003048 <update_next_buffer+0x114>)
 8002fa4:	7812      	ldrb	r2, [r2, #0]
 8002fa6:	fb02 f200 	mul.w	r2, r2, r0
 8002faa:	440a      	add	r2, r1
 8002fac:	4413      	add	r3, r2
 8002fae:	603b      	str	r3, [r7, #0]
		for (uint8_t c = 0; c < 3; c++) { // Deal with the 3 color leds in one led package
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	71fb      	strb	r3, [r7, #7]
 8002fb4:	e014      	b.n	8002fe0 <update_next_buffer+0xac>
			memcpy(dma_buffer_pointer, color_value[led[c]], 16); // Lookup the actual buffer data
 8002fb6:	4b21      	ldr	r3, [pc, #132]	; (800303c <update_next_buffer+0x108>)
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	4a23      	ldr	r2, [pc, #140]	; (8003054 <update_next_buffer+0x120>)
 8002fc6:	4413      	add	r3, r2
 8002fc8:	2210      	movs	r2, #16
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f000 f93e 	bl	800324c <memcpy>
			dma_buffer_pointer += 8; // next 8 bytes
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <update_next_buffer+0x108>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3310      	adds	r3, #16
 8002fd6:	4a19      	ldr	r2, [pc, #100]	; (800303c <update_next_buffer+0x108>)
 8002fd8:	6013      	str	r3, [r2, #0]
		for (uint8_t c = 0; c < 3; c++) { // Deal with the 3 color leds in one led package
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	71fb      	strb	r3, [r7, #7]
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d9e7      	bls.n	8002fb6 <update_next_buffer+0x82>
		led_col++; // Next column
 8002fe6:	4b17      	ldr	r3, [pc, #92]	; (8003044 <update_next_buffer+0x110>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	3301      	adds	r3, #1
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <update_next_buffer+0x110>)
 8002ff0:	701a      	strb	r2, [r3, #0]
		if (led_col >= cols) { // reached top
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <update_next_buffer+0x110>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	4b15      	ldr	r3, [pc, #84]	; (8003050 <update_next_buffer+0x11c>)
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d315      	bcc.n	800302c <update_next_buffer+0xf8>
			led_col = 0; // back to first
 8003000:	4b10      	ldr	r3, [pc, #64]	; (8003044 <update_next_buffer+0x110>)
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
			led_row++; // and move on to next row
 8003006:	4b10      	ldr	r3, [pc, #64]	; (8003048 <update_next_buffer+0x114>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <update_next_buffer+0x114>)
 8003010:	701a      	strb	r2, [r3, #0]
			if (led_row >= rows) { // reached end - change to latch state
 8003012:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <update_next_buffer+0x114>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	b29a      	uxth	r2, r3
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <update_next_buffer+0x124>)
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d305      	bcc.n	800302c <update_next_buffer+0xf8>
				res_cnt = 0;
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <update_next_buffer+0x10c>)
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
				led_state = LED_RES;
 8003026:	4b03      	ldr	r3, [pc, #12]	; (8003034 <update_next_buffer+0x100>)
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200000f4 	.word	0x200000f4
 8003038:	20000009 	.word	0x20000009
 800303c:	200001ac 	.word	0x200001ac
 8003040:	200000f5 	.word	0x200000f5
 8003044:	200000f6 	.word	0x200000f6
 8003048:	200000f7 	.word	0x200000f7
 800304c:	200001b0 	.word	0x200001b0
 8003050:	20000092 	.word	0x20000092
 8003054:	0800337c 	.word	0x0800337c
 8003058:	20000090 	.word	0x20000090

0800305c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

// Done sending first half of the DMA buffer - this can now safely be updated
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM3) {
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a05      	ldr	r2, [pc, #20]	; (8003080 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x24>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d104      	bne.n	8003078 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1c>
		dma_buffer_pointer = &dma_buffer[0];
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x28>)
 8003070:	4a05      	ldr	r2, [pc, #20]	; (8003088 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x2c>)
 8003072:	601a      	str	r2, [r3, #0]
		update_next_buffer();
 8003074:	f7ff ff5e 	bl	8002f34 <update_next_buffer>
	}

}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40000400 	.word	0x40000400
 8003084:	200001ac 	.word	0x200001ac
 8003088:	20000094 	.word	0x20000094

0800308c <HAL_TIM_PWM_PulseFinishedCallback>:

// Done sending the second half of the DMA buffer - this can now be safely updated
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM3) {
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d104      	bne.n	80030a8 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>
		dma_buffer_pointer = &dma_buffer[BUFFER_SIZE];
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80030a0:	4a05      	ldr	r2, [pc, #20]	; (80030b8 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 80030a2:	601a      	str	r2, [r3, #0]
		update_next_buffer();
 80030a4:	f7ff ff46 	bl	8002f34 <update_next_buffer>
	}

}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40000400 	.word	0x40000400
 80030b4:	200001ac 	.word	0x200001ac
 80030b8:	200000c4 	.word	0x200000c4

080030bc <setLedValues>:
	is_dirty = true;
}

// Just throw values into led_value array - the dma interrupt will
// handle updating the dma buffer when needed
void setLedValues(uint8_t col, uint8_t row, uint8_t r, uint8_t g, uint8_t b) {
 80030bc:	b490      	push	{r4, r7}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4604      	mov	r4, r0
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4623      	mov	r3, r4
 80030cc:	71fb      	strb	r3, [r7, #7]
 80030ce:	4603      	mov	r3, r0
 80030d0:	71bb      	strb	r3, [r7, #6]
 80030d2:	460b      	mov	r3, r1
 80030d4:	717b      	strb	r3, [r7, #5]
 80030d6:	4613      	mov	r3, r2
 80030d8:	713b      	strb	r3, [r7, #4]
	led_value[col + (cols * row) + R] = r;
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <setLedValues+0x80>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	79f9      	ldrb	r1, [r7, #7]
 80030e0:	4b17      	ldr	r3, [pc, #92]	; (8003140 <setLedValues+0x84>)
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	79bb      	ldrb	r3, [r7, #6]
 80030e8:	fb03 f300 	mul.w	r3, r3, r0
 80030ec:	440b      	add	r3, r1
 80030ee:	3301      	adds	r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	797a      	ldrb	r2, [r7, #5]
 80030f4:	701a      	strb	r2, [r3, #0]
	led_value[col + (cols * row) + G] = g;
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <setLedValues+0x80>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	79f9      	ldrb	r1, [r7, #7]
 80030fc:	4a10      	ldr	r2, [pc, #64]	; (8003140 <setLedValues+0x84>)
 80030fe:	8812      	ldrh	r2, [r2, #0]
 8003100:	4610      	mov	r0, r2
 8003102:	79ba      	ldrb	r2, [r7, #6]
 8003104:	fb02 f200 	mul.w	r2, r2, r0
 8003108:	440a      	add	r2, r1
 800310a:	4413      	add	r3, r2
 800310c:	793a      	ldrb	r2, [r7, #4]
 800310e:	701a      	strb	r2, [r3, #0]
	led_value[col + (cols * row) + B] = b;
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <setLedValues+0x80>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	79f9      	ldrb	r1, [r7, #7]
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <setLedValues+0x84>)
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	79bb      	ldrb	r3, [r7, #6]
 800311e:	fb03 f300 	mul.w	r3, r3, r0
 8003122:	440b      	add	r3, r1
 8003124:	3302      	adds	r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	7c3a      	ldrb	r2, [r7, #16]
 800312a:	701a      	strb	r2, [r3, #0]
	is_dirty = true;
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <setLedValues+0x88>)
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bc90      	pop	{r4, r7}
 800313a:	4770      	bx	lr
 800313c:	200001b0 	.word	0x200001b0
 8003140:	20000092 	.word	0x20000092
 8003144:	200000f8 	.word	0x200000f8

08003148 <ws2812b_init>:

void ws2812b_init(TIM_HandleTypeDef *init_timer, uint32_t init_channel, uint16_t init_rows, uint16_t init_cols) {
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	4611      	mov	r1, r2
 8003154:	461a      	mov	r2, r3
 8003156:	460b      	mov	r3, r1
 8003158:	80fb      	strh	r3, [r7, #6]
 800315a:	4613      	mov	r3, r2
 800315c:	80bb      	strh	r3, [r7, #4]

	// Store timer handle for later
	timer = init_timer;
 800315e:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <ws2812b_init+0x88>)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6013      	str	r3, [r2, #0]

	// Store channel
	channel = init_channel;
 8003164:	4a1b      	ldr	r2, [pc, #108]	; (80031d4 <ws2812b_init+0x8c>)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	6013      	str	r3, [r2, #0]

	rows = init_rows;
 800316a:	4a1b      	ldr	r2, [pc, #108]	; (80031d8 <ws2812b_init+0x90>)
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	8013      	strh	r3, [r2, #0]
	cols = init_cols;
 8003170:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <ws2812b_init+0x94>)
 8003172:	88bb      	ldrh	r3, [r7, #4]
 8003174:	8013      	strh	r3, [r2, #0]

	led_value = malloc(rows * cols * 3); // Memory for led values
 8003176:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <ws2812b_init+0x90>)
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	4b17      	ldr	r3, [pc, #92]	; (80031dc <ws2812b_init+0x94>)
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	fb03 f202 	mul.w	r2, r3, r2
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f856 	bl	800323c <malloc>
 8003190:	4603      	mov	r3, r0
 8003192:	461a      	mov	r2, r3
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <ws2812b_init+0x98>)
 8003196:	601a      	str	r2, [r3, #0]
	memset(led_value, 0, rows * cols * 3); // Zero it all
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <ws2812b_init+0x98>)
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <ws2812b_init+0x90>)
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <ws2812b_init+0x94>)
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	fb03 f202 	mul.w	r2, r3, r2
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	461a      	mov	r2, r3
 80031b2:	2100      	movs	r1, #0
 80031b4:	f000 f855 	bl	8003262 <memset>

	// Start DMA to feed the PWM with values
	// At this point the buffer should be empty - all zeros
	HAL_TIM_PWM_Start_DMA(timer, channel, (uint32_t*) dma_buffer,
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <ws2812b_init+0x88>)
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <ws2812b_init+0x8c>)
 80031be:	6819      	ldr	r1, [r3, #0]
 80031c0:	2330      	movs	r3, #48	; 0x30
 80031c2:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <ws2812b_init+0x9c>)
 80031c4:	f7ff f80e 	bl	80021e4 <HAL_TIM_PWM_Start_DMA>
	BUFFER_SIZE * 2);

}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	200001a8 	.word	0x200001a8
 80031d4:	200001b4 	.word	0x200001b4
 80031d8:	20000090 	.word	0x20000090
 80031dc:	20000092 	.word	0x20000092
 80031e0:	200001b0 	.word	0x200001b0
 80031e4:	20000094 	.word	0x20000094

080031e8 <__errno>:
 80031e8:	4b01      	ldr	r3, [pc, #4]	; (80031f0 <__errno+0x8>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	2000000c 	.word	0x2000000c

080031f4 <__libc_init_array>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	4e0d      	ldr	r6, [pc, #52]	; (800322c <__libc_init_array+0x38>)
 80031f8:	4c0d      	ldr	r4, [pc, #52]	; (8003230 <__libc_init_array+0x3c>)
 80031fa:	1ba4      	subs	r4, r4, r6
 80031fc:	10a4      	asrs	r4, r4, #2
 80031fe:	2500      	movs	r5, #0
 8003200:	42a5      	cmp	r5, r4
 8003202:	d109      	bne.n	8003218 <__libc_init_array+0x24>
 8003204:	4e0b      	ldr	r6, [pc, #44]	; (8003234 <__libc_init_array+0x40>)
 8003206:	4c0c      	ldr	r4, [pc, #48]	; (8003238 <__libc_init_array+0x44>)
 8003208:	f000 f8a0 	bl	800334c <_init>
 800320c:	1ba4      	subs	r4, r4, r6
 800320e:	10a4      	asrs	r4, r4, #2
 8003210:	2500      	movs	r5, #0
 8003212:	42a5      	cmp	r5, r4
 8003214:	d105      	bne.n	8003222 <__libc_init_array+0x2e>
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800321c:	4798      	blx	r3
 800321e:	3501      	adds	r5, #1
 8003220:	e7ee      	b.n	8003200 <__libc_init_array+0xc>
 8003222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003226:	4798      	blx	r3
 8003228:	3501      	adds	r5, #1
 800322a:	e7f2      	b.n	8003212 <__libc_init_array+0x1e>
 800322c:	08004384 	.word	0x08004384
 8003230:	08004384 	.word	0x08004384
 8003234:	08004384 	.word	0x08004384
 8003238:	08004388 	.word	0x08004388

0800323c <malloc>:
 800323c:	4b02      	ldr	r3, [pc, #8]	; (8003248 <malloc+0xc>)
 800323e:	4601      	mov	r1, r0
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	f000 b817 	b.w	8003274 <_malloc_r>
 8003246:	bf00      	nop
 8003248:	2000000c 	.word	0x2000000c

0800324c <memcpy>:
 800324c:	b510      	push	{r4, lr}
 800324e:	1e43      	subs	r3, r0, #1
 8003250:	440a      	add	r2, r1
 8003252:	4291      	cmp	r1, r2
 8003254:	d100      	bne.n	8003258 <memcpy+0xc>
 8003256:	bd10      	pop	{r4, pc}
 8003258:	f811 4b01 	ldrb.w	r4, [r1], #1
 800325c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003260:	e7f7      	b.n	8003252 <memcpy+0x6>

08003262 <memset>:
 8003262:	4402      	add	r2, r0
 8003264:	4603      	mov	r3, r0
 8003266:	4293      	cmp	r3, r2
 8003268:	d100      	bne.n	800326c <memset+0xa>
 800326a:	4770      	bx	lr
 800326c:	f803 1b01 	strb.w	r1, [r3], #1
 8003270:	e7f9      	b.n	8003266 <memset+0x4>
	...

08003274 <_malloc_r>:
 8003274:	b570      	push	{r4, r5, r6, lr}
 8003276:	1ccd      	adds	r5, r1, #3
 8003278:	f025 0503 	bic.w	r5, r5, #3
 800327c:	3508      	adds	r5, #8
 800327e:	2d0c      	cmp	r5, #12
 8003280:	bf38      	it	cc
 8003282:	250c      	movcc	r5, #12
 8003284:	2d00      	cmp	r5, #0
 8003286:	4606      	mov	r6, r0
 8003288:	db01      	blt.n	800328e <_malloc_r+0x1a>
 800328a:	42a9      	cmp	r1, r5
 800328c:	d903      	bls.n	8003296 <_malloc_r+0x22>
 800328e:	230c      	movs	r3, #12
 8003290:	6033      	str	r3, [r6, #0]
 8003292:	2000      	movs	r0, #0
 8003294:	bd70      	pop	{r4, r5, r6, pc}
 8003296:	f000 f857 	bl	8003348 <__malloc_lock>
 800329a:	4a21      	ldr	r2, [pc, #132]	; (8003320 <_malloc_r+0xac>)
 800329c:	6814      	ldr	r4, [r2, #0]
 800329e:	4621      	mov	r1, r4
 80032a0:	b991      	cbnz	r1, 80032c8 <_malloc_r+0x54>
 80032a2:	4c20      	ldr	r4, [pc, #128]	; (8003324 <_malloc_r+0xb0>)
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	b91b      	cbnz	r3, 80032b0 <_malloc_r+0x3c>
 80032a8:	4630      	mov	r0, r6
 80032aa:	f000 f83d 	bl	8003328 <_sbrk_r>
 80032ae:	6020      	str	r0, [r4, #0]
 80032b0:	4629      	mov	r1, r5
 80032b2:	4630      	mov	r0, r6
 80032b4:	f000 f838 	bl	8003328 <_sbrk_r>
 80032b8:	1c43      	adds	r3, r0, #1
 80032ba:	d124      	bne.n	8003306 <_malloc_r+0x92>
 80032bc:	230c      	movs	r3, #12
 80032be:	6033      	str	r3, [r6, #0]
 80032c0:	4630      	mov	r0, r6
 80032c2:	f000 f842 	bl	800334a <__malloc_unlock>
 80032c6:	e7e4      	b.n	8003292 <_malloc_r+0x1e>
 80032c8:	680b      	ldr	r3, [r1, #0]
 80032ca:	1b5b      	subs	r3, r3, r5
 80032cc:	d418      	bmi.n	8003300 <_malloc_r+0x8c>
 80032ce:	2b0b      	cmp	r3, #11
 80032d0:	d90f      	bls.n	80032f2 <_malloc_r+0x7e>
 80032d2:	600b      	str	r3, [r1, #0]
 80032d4:	50cd      	str	r5, [r1, r3]
 80032d6:	18cc      	adds	r4, r1, r3
 80032d8:	4630      	mov	r0, r6
 80032da:	f000 f836 	bl	800334a <__malloc_unlock>
 80032de:	f104 000b 	add.w	r0, r4, #11
 80032e2:	1d23      	adds	r3, r4, #4
 80032e4:	f020 0007 	bic.w	r0, r0, #7
 80032e8:	1ac3      	subs	r3, r0, r3
 80032ea:	d0d3      	beq.n	8003294 <_malloc_r+0x20>
 80032ec:	425a      	negs	r2, r3
 80032ee:	50e2      	str	r2, [r4, r3]
 80032f0:	e7d0      	b.n	8003294 <_malloc_r+0x20>
 80032f2:	428c      	cmp	r4, r1
 80032f4:	684b      	ldr	r3, [r1, #4]
 80032f6:	bf16      	itet	ne
 80032f8:	6063      	strne	r3, [r4, #4]
 80032fa:	6013      	streq	r3, [r2, #0]
 80032fc:	460c      	movne	r4, r1
 80032fe:	e7eb      	b.n	80032d8 <_malloc_r+0x64>
 8003300:	460c      	mov	r4, r1
 8003302:	6849      	ldr	r1, [r1, #4]
 8003304:	e7cc      	b.n	80032a0 <_malloc_r+0x2c>
 8003306:	1cc4      	adds	r4, r0, #3
 8003308:	f024 0403 	bic.w	r4, r4, #3
 800330c:	42a0      	cmp	r0, r4
 800330e:	d005      	beq.n	800331c <_malloc_r+0xa8>
 8003310:	1a21      	subs	r1, r4, r0
 8003312:	4630      	mov	r0, r6
 8003314:	f000 f808 	bl	8003328 <_sbrk_r>
 8003318:	3001      	adds	r0, #1
 800331a:	d0cf      	beq.n	80032bc <_malloc_r+0x48>
 800331c:	6025      	str	r5, [r4, #0]
 800331e:	e7db      	b.n	80032d8 <_malloc_r+0x64>
 8003320:	200000fc 	.word	0x200000fc
 8003324:	20000100 	.word	0x20000100

08003328 <_sbrk_r>:
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	4c06      	ldr	r4, [pc, #24]	; (8003344 <_sbrk_r+0x1c>)
 800332c:	2300      	movs	r3, #0
 800332e:	4605      	mov	r5, r0
 8003330:	4608      	mov	r0, r1
 8003332:	6023      	str	r3, [r4, #0]
 8003334:	f7fd fb92 	bl	8000a5c <_sbrk>
 8003338:	1c43      	adds	r3, r0, #1
 800333a:	d102      	bne.n	8003342 <_sbrk_r+0x1a>
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	b103      	cbz	r3, 8003342 <_sbrk_r+0x1a>
 8003340:	602b      	str	r3, [r5, #0]
 8003342:	bd38      	pop	{r3, r4, r5, pc}
 8003344:	200001b8 	.word	0x200001b8

08003348 <__malloc_lock>:
 8003348:	4770      	bx	lr

0800334a <__malloc_unlock>:
 800334a:	4770      	bx	lr

0800334c <_init>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	bf00      	nop
 8003350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003352:	bc08      	pop	{r3}
 8003354:	469e      	mov	lr, r3
 8003356:	4770      	bx	lr

08003358 <_fini>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	bf00      	nop
 800335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335e:	bc08      	pop	{r3}
 8003360:	469e      	mov	lr, r3
 8003362:	4770      	bx	lr
